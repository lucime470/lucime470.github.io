<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>第一篇文章</title>
    <url>/2025/02/08/1/</url>
    <content><![CDATA[<p>123</p>
]]></content>
  </entry>
  <entry>
    <title>MySQL基础</title>
    <url>/2025/08/27/MySQL%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1>MySQL基础</h1>
<h2 id="1-启动和关闭">1. 启动和关闭</h2>
<h3 id="1-cmd">1.cmd</h3>
<ul>
<li>
<p>win加r进入运行输入cmd，ctrl加shift加enter以管理员模式运行</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> mysql80</span><br></pre></td></tr></table></figure>
<p>其中<strong>mysql80</strong> 为服务名，同样以</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">net</span> stop mysql80</span><br></pre></td></tr></table></figure>
<p>结束运行。</p>
</li>
</ul>
<h3 id="2-服务">2.服务</h3>
<ul>
<li>win加r进入运行输入<strong>services.msc</strong> ，进入后找到<strong>MySQL80</strong> 右键运行或停止。</li>
</ul>
<h2 id="2-客户端连接">2. 客户端连接</h2>
<h3 id="1-MySQL提供的工具">1.MySQL提供的工具</h3>
<ul>
<li>进入后直接输入密码连接。</li>
</ul>
<h3 id="2-cmd">2.cmd</h3>
<ul>
<li>
<p>win加r进入运行输入cmd，ctrl加shift加enter以管理员模式运行，（这里已经将mysql添加到环境变量，可以在任意路径下运行）输入</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mysql -h <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span> -P <span class="number">3306</span> -u root -p</span><br></pre></td></tr></table></figure>
<p>，其中-h后面跟指定地址，-<strong>P</strong> （大写）后跟指定端口，（这两个可以省略），-u后跟指定用户，以root用户进行连接，-p指定密码。</p>
</li>
</ul>
<h2 id="3-数据库概念及模型">3. 数据库概念及模型</h2>
<h3 id="1-概念">1.概念</h3>
<ul>
<li>关系型数据库（RDBMS)
<ul>
<li>由二维表组成，以关系型模型为基础</li>
</ul>
</li>
<li>使用表存储数据，格式统一，便于维护</li>
<li>使用SQL语句进行操作</li>
</ul>
<h3 id="2-数据模型">2.数据模型</h3>
<ol>
<li>
<p>客户端连接MySQL的数据库管理系统DBMS</p>
</li>
<li>
<p>使用SQL语句通过数据库管理系统来创建数据库</p>
</li>
<li>
<p>使用SQL语句在指定的数据库中创建多张表</p>
</li>
<li>
<p>单个数据库服务可以创建多个数据库</p>
</li>
<li>
<p>在表中存储数据</p>
</li>
</ol>
<h2 id="4-SQL语句">4.SQL语句</h2>
<h3 id="1-通用语法">1.通用语法</h3>
<ul>
<li>可以单行或多行书写，和c一样以分号结束</li>
<li>语句中可以用空格和缩进使其美观且不影响</li>
<li>SQL语句不区分大小写，关键字建议用大写</li>
<li>注释
<ul>
<li>单行：-- 或  #</li>
<li>多行：/*     */（同c）</li>
</ul>
</li>
</ul>
<h3 id="2-SQL分类">2.SQL分类</h3>
<h4 id="1-DDL-数据定义语言，用来定义数据库对象（数据库，表，字段）">1.DDL 数据定义语言，用来定义数据库对象（数据库，表，字段）</h4>
<h5 id="1-数据库操作">1.数据库操作</h5>
<p>1.查询</p>
<ul>
<li>
<p>查询所有数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases；</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查询当前所处数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> database();</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>2.创建</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database (if <span class="keyword">not</span> <span class="keyword">exists</span> #数据库不存在时则创建，存在时无报错) 数据库名称 （<span class="keyword">default</span> charset 字符集 #例如utf8)  (<span class="keyword">collate</span> 排序规则) ；</span><br></pre></td></tr></table></figure>
<p>3.删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> database（if <span class="keyword">exists</span>）数据库名；</span><br></pre></td></tr></table></figure>
<p>4.使用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use 数据库名；</span><br></pre></td></tr></table></figure>
<p>#进入一个数据库</p>
<h5 id="2-表操作">2.表操作</h5>
<h6 id="1-查询">1.查询</h6>
<p>1.查询<strong>当前</strong> 数据库中所有表（需要先进入一个数据库）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> tables；</span><br></pre></td></tr></table></figure>
<p>2.查询表结构</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">desc</span> 表名；</span><br></pre></td></tr></table></figure>
<p>3.查询指定表的建表语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create table</span> 表名；</span><br></pre></td></tr></table></figure>
<h6 id="2-创建">2. 创建</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> tables 表名(</span><br><span class="line"></span><br><span class="line">	字段<span class="number">1</span> 字段<span class="number">1</span>的类型（comment 字段<span class="number">1</span>的注释）,      #注意逗号</span><br><span class="line"></span><br><span class="line">	字段<span class="number">2</span> 字段<span class="number">2</span>的类型（comment 字段<span class="number">2</span>的注释）,</span><br><span class="line"></span><br><span class="line">	........</span><br><span class="line"></span><br><span class="line">)（comment 表注释）；</span><br></pre></td></tr></table></figure>
<h6 id="3-修改">3.修改</h6>
<p>1.添加</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter table</span> 表名 <span class="keyword">add</span> 字段名 类型（长度） （comment 注释）（约束）;</span><br></pre></td></tr></table></figure>
<p>2.修改数据类型</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter table</span> 表名 modify 字段名 新数据类型（长度）;</span><br></pre></td></tr></table></figure>
<p>3.修改字段名和字段类型</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter table</span> 表名 change 旧字段名 新字段名 类型(长度) （comment 注释）（约束）;</span><br></pre></td></tr></table></figure>
<p>4.删除字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter table</span> 表名 <span class="keyword">drop</span> 字段名;</span><br></pre></td></tr></table></figure>
<p>5.修改表名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter table</span> 表名 remane <span class="keyword">to</span> 新表名；</span><br></pre></td></tr></table></figure>
<h6 id="4-删除">4.删除</h6>
<p>1.删除表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> （if <span class="keyword">exists</span>） 表名；</span><br></pre></td></tr></table></figure>
<p>2.删除指定表，并重新创建该表 （保留表结构，但是其中数据删除）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名；</span><br></pre></td></tr></table></figure>
<h5 id="3-数据类型">3.数据类型</h5>
<h6 id="1-数值类型">1.数值类型</h6>
<table>
<thead>
<tr>
<th>类型</th>
<th>大小</th>
<th>有符号（signed）范围</th>
<th>无符号（unsigned）范围</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>tinyint</strong></td>
<td>1byte</td>
<td>(-128,127)</td>
<td>(0,255)</td>
</tr>
<tr>
<td># <strong>适用例如年龄 age TINYINT UNSIGNED (因为年龄只为正整数，所以用无符号的TINYINT型)</strong></td>
<td># ** 如果储存的是01，那么最终查询出来的也是1，只有用字符串‘01’，最后查询出来的才是01**</td>
<td></td>
<td></td>
</tr>
<tr>
<td>smallint</td>
<td>2bytes</td>
<td>(-32768,32767)</td>
<td>(0,65535)</td>
</tr>
<tr>
<td>mediumint</td>
<td>3bytes</td>
<td>(-8388608,8388607)</td>
<td>(0,16777215)</td>
</tr>
<tr>
<td>int或integer</td>
<td>4bytes</td>
<td>(-2147483648,2147483647)</td>
<td>(0,4294967295)</td>
</tr>
<tr>
<td>bigint</td>
<td>8bytes</td>
<td>(-2^63,(2^63)-1)</td>
<td>(0,(2^64)-1)</td>
</tr>
<tr>
<td><strong>float</strong></td>
<td>4bytes</td>
<td></td>
<td></td>
</tr>
<tr>
<td># <strong>与double相比较内存小运算快</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>double</strong></td>
<td>8bytes</td>
<td></td>
<td></td>
</tr>
<tr>
<td># <strong>适用例如分数(一百分制)   score double(4,1) 但是更适合用float</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>decimal</td>
<td>依赖于M(精度)和D(标度)的值</td>
<td></td>
<td></td>
</tr>
<tr>
<td># <strong>精度即为整个数的位数，标度为小数点位数，例如256.13精度为5，标度为2</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td># <strong>float是单精度浮点数  double是双精度浮点数 decimal是以字符串形式储存的精确小数</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>#<strong>float 和 double都是二进制近似计算，计算可能有舍入误差，且有精度范围，但decimal可自定义精度精确小数，且为十进制计算完全精准，适用于财务货币等精确计算</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h6 id="2-字符串类型">2.字符串类型</h6>
<table>
<thead>
<tr>
<th>类型</th>
<th>大小</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>char</strong></td>
<td>0-255 bytes</td>
<td>定长** 字符串</td>
</tr>
<tr>
<td># <strong>char(10)数字为储存的最大字符数，存储十以内的字符都占用十个字符，未占用的用空格补位，如果删除所有字符串即用update修改值为‘ ’空字符串，显示会是空字符串，而不是null</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td># <strong>varchar(10)会根据存储内容计算所要空间，因为要计算所以性能要比char差，但是存储空间利用率就高</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>varchar</strong></td>
<td>0-65536 bytes</td>
<td>** 变长**字符串</td>
</tr>
<tr>
<td>tinyblob</td>
<td>0-255 bytes</td>
<td>二进制数据</td>
</tr>
<tr>
<td>tinytext</td>
<td>0-255 bytes</td>
<td>短文本字符串</td>
</tr>
<tr>
<td>blob</td>
<td>0-65535 bytes</td>
<td>二进制长文本</td>
</tr>
<tr>
<td>text</td>
<td>0-65535 bytes</td>
<td>长文本</td>
</tr>
<tr>
<td>mediumblob</td>
<td></td>
<td>二进制中等长度文本</td>
</tr>
<tr>
<td>mediumtext</td>
<td></td>
<td>中等长度文本</td>
</tr>
<tr>
<td>longblob</td>
<td></td>
<td>二进制极大文本</td>
</tr>
<tr>
<td>longtext</td>
<td></td>
<td>极大文本</td>
</tr>
</tbody>
</table>
<h6 id="6-日期类型">6.日期类型</h6>
<table>
<thead>
<tr>
<th>类型</th>
<th>大小</th>
<th>范围</th>
<th>格式</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>date</strong></td>
<td>3</td>
<td>1000-01-01至9999-12-31</td>
<td>YYYY-MM-DD</td>
</tr>
<tr>
<td># <strong>日期值</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>time</td>
<td>3</td>
<td>-838:59:59至838:59:59</td>
<td>HH:MM:SS</td>
</tr>
<tr>
<td># <strong>时间值或持续时间</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>year</td>
<td>1</td>
<td>1901至2155</td>
<td>YYYY</td>
</tr>
<tr>
<td># <strong>年份值</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>datetime</td>
<td>8</td>
<td>1000-01-01 00:00:00至9999-12-31 23:59:59</td>
<td>YYYY-MM-DD HH:MM:SS</td>
</tr>
<tr>
<td># <strong>混合日期和时间值</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td>4</td>
<td>1970-01-01 00:00:01至2038-01-19 03:14:07</td>
<td>YYYY-MM-DD HH:MM:SS</td>
</tr>
<tr>
<td># <strong>混合日期和时间值，时间戳</strong></td>
<td></td>
<td># ** 这个2038问题是时间戳导致的问题**</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="2-DML-数据操作语言，用来对数据库中的数据进行增删改">2.DML 数据操作语言，用来对数据库中的数据进行增删改</h4>
<h5 id="1-添加数据">1.添加数据</h5>
<h6 id="1-给指定字段添加数据">1.给指定字段添加数据</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert into</span> 表名 字段<span class="number">1</span>，字段<span class="number">2</span>，....... <span class="keyword">values</span> 值<span class="number">1</span>，值<span class="number">2</span>，........;</span><br></pre></td></tr></table></figure>
<p># 如果值是字符串或日期数据类型，则要加引号</p>
<h6 id="2-给全部字段添加数据">2.给全部字段添加数据</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert into</span> 表名 <span class="keyword">values</span> 值<span class="number">1</span>，值<span class="number">2</span>，........;</span><br></pre></td></tr></table></figure>
<p>#即值1对应字段1，值2对应字段2，…</p>
<h6 id="3-批量添加数据">3.批量添加数据</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert into</span> 表名 字段<span class="number">1</span>，字段<span class="number">2</span>，....... <span class="keyword">values</span> 值<span class="number">1</span>，值<span class="number">2</span>，........，值<span class="number">1</span>，值<span class="number">2</span>，........，值<span class="number">1</span>，值<span class="number">2</span>，........;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert into</span> 表名 <span class="keyword">values</span>  值<span class="number">1</span>，值<span class="number">2</span>，........，值<span class="number">1</span>，值<span class="number">2</span>，........，值<span class="number">1</span>，值<span class="number">2</span>，........;</span><br></pre></td></tr></table></figure>
<h6 id="2-修改数据">2.修改数据</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段名<span class="number">1</span><span class="operator">=</span>值<span class="number">1</span>,字段名<span class="number">2</span><span class="operator">=</span>值<span class="number">2</span>,.........（<span class="keyword">where</span> 条件）;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>这里的条件就是把某几个符合这个条件的数据修改，例如修改id为1的这一条数据的name，</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> name<span class="operator">=</span>值<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>那么所有id为1的数据中的name都变为值1</p>
</li>
<li>
<p>如果不加where 条件则修改所有的name都变为值1，会警告</p>
</li>
<li>
<p>同样如果值是字符串或日期数据类型，则要加引号</p>
</li>
</ul>
<h6 id="3-删除数据">3.删除数据</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 （<span class="keyword">where</span> 条件）；</span><br></pre></td></tr></table></figure>
<ul>
<li>同样如果不加条件则删除所有数据</li>
<li>删除的不是某个字段而是整条数据</li>
<li>如果要删除某个字段的值则是要用<strong>update</strong> 来修改，字段=null</li>
</ul>
<h4 id="3-DQL-数据查询语言，用来查询数据库中表的记录">3.DQL 数据查询语言，用来查询数据库中表的记录</h4>
<h5 id="1-语法">1.语法</h5>
<ul>
<li><strong>select</strong> 字段列表</li>
<li><strong>from</strong> 表名列表</li>
<li><strong>where</strong> 条件列表</li>
<li><strong>group by</strong> 分组字段列表</li>
<li><strong>having</strong> 分组后条件列表</li>
<li><strong>order by</strong> 排序字段列表</li>
<li><strong>limit</strong> 分页参数</li>
</ul>
<h5 id="2-基本查询">2.基本查询</h5>
<h6 id="1-查询多个字段">1.查询多个字段</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span> ，字段<span class="number">2</span>，字段<span class="number">3</span>,........<span class="keyword">from</span> 表名；</span><br></pre></td></tr></table></figure>
<p>#记得加逗号</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名；</span><br></pre></td></tr></table></figure>
<p>#  *指查询返回所有字段，尽量直接写出所有字段，提高可读性</p>
<h6 id="2-设置别名">2.设置别名</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span> <span class="keyword">as</span> 别名<span class="number">1</span>，字段<span class="number">2</span> <span class="keyword">as</span> 别名<span class="number">2</span>，........<span class="keyword">from</span> 表名；</span><br></pre></td></tr></table></figure>
<p># 这里as可以省略</p>
<ul>
<li>表名后面也可以设置别名</li>
</ul>
<h6 id="3-去除重复记录">3.去除重复记录</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> 字段列表 <span class="keyword">from</span> 表名；</span><br></pre></td></tr></table></figure>
<p># 这里字段后面也可以加as来设置别名，同样可以省略</p>
<ul>
<li>纯数字别名必须加引号（单双都可以）但是最终查询出来的别名还是‘数字’</li>
</ul>
<h5 id="3-条件查询">3.条件查询</h5>
<h6 id="1-语法-2">1.语法</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件列表；</span><br></pre></td></tr></table></figure>
<ul>
<li>查询出来的符合条件的字段列表，如果用*来代替则查询出来的是符合条件的一整条数据</li>
</ul>
<h6 id="2-条件">2.条件</h6>
<table>
<thead>
<tr>
<th>比较运算符</th>
<th>功能</th>
<th>逻辑运算符</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>&gt;</td>
<td>大于</td>
<td>and 或 &amp;&amp;</td>
<td>并且（多个条件同时成立）</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
<td>or 或 ||</td>
<td>或者（任一条件成立）</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
<td>not 或 !</td>
<td>非</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
<td></td>
<td></td>
</tr>
<tr>
<td>=</td>
<td>等于</td>
<td></td>
<td></td>
</tr>
<tr>
<td>&lt;&gt;或!=</td>
<td>不等于</td>
<td></td>
<td></td>
</tr>
<tr>
<td>between…and…</td>
<td>在某个范围内（包含最大和最小值）</td>
<td></td>
<td></td>
</tr>
<tr>
<td>in(…)</td>
<td>在in后跟的列表中的数值满足其一即可</td>
<td></td>
<td></td>
</tr>
<tr>
<td># <strong>例如select * from  newwork where age in (12,18,20) ;即查询年龄为12，18，20的整条数据</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>like 占位符</td>
<td>模糊匹配（_匹配单个字符，%匹配任意个字符）</td>
<td></td>
<td></td>
</tr>
<tr>
<td># <strong>例如select * from  newwork where name like ’</strong> __<strong>'；即查询名字为两个字符的整条数据，这里是两个下划线</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td># <strong>例如select * from  newwork where card_id like ‘%9’;即查询身份证最后一位是9的整条数据</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td># <strong>也可以select * from  newwork where card_id like ‘%8_’;即查询倒数第二位是8的整条数据</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>is null</td>
<td>字段为null</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h5 id="4-分组查询">4.分组查询</h5>
<h6 id="1-语法-3">1.语法</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表<span class="number">1</span>，字段列表<span class="number">2</span>，... <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件 <span class="keyword">group</span> <span class="keyword">by</span> 分组字段名<span class="number">1</span>，字段名<span class="number">2</span>,... <span class="keyword">having</span> 分组后过滤条件</span><br></pre></td></tr></table></figure>
<h6 id="2-where和having的区别">2.where和having的区别</h6>
<ul>
<li>执行时间：where在分组前使用，having在分组后使用对结果过滤</li>
<li>判断条件：where的条件不允许使用聚合函数，having可以</li>
</ul>
<p># 例如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> gender,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> newwork <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br></pre></td></tr></table></figure>
<p>即统计所有数据中每种性别的个数，同时会显示性别</p>
<p># 例如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> age <span class="keyword">from</span> newwork <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;___&#x27;</span> <span class="keyword">group</span> <span class="keyword">by</span> age;</span><br></pre></td></tr></table></figure>
<p>即先筛选名字为三个字符串的，再按年龄分组</p>
<p># 例如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> age,<span class="built_in">count</span>(age) <span class="keyword">from</span> newwork <span class="keyword">where</span> card_id <span class="keyword">like</span> <span class="string">&#x27;%9&#x27;</span> <span class="keyword">group</span> <span class="keyword">by</span> age <span class="keyword">having</span> <span class="built_in">count</span>(age)<span class="operator">&lt;</span><span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<p>即分组前先查询身份证最后一位是9的，然后按年龄分组，最后having统计出所有年龄中相同年龄个数小于5个的个数</p>
<p># 一般查询的字段列表是聚合函数或者分组字段，查询其他会报错，禁用报错后也只会显示该类数据的第一个</p>
<p>#这里同样可以设置别名</p>
<h5 id="5-排序查询">5.排序查询</h5>
<h6 id="1-语法-4">1.语法</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 <span class="keyword">order</span> <span class="keyword">by</span> 字段<span class="number">1</span> 排序方式，字段<span class="number">2</span> 排序方式；</span><br></pre></td></tr></table></figure>
<h6 id="2-排序方式">2.排序方式</h6>
<ul>
<li>asc：升序（可省略）</li>
<li>desc：降序</li>
</ul>
<p># 例如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> newwork <span class="keyword">order</span> <span class="keyword">by</span>  age <span class="keyword">asc</span>,id <span class="keyword">desc</span> ;</span><br></pre></td></tr></table></figure>
<p>即所有数据先按年龄升序排序，有相同年龄的则按id数字降序排序</p>
<h6 id="3-注意">3.注意</h6>
<ul>
<li>多字段排序时，，当第一个字段值相同时，才会根据第二个字段进行排序</li>
</ul>
<h5 id="6-分页查询">6.分页查询</h5>
<h6 id="1-语法-5">1.语法</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 limit 起始索引，查询记录数；</span><br></pre></td></tr></table></figure>
<h6 id="2-注意">2.注意</h6>
<ul>
<li>起始索引从0开始，和数组一样，所以起始索引=（查询页码-1）* 每页记录数</li>
<li>不同数据库的分页查询不同，MySQL中是limit</li>
<li>起始索引为0，即查询第一页时可以省略起始索引</li>
<li>前面可以加where，order by，group by 。limit是再整个语句的最后使用</li>
</ul>
<p># 例如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> newwork limit <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<p>即从第一页查询所有数据，每页3条数据</p>
<p># 例如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> newwork limit <span class="number">5</span>,<span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<p>即每页5条数据，从第二页开始查询</p>
<h5 id="7-执行顺序">7.执行顺序</h5>
<ul>
<li>1.from</li>
<li>2.where</li>
<li>3.group by</li>
<li>4.having</li>
<li>5.select</li>
<li>6.order by</li>
<li>7.limit</li>
</ul>
<p># 需要注意执行顺序，再设置别名，才能正常使用别名</p>
<h4 id="4-DCL-数据控制语言，用来创建数据库用户，控制访问权限">4.DCL 数据控制语言，用来创建数据库用户，控制访问权限</h4>
<h5 id="1-管理用户">1.管理用户</h5>
<h6 id="1-查询用户">1.查询用户</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use mysql； #用户表存放在MySQL的mysql数据库中，所以要先进入这个数据库 </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span></span><br></pre></td></tr></table></figure>
<h6 id="2-创建用户">2.创建用户</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> ‘用户名’@‘主机名’ identified <span class="keyword">by</span> ‘密码’；</span><br></pre></td></tr></table></figure>
<h6 id="3-修改用户密码">3.修改用户密码</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> ‘用户名’@‘主机名’ identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> ‘新密码’；</span><br></pre></td></tr></table></figure>
<h6 id="4-删除用户">4.删除用户</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> ‘用户名’@‘主机名’；</span><br></pre></td></tr></table></figure>
<p># 主机名有localhost即本机，%即任意主机都可以访问此数据库</p>
<h5 id="2-权限控制">2.权限控制</h5>
<table>
<thead>
<tr>
<th>权限</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>all，all privileges</td>
<td>所有权限</td>
</tr>
<tr>
<td>select</td>
<td>查询数据</td>
</tr>
<tr>
<td>insert</td>
<td>插入数据</td>
</tr>
<tr>
<td>update</td>
<td>修改数据</td>
</tr>
<tr>
<td>delete</td>
<td>删除数据</td>
</tr>
<tr>
<td>alter</td>
<td>修改表</td>
</tr>
<tr>
<td>drop</td>
<td>删除数据库/表/视图</td>
</tr>
<tr>
<td>create</td>
<td>创建数据库/表</td>
</tr>
</tbody>
</table>
<h6 id="1-查询权限">1.查询权限</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> ‘用户名’@‘主机名’；</span><br></pre></td></tr></table></figure>
<h6 id="2-授予权限">2.授予权限</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> 权限列表 <span class="keyword">on</span> 数据库名.表名 <span class="keyword">to</span> ‘用户名’@‘主机名’；</span><br></pre></td></tr></table></figure>
<h6 id="3-撤销权限">3.撤销权限</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">revoke</span> 权限列表 <span class="keyword">on</span> 数据库.表名 <span class="keyword">from</span> ‘用户名’@‘主机名’；</span><br></pre></td></tr></table></figure>
<h6 id="4-注意">4.注意</h6>
<ul>
<li>数据库和表名可以为*</li>
<li>权限列表可以为多个权限，之间要加，隔开</li>
</ul>
<h2 id="5-函数">5.函数</h2>
<h3 id="1-聚合函数">1.聚合函数</h3>
<ul>
<li>将一列数据作为一个整体，进行纵向计算</li>
</ul>
<h4 id="1-常见聚合函数">1.常见聚合函数</h4>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>count</td>
<td>统计数量</td>
</tr>
<tr>
<td>max</td>
<td>最大值</td>
</tr>
<tr>
<td>min</td>
<td>最小值</td>
</tr>
<tr>
<td>avg</td>
<td>平均值</td>
</tr>
<tr>
<td>sum</td>
<td>求和</td>
</tr>
<tr>
<td># null值不参与计算</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="2-语法">2.语法</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 聚合函数(字段列表)  <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件；</span><br></pre></td></tr></table></figure>
<p># 这里的括号和前面的聚合函数间不能有空格</p>
<h3 id="2-字符串函数">2.字符串函数</h3>
<h4 id="1-常见字符串函数">1.常见字符串函数</h4>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>concat(S1,S2,…Sn)</td>
<td>字符串拼接，将括号里的拼接成一个字符串</td>
</tr>
<tr>
<td>lower(str)</td>
<td>将字符串str全部转为小写</td>
</tr>
<tr>
<td>upper(str)</td>
<td>将字符串str全部转为大写</td>
</tr>
<tr>
<td>lpad(str,n,pad)</td>
<td>左填充，将字符串pad对str的左边进行填充，达到n个字符串长度</td>
</tr>
<tr>
<td>rpad(str,n,pad)</td>
<td>右填充，将字符串pad对str的右边进行填充，达到n个字符串长度</td>
</tr>
<tr>
<td># n是指填充完的整个字符串为n个，当pad的长度大于n-原字符串长度时，只会填充pad的前n-原字符串长度个</td>
<td></td>
</tr>
<tr>
<td>trim(str)</td>
<td>去掉字符串头部和尾部的空格</td>
</tr>
<tr>
<td>substring(str,start,len)</td>
<td>返回字符串str中从start位置起的len个长度的字符串</td>
</tr>
<tr>
<td># start是数字索引，但是这里的索引是从1开始的</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="3-数值函数">3.数值函数</h3>
<h4 id="1-常见数值函数">1.常见数值函数</h4>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>ceil(x)</td>
<td>向上取整</td>
</tr>
<tr>
<td>floor(x)</td>
<td>向下取整</td>
</tr>
<tr>
<td>mod(x,y)</td>
<td>返回x/y的模（余数）</td>
</tr>
<tr>
<td>rand()</td>
<td>返回0-1内的随机数</td>
</tr>
<tr>
<td># 例如<strong>select lpad(round(rand()*1000000,0),6,0);</strong> 可以用作生成随机六位数验证码，即先用rand随机出数字再乘1000000，再用round去掉小数，lpad在左边补0</td>
<td></td>
</tr>
<tr>
<td>round(x,y)</td>
<td>求参数x的四舍五入值，保留y位小数</td>
</tr>
<tr>
<td># 例如<strong>select round(206.2658,2);</strong> 返回的值就是206.27</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="4-日期函数">4.日期函数</h3>
<h4 id="1-常见日期函数">1.常见日期函数</h4>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>curdate()</td>
<td>返回当前日期</td>
</tr>
<tr>
<td>curtime()</td>
<td>返回当前时间</td>
</tr>
<tr>
<td>now()</td>
<td>返回当前日期和时间</td>
</tr>
<tr>
<td>year(date)</td>
<td>获取指定date的年份</td>
</tr>
<tr>
<td># 例如<strong>select  year(now());</strong></td>
<td></td>
</tr>
<tr>
<td>month(date)</td>
<td>获取指定date的月份</td>
</tr>
<tr>
<td>day(date)</td>
<td>获取指定date的日期</td>
</tr>
<tr>
<td>date_add(date,interval expr type)</td>
<td>返回一个日期或时间值加上一个时间间隔expr后的时间值</td>
</tr>
<tr>
<td># 例如<strong>select date_add(now(),interval 70 day );</strong> 即当前时间向后推70天的日期和时间，这里interval是固定的，expr是间隔，type是时间类型</td>
<td></td>
</tr>
<tr>
<td>datediff(date1,date2)</td>
<td>返回起始时间date1和结束时间date2之间的天数</td>
</tr>
<tr>
<td># 返回的时间=date1-date2，所以可能会是负数</td>
<td></td>
</tr>
<tr>
<td># 例如<strong>select name,datediff(curdate(),enterdate) as ‘enterdate’ from newwork order by  enterdate desc;</strong> 即计算入职天数并设置其别名为enterdate，再按降序排序</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="5-流程函数">5.流程函数</h3>
<h4 id="1-常见的流程函数">1.常见的流程函数</h4>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>if(value,t,f)</td>
<td>如果value为true则返回t，否则返回f</td>
</tr>
<tr>
<td>ifnull(value1,value2)</td>
<td>如果value1不为空，返回value1，否则value2</td>
</tr>
<tr>
<td>case when val1 then res1 else default end</td>
<td>如果val1为true，返回res1，…否则返回default</td>
</tr>
<tr>
<td># 例如<strong>select age,name,case when age &lt;18 then ‘y’ when age&gt;18 then ‘a’ else ‘e’ end from newwork;</strong> 即查询年龄在十八以下的为y，十八以上为a，其他为e 。同理可以用于判断成绩优良</td>
<td></td>
</tr>
<tr>
<td>case expr when val1 then res1 else default end</td>
<td>如果expr的值=val1，返回res1，否则default</td>
</tr>
<tr>
<td># 例如<strong>select name, age，case age when 20 then ‘t’ when 19 then ‘n’ end from newwork;</strong> 即查询年龄为20和19的分别返回t和n</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="6-约束">6.约束</h2>
<h3 id="1-概述">1.概述</h3>
<h4 id="1-概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据">1.概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据</h4>
<h4 id="2-目的：保证数据库中的数据的正确有效和完整性">2.目的：保证数据库中的数据的正确有效和完整性</h4>
<h4 id="3-分类：">3.分类：</h4>
<table>
<thead>
<tr>
<th>约束</th>
<th>描述</th>
<th>关键字</th>
</tr>
</thead>
<tbody>
<tr>
<td>非空约束</td>
<td>限制改字段的数据不能为null</td>
<td>not null</td>
</tr>
<tr>
<td>唯一约束</td>
<td>保证该字段的所有数据都是唯一，不重复的</td>
<td>unique</td>
</tr>
<tr>
<td>主约束条件</td>
<td>主键是一行数据的唯一标识，要求非空且唯一</td>
<td>primary key</td>
</tr>
<tr>
<td>默认约束条件</td>
<td>保存数据时，如果未指定该字段的值，则采用默认值</td>
<td>default</td>
</tr>
<tr>
<td>检查约束</td>
<td>保证字段值满足某一个条件</td>
<td>check</td>
</tr>
<tr>
<td># 8.0.16后才支持检查约束</td>
<td></td>
<td></td>
</tr>
<tr>
<td>外键约束</td>
<td>用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td>
<td>foreign key</td>
</tr>
</tbody>
</table>
<h3 id="2-示例">2.示例</h3>
<table>
<thead>
<tr>
<th>字段名</th>
<th>字段类型</th>
<th>约束条件</th>
<th>约束关键字</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>int</td>
<td>主键，并且主动增长</td>
<td>primary key，auto_increment</td>
</tr>
<tr>
<td>name</td>
<td>varchar（10）</td>
<td>不为空，并且唯一</td>
<td>not null，unique</td>
</tr>
<tr>
<td>age</td>
<td>int</td>
<td>大于0，并且小于等于120</td>
<td>check</td>
</tr>
<tr>
<td>status</td>
<td>char（1）</td>
<td>如果没有指定该值，默认为1</td>
<td>default</td>
</tr>
<tr>
<td>gender</td>
<td>char（1）</td>
<td>无</td>
<td></td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create table</span> user1(</span><br><span class="line">        id <span class="type">int</span> <span class="keyword">primary key</span> auto_increment comment <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">        name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not null</span> <span class="keyword">unique</span> ,</span><br><span class="line">        age <span class="type">int</span> <span class="keyword">check</span> ( age<span class="operator">&gt;</span><span class="number">0</span> <span class="operator">&amp;&amp;</span> age<span class="operator">&lt;=</span><span class="number">120</span> ),</span><br><span class="line">        status <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="number">1</span>,</span><br><span class="line">        gender <span class="type">char</span>(<span class="number">1</span>)</span><br><span class="line">)comment <span class="string">&#x27;用于学习约束的用户表&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>然后用 <strong>insert</strong> 向表中插入数据</p>
</li>
<li>
<p>注意：如果某一条插入的数据违反了约束那么是不会创建该数据的，但是会向数据库申请一个主键，所以会导致下一次创建数据的时候即使没有违反约束，也会跳过之前没有创建的数据的主键，产生跳号的现象</p>
</li>
<li>
<p>但是主键最核心的是其唯一性，而不是连续性，部分数据库中可以手动填空</p>
</li>
</ul>
<h3 id="3-外键约束">3.外键约束</h3>
<ul>
<li>概念：外键用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性</li>
</ul>
<h4 id="1-添加外键">1.添加外键</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create table</span> 表名(</span><br><span class="line"></span><br><span class="line">	字段名 数据类型，</span><br><span class="line"></span><br><span class="line">	.......	</span><br><span class="line"></span><br><span class="line">	<span class="keyword">constraint</span> 外键名 <span class="keyword">foreign key</span> （外键字段名） <span class="keyword">references</span> 主表（主表列名）</span><br><span class="line"></span><br><span class="line">	);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter table</span> 表名 <span class="keyword">add constraint</span> 外键名 <span class="keyword">foreign key</span> （外键字段名） <span class="keyword">references</span> 主表（主表列名）</span><br></pre></td></tr></table></figure>
<p># 例如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter table</span> user1 <span class="keyword">add constraint</span> fk_user1_dept_id <span class="keyword">foreign key</span> (id_for_connent) <span class="keyword">references</span> dept (id);</span><br></pre></td></tr></table></figure>
<p>即将表user1中的id_for_connent与表dept中的id关联并把外键名设置为fk_user1_dept_id</p>
<ul>
<li>如果删除dept中的数据则会报错，以此来保证数据的完整性</li>
</ul>
<h4 id="2-删除外键">2.删除外键</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter table</span> 表名 <span class="keyword">drop</span> <span class="keyword">foreign key</span> 外键名；</span><br></pre></td></tr></table></figure>
<h4 id="3-删除-更新行为">3.删除/更新行为</h4>
<table>
<thead>
<tr>
<th>行为</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>no action</td>
<td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，有则不允许删除/更新</td>
</tr>
<tr>
<td>restrict</td>
<td>同上（默认的）</td>
</tr>
<tr>
<td>cascade</td>
<td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，有则删除/更新子表中的记录</td>
</tr>
<tr>
<td>set null</td>
<td>当在父表中删除对应记录时，首先检查该记录是否有对应外键，有则设置子表中该外键为null</td>
</tr>
<tr>
<td># 前提是该外键允许取null</td>
<td></td>
</tr>
<tr>
<td>set default</td>
<td>父表有变更时，子表将外键列设置成一个默认的值（MySQL的lnnodb引擎不支持）</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter table</span> 表名 <span class="keyword">add constraint</span> 外键名 <span class="keyword">foreign key</span> （外键字段） <span class="keyword">references</span> 主表名（主表字段名） <span class="keyword">on</span> <span class="keyword">update</span> cascade <span class="keyword">on</span> <span class="keyword">delete</span> cascade；</span><br></pre></td></tr></table></figure>
<p>#例如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter table</span> user1 <span class="keyword">add constraint</span> fk_user1_name_dept_id <span class="keyword">foreign key</span> (id_for_connent) <span class="keyword">references</span> dept (id) <span class="keyword">on</span> <span class="keyword">UPDATE</span> cascade <span class="keyword">on</span> <span class="keyword">delete</span> cascade ;</span><br></pre></td></tr></table></figure>
<p>即添加一个外键，并且设置为更新/删除时cascade级联，即对应的更新/删除。其中的cascade可以更换成其他行为</p>
<ul>
<li>这个语法不是直接修改而是创建外键并设定了属性</li>
</ul>
<h2 id="7-多表查询">7.多表查询</h2>
<h3 id="1-多表关系">1.多表关系</h3>
<h4 id="1-一对多（多对一）">1.一对多（多对一）</h4>
<ul>
<li>例如：一个部门可以有多个员工，但是一个员工只能对应一个部门、</li>
<li>实现：在多的一方建立外键，指向少的一方的主键</li>
</ul>
<h4 id="2-多对多">2.多对多</h4>
<ul>
<li>例如：一个学生可以选择多个课程，一门课程可以被多个学生选择</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s.name,s.no,c.name <span class="keyword">from</span> student.s,student_course sc,course c <span class="keyword">where</span> s.id<span class="operator">=</span>sc.studentid <span class="keyword">and</span> sc.courseid<span class="operator">=</span>c.id;</span><br></pre></td></tr></table></figure>
<ul>
<li>实现：建立第三张中间表，中间表中要有两个外键，分别连接另外两张表的主键</li>
</ul>
<h4 id="3-一对一">3.一对一</h4>
<ul>
<li>例如：每个用户对应其用户信息</li>
<li>实现：<strong>在任意一表中加入外键，再关联到另一个表的主键</strong> ，但是外键要设置约束条件为唯一unique</li>
</ul>
<h3 id="2-多表查询概述">2.多表查询概述</h3>
<ul>
<li>
<p>概述：指从多张表中查询数据</p>
</li>
<li>
<p><strong>笛卡尔积</strong> ：笛卡尔乘积指的是，两个集合的所有组合情况，如果直接用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user1,dept;</span><br></pre></td></tr></table></figure>
<p>来查询两张表就会出现笛卡尔积的情况，所以正常查询时可以使用where语句根据具体情况来消除无效的笛卡尔积</p>
</li>
<li>
<h4 id="分类">分类</h4>
</li>
<li>
<p>连接查询</p>
<ul>
<li>
<p>内连接：相当于查询A,B交集部分的数据</p>
</li>
<li>
<p>外连接：</p>
<ul>
<li>左外连接：查询<strong>左表</strong> 所有数据，以及两张表交集部分数据</li>
<li>右外连接：查询<strong>右表</strong> 所有数据，以及两张表交集部分数据</li>
</ul>
</li>
<li>
<p>自连接：当前表与自身的连接查询，自连接必须使用表的别名</p>
</li>
</ul>
</li>
<li>
<p>子查询</p>
</li>
</ul>
<h3 id="3-内连接">3.内连接</h3>
<h4 id="1-隐式内连接">1.隐式内连接</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span>，表<span class="number">2</span> <span class="keyword">where</span> 条件...;</span><br></pre></td></tr></table></figure>
<p>#例如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> u.name,d.name <span class="keyword">from</span> user1 u，dept d <span class="keyword">where</span> u.id_for_connent<span class="operator">=</span>d.id;</span><br></pre></td></tr></table></figure>
<p>#注意字段名前面要用表名来限定是哪个表的字段</p>
<p>#可以设置别名，但是设置别名后就不能再使用表名</p>
<h4 id="2-显式内连接">2.显式内连接</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">inner</span> <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 连接条件....;</span><br></pre></td></tr></table></figure>
<p># inner可以省略</p>
<p># 相当于where换成on</p>
<p># 连接条件后面可以再加where条件</p>
<h3 id="4-外连接">4.外连接</h3>
<h4 id="1-左外连接">1.左外连接</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 条件...;</span><br></pre></td></tr></table></figure>
<p># outer可以省略</p>
<p># 查询的是左表即表1的所有数据，包含两个表的交集部分</p>
<p># 例如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> u.<span class="operator">*</span>,d.name <span class="keyword">from</span> user1 u <span class="keyword">left</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> u.id_for_connent<span class="operator">=</span>d.id;</span><br></pre></td></tr></table></figure>
<p>这样即使user1中有部分数据没有与dept中的关联也可以被查询出来</p>
<h4 id="2-右外连接">2.右外连接</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 条件...;</span><br></pre></td></tr></table></figure>
<p># outer可以省略</p>
<p># 查询的是右表即表2的所有数据，包含两个表的交集部分</p>
<p># 可以通过交换两个表名来实现右外连接和左外连接的转换，通常使用左外连接</p>
<h3 id="5-自连接">5.自连接</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> 别名<span class="number">1</span> <span class="keyword">join</span> 表<span class="number">1</span> 别名<span class="number">2</span> <span class="keyword">on</span> 条件...;</span><br></pre></td></tr></table></figure>
<ul>
<li>自连接可以是内连接，也可以是外连接</li>
</ul>
<p># 例如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> u.name,u1.name <span class="keyword">from</span> user1 u ，<span class="keyword">user</span> u1 <span class="keyword">where</span> u.manager_id<span class="operator">=</span>u1.id;</span><br></pre></td></tr></table></figure>
<p># 在一张公司员工表中manager_id表示某一员工的领导的id，这样可以查询出员工的领导是谁</p>
<p># 这里用的是内连接，这样就不会在员工那一栏显示领导，因为领导没有领导，可以用外连接，就能在员工栏显示出领导，领导栏就会显示null</p>
<p># 将一张表视为两张</p>
<h3 id="6-联合查询">6.联合查询</h3>
<ul>
<li>就是把多次查询的结果合并，形成一个新的查询结果集</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1.</span>..      #省略号中可以用<span class="keyword">where</span>条件</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span>      				   #<span class="keyword">all</span>可以省略，省略后会去除重复的数据</span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">2.</span>..；    #省略号中可以用<span class="keyword">where</span>条件</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>这是一个完整的语句可以将上下两个结果直接合并</strong></li>
</ul>
<p># 注意：上下两个字段的列数和字段类型必须一致，否则会报错</p>
<h3 id="7-子查询">7.子查询</h3>
<ul>
<li>
<p>概念：SQL语句中嵌套select语句，称为子查询（嵌套查询）</p>
</li>
<li>
<p>例如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">where</span> column1<span class="operator">=</span>（<span class="keyword">select</span> column1 <span class="keyword">from</span> 表<span class="number">2</span>）；</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>其中<strong>select column1 from 表2</strong> 就是子查询，其他的外部语句可以是insert/delete/select中任一</p>
</li>
<li>
<p>根据子查询结果不同，可以分为</p>
<ul>
<li>
<p>标量子查询（子查询结果为单个值）</p>
</li>
<li>
<p>列子查询（查询结果为一列）</p>
</li>
<li>
<p>行子查询（查询结果为一行）</p>
</li>
<li>
<p>表子查询（子查询结果为多行多列）</p>
</li>
</ul>
</li>
<li>
<p>根据子查询位置不同，又分为</p>
<ul>
<li>where之后</li>
<li>from之后</li>
<li>select之后</li>
</ul>
</li>
</ul>
<h4 id="1-标量子查询">1.标量子查询</h4>
<ul>
<li>返回结果是单个值（数字，字符串，日期等）</li>
<li>常用操作符：=,&lt;&gt;,&gt;,&gt;=,&lt;，&lt;=</li>
</ul>
<p># 例如：需要查询销售部的员工信息</p>
<ul>
<li>
<p>第一步：查询销售部的id序号</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name<span class="operator">=</span>‘销售部’；</span><br></pre></td></tr></table></figure>
<p>假设查询出来id=4</p>
</li>
<li>
<p>第二步由id作为查询条件在另一张表查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user1 <span class="keyword">where</span> id_for_connent<span class="operator">=</span><span class="number">4</span>;</span><br></pre></td></tr></table></figure>
<p>可得结果</p>
</li>
</ul>
<p># 而标量子查询只需要一步</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user1 <span class="keyword">where</span> id_for_connent<span class="operator">=</span>(<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name<span class="operator">=</span>‘销售部’);</span><br></pre></td></tr></table></figure>
<ul>
<li>因为括号里查询出来的是单个值所以可以用标量子查询</li>
</ul>
<p># 同样字符串和日期也可以用此方法来做</p>
<h4 id="2-列子查询">2.列子查询</h4>
<ul>
<li>返回结果是一列（可以多行）</li>
<li>常用操作符：</li>
</ul>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>in</td>
<td>在指定的集合范围内，多选一</td>
</tr>
<tr>
<td>not in</td>
<td>不在指定的聚合范围内</td>
</tr>
<tr>
<td>any</td>
<td>子查询返回列表中有任意一个满足即可</td>
</tr>
<tr>
<td>some</td>
<td>与any等同</td>
</tr>
<tr>
<td>all</td>
<td>子查询返回值的所有值都必须满足</td>
</tr>
</tbody>
</table>
<p># 例如查询销售部和研发部的员工信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user1 <span class="keyword">where</span> id_for_connent <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name<span class="operator">=</span>‘销售部’ <span class="keyword">or</span> ‘研发部’);</span><br></pre></td></tr></table></figure>
<p># 例如要获取所有部门中工资大于研发部所有员工工资的员工信息</p>
<ul>
<li>
<p>第一步：先获取研发部的员工工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> salary <span class="keyword">from</span> user1 <span class="keyword">where</span> id_for_connent<span class="operator">=</span>(<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name<span class="operator">=</span> ‘研发部);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>第二步：在所有表中查询工资数值大于所有查询到的这些数值的员工信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user1 <span class="keyword">where</span> salary<span class="operator">&gt;</span> <span class="keyword">all</span>(<span class="keyword">select</span> salary <span class="keyword">from</span> user1 <span class="keyword">where</span> id_for_connent<span class="operator">=</span>(<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name<span class="operator">=</span> ‘研发部));</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="3-行子查询">3.行子查询</h4>
<ul>
<li>返回结果是一行（可以多列）</li>
<li>常用操作符：=，&lt;&gt;,in,not in</li>
</ul>
<p># 例如：要查询和某个员工的工资和领导完全相同的其他员工的信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user1 <span class="keyword">where</span> (salary,manager)<span class="operator">=</span>(<span class="keyword">select</span> salary，manager <span class="keyword">from</span> user1 <span class="keyword">where</span> name<span class="operator">=</span>‘员工<span class="number">1</span>’）;</span><br></pre></td></tr></table></figure>
<h4 id="4-表子查询">4.表子查询</h4>
<ul>
<li>返回结果是多行多列</li>
<li>常用操作符：in</li>
</ul>
<p># 例如：要查询和某两个员工的工资和领导完全相同的其他员工的信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user1 <span class="keyword">where</span> (salary,manager) <span class="keyword">in</span> (<span class="keyword">select</span> salary，manager <span class="keyword">from</span> user1 <span class="keyword">where</span> name<span class="operator">=</span>‘员工<span class="number">1</span>’ <span class="keyword">or</span> name<span class="operator">=</span>‘员工<span class="number">2</span>’）;</span><br></pre></td></tr></table></figure>
<p># 例如：要查询在2005-01-01后入职的员工的信息和其部门</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> u.<span class="operator">*</span>,d.<span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user1 <span class="keyword">where</span> enterdate<span class="operator">&gt;</span><span class="string">&#x27;2005-01-01&#x27;</span>) u <span class="keyword">left</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> u.id_for_connet<span class="operator">=</span>d.id;</span><br></pre></td></tr></table></figure>
<p># 这里将第一次查询出来的内容作为一张表放在from后面，再将这张表与部门表左外连接</p>
<h2 id="8-事务">8.事务</h2>
<h3 id="1-事务简介">1.事务简介</h3>
<ul>
<li>事务是一组操作的合集，是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即操作同时成功或同时失败</li>
<li>默认每一条语句都是一个事务，且自动提交</li>
</ul>
<h3 id="2-事务操作">2.事务操作</h3>
<h4 id="1-查看-设置事务提交方式">1.查看/设置事务提交方式</h4>
<h5 id="方法一：">方法一：</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@autocommit</span>；</span><br></pre></td></tr></table></figure>
<p># 查询出来为1则是自动提交，为0则是手动提交</p>
<ul>
<li><strong>set @@autocommit=0；</strong></li>
</ul>
<h5 id="方法二：">方法二：</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction 或 <span class="keyword">begin</span> </span><br></pre></td></tr></table></figure>
<p># 自动提交的情况下可以用这种方式，这条语句和下面要执行的语句一起运行</p>
<h4 id="2-提交事务">2.提交事务</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">commit</span>；</span><br></pre></td></tr></table></figure>
<p># 先运行需要执行的语句然后再运行commit</p>
<h4 id="3-回滚事务">3.回滚事务</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">rollback</span>；</span><br></pre></td></tr></table></figure>
<p># 运行报错后不要提交，直接回滚</p>
<h3 id="3-事务四大特性">3.事务四大特性</h3>
<ul>
<li>原子性：事务是不可分割的最小操作单元，要么全部成功，要么全部失败</li>
<li>一致性：事务完成时，必须使所有数据都保持一致状态</li>
<li>隔离性：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li>
</ul>
<p># 即多个事务间互不干扰</p>
<ul>
<li>持续性：事务一旦提交或回滚，它对数据库中的数据的改变是永久的</li>
</ul>
<h3 id="4-并发事务问题">4.并发事务问题</h3>
<table>
<thead>
<tr>
<th>问题</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>脏读</td>
<td>一个事务读到另一个事务还没有提交的数据</td>
</tr>
<tr>
<td>不可重复读</td>
<td>一个事务先后读取到同一条记录，但两次读取的数据不同，称之为不可重复读</td>
</tr>
<tr>
<td># 即在另一个事务提交的前后分别查询了这一条数据，<strong>不可重复读的重点在于数据的修改</strong></td>
<td></td>
</tr>
<tr>
<td>幻读</td>
<td>一个事务按照条件查询数据时，没有对应的数据行，但在插入数据时，又发现这行数据已经存在</td>
</tr>
<tr>
<td>#即在另一个事务提交的前后分别查询和插入了数据，但是反复查询都显示没有数据，<strong>幻读的重点在于数据的新增和删除</strong></td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="5-事务隔离级别">5.事务隔离级别</h3>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>会出现的问题</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody>
<tr>
<td>read uncommitted</td>
<td></td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>read committed</td>
<td></td>
<td>⨉</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>repeatable read（默认）</td>
<td></td>
<td>⨉</td>
<td>⨉</td>
<td>√</td>
</tr>
<tr>
<td># 不可重复读的问题被解决，变为可重复读，正在执行的事务不会被其他正在执行的事务影响</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>serializable（串行化）</td>
<td></td>
<td>⨉</td>
<td>⨉</td>
<td>⨉</td>
</tr>
<tr>
<td># 用了serializable后当第一个事务先执行时，第二个事务会被阻塞，cmd中回车后光标会一直闪烁直到第一个事务提交，才会执行第二个事务。</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td># 从上往下级别越高则数据安全性越高，性能越差</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li>查看事务隔离级别</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@transaction_isolation</span>；</span><br></pre></td></tr></table></figure>
<ul>
<li>设置事务隔离级别</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> session<span class="operator">/</span><span class="keyword">global</span> transaction isolation level read uncommitted<span class="operator">/</span>read committed<span class="operator">/</span>repeatable read<span class="operator">/</span>serializable；</span><br></pre></td></tr></table></figure>
<p># 其中session是会话级别即进当前客户端窗口，global则针对所有客户端窗口</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL运维</title>
    <url>/2025/08/27/MySQL%E8%BF%90%E7%BB%B4%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1>MySQL运维</h1>
<h2 id="1-日志">1.日志</h2>
<h3 id="1-错误日志">1.错误日志</h3>
<ul>
<li>
<p>错误日志是 MySQL 中最重要的日志之一，它记录了当mysqld 启动和停止时，以及服务器在运行过程中发生任何严重错误时的相关信息。</p>
</li>
<li>
<p>当数据库出现任何故障导致无法正常使用时，建议首先查看此日志。</p>
</li>
<li>
<p>该日志是默认开启的，默认存放目录/var/log/，默认的日志文件名为mysqld.log。查看日志位置：</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%log_error%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="2-二进制日志">2.二进制日志</h3>
<h4 id="1-介绍">1.介绍</h4>
<ul>
<li>
<p>二进制日志（binlog）记录了所有ddl（数据定义语言）语句和dml（数据操纵语言）语句，但不包括数据查询（select，show）语句</p>
</li>
<li>
<p>作用：</p>
<ul>
<li>
<p>灾难时的数据恢复，数据库崩溃后再次执行二进制日志中的内容就可以恢复</p>
</li>
<li>
<p>MySQL的主从复制。在MySQL8版本中，默认二进制日志是开启的，涉及参数：</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%log_bin%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>可以查询到：</p>
<ul>
<li>log_bin：开启或关闭</li>
<li>log_bin_basename：日志文件位置，文件由binlog和编号组成</li>
<li>log_bin_index：索引文件位置</li>
</ul>
</li>
</ul>
<h4 id="2-日志格式">2.日志格式</h4>
<table>
<thead>
<tr>
<th>日志格式</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>statement</td>
<td>基于SQL语句的日志记录，记录的是SQL语句，对数据进行修改的SQL都会记录在日志文件中</td>
</tr>
<tr>
<td>row</td>
<td>基于行的日志记录，记录的是每一行的数据变更（默认）</td>
</tr>
<tr>
<td>mixed</td>
<td>混合了statement和row两种格式，默认采用statement，在某些特殊情况下会自动切换为row进行记录</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%binlog_format%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p># 查询日志格式</p>
<p># 需要在文件中修改日志格式</p>
<p># 修改后会在新的日志文件中记录</p>
<h4 id="3-日志查看">3.日志查看</h4>
<ul>
<li>
<p>由于日志是以二进制方式存储的，不能直接读取，需要通过二进制日志查询工具mysqlbinlog来查看</p>
</li>
<li>
<p>语法：</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqlbinlog 选项 日志文件名</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>选项：</p>
<ul>
<li>-d，指定数据库名称，只列出指定的数据库相关操作</li>
<li>-o，忽略掉日志中的前n行命令</li>
<li>-v，将行事件（数据变更）重构为SQL语句</li>
<li>-w，将行事件（数据变更）重构为SQL语句，并输出注释信息</li>
</ul>
</li>
</ul>
<h4 id="4-日志删除">4.日志删除</h4>
<ul>
<li>对于比较繁忙的业务系统，每天生成的binlog数据巨大，如果长时间不清除，将会占用大量磁盘空间</li>
</ul>
<table>
<thead>
<tr>
<th>指令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>reset master;</td>
<td>删除全部binlog日志，删除之后，日志编号，将从binlog.000001重新开始</td>
</tr>
<tr>
<td>purge master logs to ‘binlog.xxxxxx’;</td>
<td>删除xxxxxx编号之前的所有日志（此编号不会被删除）</td>
</tr>
<tr>
<td>purge master logs before ‘yyyy-mm-dd hh24:mi:ss’;</td>
<td>删除日志为’yyyy-mm-dd hh24:mi:ss’之前产生的所有日志</td>
</tr>
</tbody>
</table>
<ul>
<li>也可以在mysql的配置文件中配置二进制日志的过期时间，设置后，二进制日志过期会自动删除</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%binlog_expire_logs_seconds%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p># 默认30天</p>
<h3 id="3-查询日志">3.查询日志</h3>
<ul>
<li>
<p>查询日志中记录了客户端的所有操作语句，而二进制日志不包含查询数据的SQL语句。默认情况下，查询日志是未开启的</p>
</li>
<li>
<p>涉及参数：general_log</p>
</li>
<li>
<p>修改MySQL的配置文件/etc/my.cnf文件，添加内容：</p>
</li>
<li>
<p><strong>general_log=1</strong></p>
</li>
</ul>
<p># 开启</p>
<ul>
<li>general_log_file=目录/文件名</li>
</ul>
<p># 指定文件名，默认文件名为主机名.log</p>
<h3 id="4-慢查询日志">4.慢查询日志</h3>
<ul>
<li>
<p>慢查询日志记录了所有执行时间超过参数long_query_time 设置值并且扫描记录数不小于min_examined_rowlimit的所有的SQL语句的日志，默认未开启。long_query_time 默认为10秒，最小为0，精度可以到微秒。</p>
</li>
<li>
<p>默认情况下，不会记录管理语句，也不会记录不使用索引进行查找的查询。可以在MySQL的配置文件/etc/my.cnf文件中修改log_slow_admin_statements和更改此行为log_queries_not_using_indexes</p>
</li>
<li>
<p><strong>log_slow_admin_statements=1</strong></p>
</li>
</ul>
<p># 记录执行较慢的管理语句</p>
<ul>
<li><strong>log_queries_not_using_indexes=1</strong></li>
</ul>
<p># 记录执行较慢的未使用索引的语句</p>
<h2 id="2-主从复制">2.主从复制</h2>
<h3 id="1-概述">1.概述</h3>
<ul>
<li>
<p>主从复制是指将主数据库的DDL 和 DML操作通过二进制日志传到从库服务器中，然后在从库上对这些日志重新执行（也叫重做），从而使得从库（slave）和主库（master）的数据保持同步。</p>
</li>
<li>
<p>MySQL支持一台主库同时向多台从库进行复制，从库同时也可以作为其他从服务器的主库，实现链状复制。</p>
</li>
<li>
<p>作用：</p>
<ul>
<li>1.主库出现问题，可以快速切换到从库提供服务。</li>
<li>2.实现读写分离，降低主库的访问压力。</li>
<li>3.可以在从库中执行备份，以避免备份期间影响主库服务。</li>
</ul>
</li>
</ul>
<h3 id="2-原理">2.原理</h3>
<ul>
<li>主要分为三步：
<ul>
<li>1.Master 主库在事务提交时，会把数据变更记录在二进制日志文件 binlog中。</li>
<li>2.从库的IOthread读取主库的二进制日志文件 binlog，写入到从库的中继日志Relay Log。</li>
<li>3.slave从库的SQLthread读取中继日志，再将改变反映它自己的数据。</li>
</ul>
</li>
</ul>
<h3 id="3-搭建">3.搭建</h3>
<h4 id="1-服务器准备">1.服务器准备</h4>
<ul>
<li>
<p>主库和从库</p>
</li>
<li>
<p>关闭服务器的防火墙</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure>
<p># 关闭防火墙</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>
<p># 关闭防火墙的开机自启动</p>
<ul>
<li>或者</li>
<li>开放指定的端口号</li>
</ul>
<h4 id="2-主库配置">2.主库配置</h4>
<h5 id="1-修改配置文件-etc-my-cnf">1.修改配置文件/etc/my.cnf</h5>
<ul>
<li><strong>server-id=1</strong></li>
</ul>
<p># mysql服务id，保证整个集群环境中唯一，取值范围：1~2^32-1，默认为1</p>
<ul>
<li><strong>read-only=0</strong></li>
</ul>
<p># 是否只读，1代表只读，0代表读写</p>
<ul>
<li><strong>binlog-ignore-db=数据库名</strong></li>
</ul>
<p># 忽略数据库，指不需要同步的数据库</p>
<ul>
<li><strong>binlog-do-db=数据库名</strong></li>
</ul>
<p># 指定同步的数据库</p>
<h5 id="2-重启MySQL服务器">2.重启MySQL服务器</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure>
<p># 没有报错则配置成功</p>
<h5 id="3-登录mysql，创建远程连接的账号，并授予主从复制权限">3.登录mysql，创建远程连接的账号，并授予主从复制权限</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;%&#x27;</span>identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;密码&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p># 创建用户，并设置密码，因为主机名设置为%所以该用户可在任意主机连接该MySQL服务</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> replication slave <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p># 为用户分配主从复制权限</p>
<h5 id="4-通过指令，查看二进制日志坐标">4.通过指令，查看二进制日志坐标</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> master status;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>字段含义说明：</p>
<ul>
<li>file：从哪个日志文件开始推送日志文件</li>
<li>position：从哪个位置开始推送日志</li>
<li>binlog_ignore_db：指定不需要同步的数据库</li>
</ul>
</li>
</ul>
<h4 id="3-从库配置">3.从库配置</h4>
<h5 id="1-修改配置文件-etc-my-cnf-2">1.修改配置文件/etc/my.cnf</h5>
<ul>
<li><strong>server-id=2</strong></li>
</ul>
<p># mysql服务id，保证整个集群环境中唯一，取值范围：1~2^32-1，和主库不一样即可</p>
<ul>
<li><strong>read-only=1</strong></li>
</ul>
<p># 是否只读，1代表只读，0代表读写</p>
<ul>
<li><strong>super-read-only=1</strong></li>
</ul>
<p># 可以将超级管理员也设置为只读，否则也能读写</p>
<h5 id="2-重启MySQL服务器-2">2.重启MySQL服务器</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure>
<p># 没有报错则配置成功</p>
<h5 id="3-登录mysql，设置主库配置">3.登录mysql，设置主库配置</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">change replication source <span class="keyword">to</span> source_host<span class="operator">=</span><span class="string">&#x27;原主机ip地址&#x27;</span>,source_user<span class="operator">=</span><span class="string">&#x27;用户名&#x27;</span>,source_password<span class="operator">=</span><span class="string">&#x27;密码&#x27;</span>,source_log_file<span class="operator">=</span><span class="string">&#x27;对应二进制日志文件&#x27;</span>,source_log_pos<span class="operator">=</span>从日志中的哪个位置开始同步;</span><br></pre></td></tr></table></figure>
<p># 从日志中的哪个位置开始同步，可以查看二进制日志坐标中的position</p>
<ul>
<li>老版本</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">change master <span class="keyword">to</span> master_host<span class="operator">=</span><span class="string">&#x27;原主机ip地址&#x27;</span>,master_user<span class="operator">=</span><span class="string">&#x27;用户名&#x27;</span>,master_password<span class="operator">=</span><span class="string">&#x27;密码&#x27;</span>,master_log_file<span class="operator">=</span><span class="string">&#x27;对应二进制日志文件名&#x27;</span>,master_log_pos<span class="operator">=</span>从日志中的哪个位置开始同步;</span><br></pre></td></tr></table></figure>
<h5 id="4-开启同步操作">4.开启同步操作</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">start</span> replica;</span><br></pre></td></tr></table></figure>
<ul>
<li>老版本(新版本也兼容)</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">start</span> slave;</span><br></pre></td></tr></table></figure>
<h5 id="5-查看主从同步状态">5.查看主从同步状态</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> replica status;</span><br></pre></td></tr></table></figure>
<ul>
<li>老版本</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> slave status;</span><br></pre></td></tr></table></figure>
<p># 状态中<strong>Replica_IO_Running</strong> 和<strong>Replica_SQL_Running</strong> 为<strong>Yes</strong> 说明主从复制正常</p>
<h2 id="3-分库分表">3.分库分表</h2>
<h3 id="1-介绍-2">1.介绍</h3>
<h4 id="1-问题分析">1.问题分析</h4>
<ul>
<li>
<p>随着互联网及移动互联网的发展，应用系统的数据量也是成指数式增长，若采用单数据库进行数据存储，存在以下性能瓶颈：</p>
<ul>
<li>1.IO瓶颈：热点数据太多，数据库缓存不足，产生大量磁盘IO，效率较低。请求数据太多，带宽不够，网络IO瓶颈。</li>
<li>2.CPU瓶颈：排序、分组、连接查询、聚合统计等SQL会耗费大量的CPU资源，请求数太多，CPU出现瓶颈。</li>
</ul>
</li>
<li>
<p>分库分表的中心思想都是将数据分散存储，使得单一数据库/表的数据量变小来缓解单一数据库的性能问题，从而达到提升数据库性能的目的。</p>
</li>
</ul>
<h4 id="2-拆分策略">2.拆分策略</h4>
<ul>
<li>
<p>垂直拆分</p>
<ul>
<li>垂直分库：以表为依据，根据业务将不同表拆分到不同库中。
<ul>
<li>每个库的表结构都不一样</li>
<li>每个库的数据也不一样</li>
<li>所有库的并集是全量数据</li>
</ul>
</li>
<li>垂直分表：以字段为依据,根据字段属性将不同字段拆分到不同表中。
<ul>
<li>每个表的结构都不一样</li>
<li>每个表的数据也不一样，一般通过一列（主键/外键）关联</li>
<li>所有表的并集是全量数据</li>
</ul>
</li>
</ul>
</li>
<li>
<p>水平拆分</p>
<ul>
<li>水平分库：以字段为依据，按照一定策略，将一个库的数据拆分到多个库中。
<ul>
<li>每个库的表结构都一样</li>
<li>每个库的数据都不一样</li>
<li>所有库的并集是全量数据</li>
</ul>
</li>
<li>水平分表：以字段为依据，按照一定策略，将一个表的数据拆分到多个库中。
<ul>
<li>每个表的表结构都一样</li>
<li>每个表的数据都不一样</li>
<li>所有表的并集是全量数据</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="3-实现技术">3.实现技术</h4>
<ul>
<li>shardingJDBC：基于AOP原理，在应用程序中对本地执行的SQL进行拦截，解析、改写、路由处理。需要自行编码配置实现，只支持java语言，性能较高。</li>
<li>MyCat：数据库分库分表中间件，不用调整代码即可实现分库分表，支持多种语言，性能不及前者。</li>
</ul>
<h3 id="2-MyCat概述">2.MyCat概述</h3>
<h4 id="1-介绍-3">1.介绍</h4>
<ul>
<li>
<p>Mycat是开源的、活跃的、基于Java语言编写的MySQL数据库中间件。mycat伪装了mysql的协议，所以可以像使用mysql一样来使用mycat，对于开发人员来说根本感觉不到mycat的存在。</p>
</li>
<li>
<p>优势：</p>
<ul>
<li>性能可靠稳定</li>
<li>强大的技术团队</li>
<li>体系完善</li>
<li>社区活跃</li>
</ul>
</li>
<li>
<p>MyCat中间件服务器需要安装jdk和mycat</p>
</li>
<li>
<p>mycat解压后有主要四个目录：</p>
<ul>
<li>bin：存放可执行文件，用于启动停止mycat</li>
<li>conf：存放mycat的配置文件</li>
<li>lib：存放mycat的项目依赖包（jar）</li>
<li>logs：存放mycat的日志文件</li>
</ul>
</li>
</ul>
<h4 id="2-概念介绍">2.概念介绍</h4>
<ul>
<li>逻辑结构：</li>
<li>逻辑库
<ul>
<li>逻辑表
<ul>
<li>分片节点</li>
</ul>
</li>
</ul>
</li>
<li>物理结构：</li>
<li>节点主机（与分片节点相连）</li>
</ul>
<h3 id="3-MyCat入门">3.MyCat入门</h3>
<h4 id="1-需求">1.需求</h4>
<ul>
<li>由于 tb_order 表中数据量很大，磁盘IO及容量都到达了瓶颈，现在需要对tb_order表进行数据分片，分为三个数据节点，每一个节点主机位于不同的服务器上。</li>
</ul>
<h4 id="2-环境准备">2.环境准备</h4>
<ul>
<li>需要在三台服务器上都建立一个空的数据库</li>
<li>将防火墙关闭或者直接开放指定端口</li>
</ul>
<h4 id="3-分片配置（schema-xml）">3.分片配置（schema.xml）</h4>
<ul>
<li>修改mycat中conf中的schema.xml文件</li>
</ul>
<p># 可以用notepad++的插件NppFTP，show NppFTP Windows，便于编辑</p>
<ul>
<li>1.配置table（逻辑表）的表名</li>
<li>2.配置dataNode（数据节点）的数据节点名</li>
<li>3.配置数据节点连接的dataHost（节点主机）的节点主机名</li>
<li>4.配置关联的节点主机的database（数据库）的数据库名</li>
<li>5.在下面的dataHost中详细配置关联的服务器的ip地址，端口号以及用户名和密码</li>
</ul>
<h4 id="4-分片配置（server-xml）">4.分片配置（server.xml）</h4>
<ul>
<li>
<p>修改mycat中conf中的server.xml文件</p>
</li>
<li>
<p>配置mycat的用户及用户的权限信息</p>
</li>
<li>
<p>将user中的schemas后面的testdb改为数据库名</p>
</li>
<li>
<p>在readOnly后可以配置是否只可读</p>
</li>
</ul>
<h4 id="5-启动服务">5.启动服务</h4>
<ul>
<li>切换到mycat的安装目录，执行指令启动mycat</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/mycat start</span><br></pre></td></tr></table></figure>
<p># 启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/mycat stop</span><br></pre></td></tr></table></figure>
<p># 停止</p>
<p># mycat启动后占用端口号8066</p>
<ul>
<li>
<p>启动完成后可以查看logs目录下的启动日志，查看mycat是否启动完成</p>
</li>
<li>
<p>登录</p>
</li>
<li>
<p>和MySQL一样</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -h 主机ip地址 -P 8066 -u root -p</span><br></pre></td></tr></table></figure>
<h3 id="4-MyCat配置">4.MyCat配置</h3>
<h4 id="1-schema-xml">1.schema.xml</h4>
<ul>
<li>schema.xml作为MyCat中最重要的配置文件之一，涵盖了MyCat的逻辑库、逻辑表、分片规则、分片节点及数据源的配置。</li>
<li>主要包含三组标签</li>
</ul>
<h5 id="1-schema">1.schema</h5>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;DB01&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;true&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">name-</span>&quot;<span class="attr">TB</span> <span class="attr">ORDER</span>&quot; <span class="attr">dataNode</span>=<span class="string">&quot;dnl,dn2,dn3&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;auto-sharding-long&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>schema标签用于定义 MyCat实例中的逻辑库，一个MyCat实例中，可以有多个逻辑库，可以通过 schema标签来划分不同的逻辑库。</p>
</li>
<li>
<p>MyCat中的逻辑库的概念，等同于ySQL中的database概念，需要操作某个逻辑库下的表时，也需要切换逻辑库(use xxx)。</p>
</li>
<li>
<p>核心属性：</p>
<ul>
<li>name：指定自定义的逻辑库库名</li>
<li>checksdLschema：在SOL语句操作时指定了数据库名称，执行时是否自动去除；true：自动去除，false：不自动去除</li>
<li>sqlMaxLimit：如果未指定limit进行查询，列表查询模式查询多少条记录</li>
</ul>
</li>
<li>
<p>子标签table</p>
<ul>
<li>table标签定义了MyCat中逻辑库schema下的逻辑表，所有需要拆分的表都需要在table标签中定义。</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;DB01&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;true&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">name-</span>&quot;<span class="attr">TB</span> <span class="attr">ORDER</span>&quot; <span class="attr">dataNode</span>=<span class="string">&quot;dnl, dn2,dn3&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;auto-sharding-long&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>核心属性：</p>
<ul>
<li>name：定义逻辑表表名，在该逻辑库下唯一</li>
<li>dataNode：定义逻辑表所属的dataNode，该属性需要与dataNode标签中name对应；多个dataNode逗号分隔</li>
<li>rule：分片规则的名字，分片规则名字是在rule.xml中定义的</li>
<li>primaryKey：逻辑表对应真实表的主键</li>
<li>type：逻辑表的类型，目前逻辑表只有全局表和普通表，如果未配置，就是普通表；全局表，配置为global</li>
</ul>
</li>
</ul>
<h5 id="2-dataNode">2.dataNode</h5>
<ul>
<li>dataNode标签中定义了MyCat中的数据节点，也就是我们通常说的数据分片。一个dataNode标签就是一个独立的数据分片。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;dhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;dbo1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;dhost2&quot;</span> <span class="attr">database</span>=<span class="string">&quot;dbo1&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn3&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;dhost3&quot;</span> <span class="attr">database-</span>&quot;<span class="attr">dbo1</span>&quot;&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>核心属性：
<ul>
<li>name：定义数据节点名称</li>
<li>dataHost：数据库实例主机名称，引用自dataHost 标签中name属性</li>
<li>database：定义分片所属数据库</li>
</ul>
</li>
</ul>
<h5 id="3-dataHost">3.dataHost</h5>
<ul>
<li>dataHost标签在MyCat逻辑库中作为底层标签存在，直接定义了具体的数据库实例、读写分离、心跳语句。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;dhost1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;jdbc&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;master&quot;</span> <span class="attr">url</span>=<span class="string">&quot;jdbc:mysql://192.168.200.210:3306?useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai&amp;amp:characterEncoding-utf8&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;1234&quot;</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">&lt;/dataHost》</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>核心属性：</p>
<ul>
<li>name：唯一标识，供上层标签使用</li>
<li>maxCon/minCon: 最大连接数/最小连接数</li>
<li>balance:负载均衡策略，取值0,1,2,3</li>
<li>writeType：写操作分发方式（0：写操作转发到第一个writeHost，第一个挂了，切换到第二个；1：写操作随机分发到配置的writeHost）</li>
<li>dbDriver：数据库驱动，支持native、jdbc</li>
</ul>
</li>
</ul>
<h4 id="2-rule-xml">2.rule.xml</h4>
<ul>
<li>rule.xml中定义所有拆分表的规则，在使用过程中可以灵活的使用分片算法，或者对同一个分片算法使用不同的参数，它让分片过程可配置化。主要包含两类标签：tableRule、Function</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;auto-sharding-long&quot;</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="name">colunsJ</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>rang-long<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p># 分片规则</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;rang-long&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.AutoPartitionByLong&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name-</span>&quot;<span class="attr">mapFile</span>&quot;&gt;</span>autopartition-long.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p># 关联的分片算法rang-long，封装在外部文件autopartition-long.txt</p>
<h4 id="3-server-xml">3.server.xml</h4>
<ul>
<li>
<p>server.xml配置文件包含了MyCat的系统配意信息，主要有两个重要的标签：System、user。</p>
</li>
<li>
<p>system</p>
<ul>
<li>对应的系统配置项及其含义，参考资料。</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">system</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;nonePasswordLogin&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useHandshakeV10&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useSqlStat&quot;</span>&gt;</span>l<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">system</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>user</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;root&quot;</span> <span class="attr">defaultAccount</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>DB01<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>schemas后的表示该用户可以访问的逻辑库，多个逻辑库之间逗号分隔</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">privileges</span> <span class="attr">check</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;TESTDB&quot;</span> <span class="attr">dml</span>=<span class="string">&quot;0110&quot;</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb01&quot;</span> <span class="attr">dml</span>=<span class="string">&quot;0000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb02&quot;</span> <span class="attr">dml</span>=<span class="string">&quot;1111&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">privileges</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p># &lt;privileges check=“false”&gt;表示是否开启DML权限检查，默认为false</p>
<p># &lt;schema name=“TESTDB” dml=“0110”&gt;配置指定逻辑库的权限</p>
<p># &lt;table name=“tb01” dml=“0000”&gt;&lt;/table&gt;配置指定逻辑表的权限，就近原则：以逻辑表为准（如果配置了逻辑表权限）</p>
<p># 0000，用二进制数对应IUSD（增改查删，例如1010则为增和查）的权限</p>
<h3 id="5-MyCat分片">5.MyCat分片</h3>
<h4 id="1-垂直拆分">1.垂直拆分</h4>
<h5 id="1-场景">1.场景</h5>
<ul>
<li>
<p>在业务系统中，涉及以下表结构，但是由于用户与订单每天都会产生大量的数据，单台服务器的数据存储及处理能力是有限的，可以对数据库表进行拆分，原有的数据库表如下</p>
<ul>
<li>省市区</li>
<li>商品
<ul>
<li>基础信息</li>
<li>品牌</li>
<li>分类</li>
<li>编号</li>
<li>详细信息</li>
</ul>
</li>
<li>订单
<ul>
<li>详细信息</li>
<li>支付记录</li>
</ul>
</li>
<li>用户
<ul>
<li>用户名</li>
<li>用户地址</li>
</ul>
</li>
</ul>
</li>
<li>
<p>将用户和省市区，商品，订单存放在三个分片中</p>
</li>
</ul>
<h5 id="2-准备">2.准备</h5>
<ul>
<li>在三台MySQL中创建数据库shopping</li>
</ul>
<h5 id="3-配置">3.配置</h5>
<ul>
<li>在schema中配置逻辑库，逻辑表，以及指定每一个逻辑表所关联的数据节点</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;SHOPPING&quot;</span> <span class="attr">checksgLschema</span>=<span class="string">&quot;true&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb goods base&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dnl&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb goods brand&quot;</span> <span class="attr">dataNode-</span>&quot;<span class="attr">dnl</span>&quot; <span class="attr">primaryKey</span>&quot;<span class="attr">id</span>&quot;/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb goods cat&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;th goods desc&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dnl&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;goods id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb goods item&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dnl&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb order item&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb order master&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;order id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb order pay log&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;out trade no&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb user&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn3&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;th user address&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn3&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb areas provinces&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn3&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb areas city&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn3&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb areas region&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn3&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;dhostl&quot;</span> <span class="attr">database</span>=<span class="string">&quot;shopping&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;dhost2&quot;</span> <span class="attr">database</span>=<span class="string">&quot;shopping&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name-</span>&quot;<span class="attr">dn3</span>&quot; <span class="attr">dataHost</span>=<span class="string">&quot;dhost3&quot;</span> <span class="attr">database</span>=<span class="string">&quot;shopping&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="4-测试">4.测试</h5>
<ul>
<li>在mycat命令行中，通过source指令导入表结构，以及对应的数据，查看数据分布情况</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /目录/文件名</span><br></pre></td></tr></table></figure>
<ul>
<li>查询用户的收件人及收件人地址信息（多表联查）</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ua.user_id, ua.contact, p.province, c.city, r.area , ua.address <span class="keyword">from</span> tb_user address ua ,tb_areas_city c, tb_areas_provinces p,tb_areas_region r <span class="keyword">where</span> ua.province_id <span class="operator">=</span> p.provinceid <span class="keyword">and</span> ua.city_id <span class="operator">=</span> c.cityid <span class="keyword">and</span> ua.town_id <span class="operator">=</span> r.areaid;</span><br></pre></td></tr></table></figure>
<ul>
<li>查询每一笔订单及订单的收件地址信息</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> order_id , payment,receiver,province,city,area <span class="keyword">FROM</span> tb_order_master o , tb_areas_provinces p , tb_areas_city c, tb_areas_region r <span class="keyword">WHERE</span> o.receiver_province <span class="operator">=</span> p.provinceid <span class="keyword">AND</span> o.receiver_city <span class="operator">=</span> c.cityid <span class="keyword">AND</span> o.receiver_region <span class="operator">=</span> r.areaid;</span><br></pre></td></tr></table></figure>
<p># 这里直接执行会报错，这是跨两库的多表联查</p>
<h5 id="5-全局表配置">5.全局表配置</h5>
<ul>
<li>对于省、市、区/县表tb_areas_provinces,tb_areas_city,tb_areas_region，是属于数据字典表，在多个业务模块中都可能会遇到，可以将其设置为全局表，利于业务操作。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_areas_provinces&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dnl,dn2,dn3&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span><span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p># 对三张表进行全局配置，查询的时候就会把这三张表路由到订单的数据库中，这样就能实现跨两库的多表联查</p>
<p># 全局表更新后关联的其他三个库中的表也会更新</p>
<h4 id="2-水平拆分">2.水平拆分</h4>
<h5 id="1-场景-2">1.场景</h5>
<ul>
<li>在业务系统中，有一张表(日志表，业务系统每天都会产生大量的日志数据，单台服务器的数据存储及处理能力是有限的，可以对数据库表进行拆分。</li>
</ul>
<h5 id="2-准备-2">2.准备</h5>
<ul>
<li>在三台MySQL中创建数据库itcast</li>
</ul>
<h5 id="3-配置-2">3.配置</h5>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;ITCAST&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;true&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_log&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn4,dn5,dn6&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;mod-long&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn4&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;dhosti&quot;</span> <span class="attr">database</span>=<span class="string">&quot;itcast&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn5&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;dhost2&quot;</span> <span class="attr">database</span>=<span class="string">&quot;itcast&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn6&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;dhost3&quot;</span> <span class="attr">database</span>=<span class="string">&quot;itcast&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p># 这里rule=&quot;mod-long&quot;将分片规则配置为取模</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;root&quot;</span> <span class="attr">defaultAccount</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>SHOPPING,ITCAST<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p># 增加访问的逻辑库</p>
<ul>
<li>创建表结构并导入数据</li>
</ul>
<h4 id="3-分片规则">3.分片规则</h4>
<h5 id="1-范围（auto-sharding-long）">1.范围（auto-sharding-long）</h5>
<ul>
<li>根据指定的字段及其配置的范围与数据节点的对应情况，来决定该数据属于哪一个分片。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name-</span>&quot;<span class="attr">tb</span> <span class="attr">operate</span>&quot; <span class="attr">dataNode-</span>&quot;<span class="attr">dn4</span>,<span class="attr">dn5</span>,<span class="attr">dn6</span>&quot; <span class="attr">rule</span>&quot;<span class="attr">auto-sharding-long</span>&quot; /&gt;</span></span><br></pre></td></tr></table></figure>
<p># 在schema.xml中通过rule来指定对应的分片规则</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;auto-sharding-long&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>id<span class="tag">&lt;<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>rang-long<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tableRule</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<p># rule&quot;auto-sharding-long&quot;分片规则引用的是rule.xml中定义的分片规则</p>
<p># &lt;columns&gt;id&lt;columns&gt;定义了根据id字段进行分片</p>
<p># &lt;algorithm&gt;rang-long&lt;/algorithm&gt;分片对应的算法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;rang-long&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.AutoPartitionByLong&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span> &gt;</span>autopartition-long.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p># &lt;algorithm&gt;rang-long&lt;/algorithm&gt;引用rule.xml中的function</p>
<p># class=&quot;io.mycat.route.function.AutoPartitionByLong&quot;这个java类中对分片规则进行定义解析</p>
<p># &lt;property name=“mapFile” &gt;autopartition-long.txt&lt;/property&gt;又引用了一个外部文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># range start-end ,data node index</span><br><span class="line"># K=1000,M=10000.</span><br><span class="line">0-500M=0</span><br><span class="line">500M-1000M=1</span><br><span class="line">1000M-1500M=2</span><br></pre></td></tr></table></figure>
<p># autopartition-long.txt这个外部文件中具体配置了范围对应的节点</p>
<h5 id="2-取模（mod-long）">2.取模（mod-long）</h5>
<ul>
<li>根据指定的字段值与节点数量进行求模运算，根据运算结果，来决定该数据属于哪一个分片。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;count&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p># 在rule.xml中配置节点数</p>
<h5 id="3-一致性hash（sharding-by-murmur）">3.一致性hash（sharding-by-murmur）</h5>
<ul>
<li>所谓一致性哈希，将字符串字段根据哈希计算，相同的哈希因子计算值总是被划分到相同的分区表中，不会因为分区节点的增加而改变原来数据的分区位置。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;count&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p># function中配置节点数</p>
<h5 id="4-枚举（sharding-by-intfile）">4.枚举（sharding-by-intfile）</h5>
<ul>
<li>通过在配置文件中配置可能的枚举值,指定数据分布到不同数据节点上,本规则适用于按照省份、性别、状态拆分数据等业务。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultNode&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p># function配置默认节点值，当插入的数据超出了指定的枚举值则默认存储到这个节点</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>partition-hash-int.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p># function中引用外部文件，在partition-hash-int.txt这个文件中直接定义例如3=1，则字段值为3时存到第2个节点，节点是从0开始的</p>
<ul>
<li>如果有不同的字段要用同一种分片规则，则可以将原本的分片规则复制黏贴，修改规则名称，修改字段，对应的算法不更改</li>
</ul>
<h5 id="5-应用指定（sharding-by-substring）">5.应用指定（sharding-by-substring）</h5>
<ul>
<li>运行阶段由应用自主决定路由到那个分片，直接根据子字符串（必须是数字，例如截取前2个数字）计算分片号。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-substring&quot;</span></span></span><br><span class="line"><span class="tag">	&lt;<span class="attr">rule</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-substring<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-substring&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionDirectBySubString&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;startIndex&quot;</span>&gt;</span>O<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;size&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionCount&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultPartition&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p># 这个分片规则不在默认的样例中，需要自行添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;startIndex&quot;</span>&gt;</span>O<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p># 在function中配置开始索引</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;size&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p># 配置截取长度</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionCount&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p># 配置分片数量</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultPartition&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p># 配置默认分片，截取出来的子字符串不在分片数量范围内则存储到默认分片</p>
<h5 id="6-固定分片hash算法（sharding-by-long-hash）">6.固定分片hash算法（sharding-by-long-hash）</h5>
<ul>
<li>
<p>该算法类似于十进制的求模运算，但是为二进制的操作，会将指定字段（值必须是数字）的二进制的前10位与1111111111进行位&amp;运算。</p>
</li>
<li>
<p>位&amp;运算：将前十位的每一位数与1111111111中的相同位置的数字进行对比，相同则为1，不同则为0，获得一个新的数字。1111111111对应的十进制数是2^10-1=1023，所以这里的位&amp;运算得出的结果位于0-1023</p>
</li>
<li>
<p>特点：</p>
<ul>
<li>如果是求模，连续的值，分别分配到各个不同的分片；但是此算法会将连续的值可能分配到相同的分片，降低事务处理的难度。</li>
<li>可以均匀分配到节点，也可以非均匀分配。</li>
<li>分片字段必须为数字类型。</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionCount&quot;</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionLength&quot;</span>&gt;</span>256,512<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p># 2,1表示共三个节点，前两个长度都是256，后一个是512（总的分片长度默认最大为1024）</p>
<p># 2,1和256,512这里配置的数字个数必须对应</p>
<h5 id="7-字符串hash解析（sharding-by-stringhash）">7.字符串hash解析（sharding-by-stringhash）</h5>
<ul>
<li>截取字符串中的指定位置的子字符串，进行哈希运算，算出哈希值与1023进行位&amp;运算，算出分片。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-stringhash&quot;</span></span></span><br><span class="line"><span class="tag">	&lt;<span class="attr">rule</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">columns</span>&gt;</span>name<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-stringhash&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByString&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionLength&quot;</span>&gt;</span>512<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;&#x27;partitionCount&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hashslice&quot;</span>&gt;</span>0:2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p># 这个分片规则也是需要自行添加的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionLength&quot;</span>&gt;</span>512<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;&#x27;partitionCount&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p># 两个节点各512长度</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hashslice&quot;</span>&gt;</span>0:2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p># hash运算位，格式start:end，start从0开始。0在end中出现代表str.length()，-1代表str.length()-1，大于0代表数字本身</p>
<h5 id="8-按（天）日期分片（sharding-by-date）">8.按（天）日期分片（sharding-by-date）</h5>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-date&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByDate&quot;</span>&gt;</span>		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dateformat&quot;</span>&gt;</span>yyyy-MM-dd<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sBecinDate&quot;</span>&gt;</span>2022-01-01<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sEndDate&quot;</span>&gt;</span>2022-01-30<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sPartionDay&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p># 需要自行配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;daterormat&quot;</span>&gt;</span>yyyy-MM-dd<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p># 日期格式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sBeginDate&quot;</span>&gt;</span>2022-01-01<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p># 起始时间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sEndDate&quot;</span>&gt;</span>2022-01-30<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p># 截止时间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sPartionDay&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p># 分片周期，每十天位一个分片，到达结束时间后，后面的日期再插入，会重复开始分片插入</p>
<p># dataNode的分片数量必须和这里的分片规则的数量一致，例如从同一年的01-01到12-31，每十天一个分片，则需要37个分片，没有则报错</p>
<h5 id="9-按自然月分片（sharding-by-month）">9.按自然月分片（sharding-by-month）</h5>
<ul>
<li>
<p>mycat中自带的分片规则</p>
</li>
<li>
<p>和按天分片一样需要配置日期格式和起始截止日期</p>
</li>
<li>
<p>一个月为一个分片，到达结束时间后，后面的日期再插入，会重复开始分片插入</p>
</li>
<li>
<p>dataNode的分片数量必须和这里的分片规则的数量一致，例如从同一年的01-01到12-31，每一个月一个分片，则需要12个分片，没有则报错</p>
</li>
</ul>
<h3 id="6-MyCat管理及监控">6.MyCat管理及监控</h3>
<h4 id="1-MyCat原理">1.MyCat原理</h4>
<ul>
<li>
<p>客户端发送插入的SQL语句到mycat</p>
</li>
<li>
<p>mycat</p>
<ul>
<li>解析SQL</li>
<li>分片分析</li>
<li>路由分析，路由到相对应的节点中</li>
<li>读写分离分析</li>
<li>…</li>
</ul>
</li>
<li>
<p>客户端发送查询的SQL语句到mycat</p>
</li>
<li>
<p>mycat</p>
<ul>
<li>解析SQL</li>
<li>分片分析，如果字段值不在规则范围内或者没有这个字段值，则接下来的路由分析会路由到所有库中</li>
<li>路由分析</li>
<li>读写分离分析</li>
<li>…</li>
</ul>
</li>
<li>
<p>分片节点</p>
<ul>
<li>接收到SQL语句</li>
<li>执行后返回结果到mycat</li>
</ul>
</li>
<li>
<p>mycat</p>
<ul>
<li>结果合并</li>
<li>聚合处理</li>
<li>排序处理</li>
<li>分页处理</li>
<li>…</li>
<li>结果返回到客户端</li>
</ul>
</li>
</ul>
<h4 id="2-MyCat管理">2.MyCat管理</h4>
<ul>
<li>
<p>Mycat默认开通2个端口，可以在server.xml中进行修改。</p>
<ul>
<li>
<p>8066数据访问端口，即进行DML和DDL操作。</p>
</li>
<li>
<p>9066数据库管理端口，即mycat服务管理控制功能，用于管理mycat的整个集群状态</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -h ip地址 -P 9066 -uroot -p密码</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>show @@help</td>
<td>查看Mycat管理工具帮助文档</td>
</tr>
<tr>
<td>show @@version</td>
<td>查看Mycat的版本</td>
</tr>
<tr>
<td>reload @@config</td>
<td>重新加载Mycat的配置文件</td>
</tr>
<tr>
<td>show @@datasouorce</td>
<td>查Mycat的数据源信息</td>
</tr>
<tr>
<td>show @@datanode</td>
<td>查看MyCat现有的分片节点信息</td>
</tr>
<tr>
<td>show @@threadpool</td>
<td>查看Mycat的线程池信息</td>
</tr>
<tr>
<td>show @@sql</td>
<td>查看执行的SQL</td>
</tr>
<tr>
<td>show @@sql.sum</td>
<td>查看执行的SQL统计</td>
</tr>
</tbody>
</table>
<h4 id="3-MyCat-eye">3.MyCat-eye</h4>
<ul>
<li>
<p>Mlycat-web(Mycat-eye)是对mycat-server提供监控服务，功能不局限于对mycat-server使用。他通过JDBC连接对Mycat、Mysal监控，监控远程服务器(目前仅限于linux系统)的cpu、内存、网络、磁盘。</p>
</li>
<li>
<p>Mycat-eye运行过程中需要依赖zookeeper，因此需要先安装zookeeper。</p>
</li>
<li>
<p>在mycat-web文件夹下</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh start.sh</span><br></pre></td></tr></table></figure>
<p># 启动mycat-web</p>
<ul>
<li>
<p>在浏览器中输入网址：服务器ip：8082/mycat进入网站（需要关闭服务器的防火墙）</p>
</li>
<li>
<p>在网站中进入mycat配置中的mycat服务配置</p>
</li>
<li>
<p>管理端口：9066</p>
</li>
<li>
<p>服务端口：8066</p>
</li>
<li>
<p>数据库名称：这里要配置mycat-server配置文件schema.xml中schema标签配置的name。</p>
</li>
<li>
<p>用户名：这里要配置mycat-server配置文件server.xml中user标签中name配置的值</p>
</li>
<li>
<p>密码：这里要配置mycat-server配置文件server.xml中user标签中，property name=&quot;password&quot;配置的密码。</p>
</li>
</ul>
<h2 id="4-读写分离">4.读写分离</h2>
<h3 id="1-介绍-4">1.介绍</h3>
<ul>
<li>读写分离,简单地说是把对数据库的读和写操作分开,以对应不同的数据库服务器。主数据库提供写操作，从数据库提供读操作，这样能有效地减轻单台数据库的压力。</li>
<li>通过MyCat即可轻易实现上述功能，不仅可以支持MySQL，也可以支持Oracle和SQL Server。</li>
</ul>
<h3 id="2-一主一从">2.一主一从</h3>
<h4 id="1-原理">1.原理</h4>
<ul>
<li>MySQL的主从复制，是基于二进制日志（binlog）实现的。</li>
</ul>
<h4 id="2-环境准备-2">2.环境准备</h4>
<ul>
<li>搭建主从结构</li>
</ul>
<h3 id="3-一主一从读写分离">3.一主一从读写分离</h3>
<h4 id="1-配置">1.配置</h4>
<ul>
<li>在schema.xml文件中配置主库writeHost host=“master” url=和从库readHost host=“slave” url=的ip地址</li>
</ul>
<p># 从库的需要自行添加</p>
<ul>
<li>
<p>还要在server.xml中的user标签中的schemas中新增逻辑库，增加权限</p>
</li>
<li>
<p>MyCat控制后台数据库的读写分离和负载均衡由schema.xml文件datahost标签的balance属性控制，将参数值修改为1或3</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>参数值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>不开启读写分离机制，所有读操作都发送到当前可用的writeHost上</td>
</tr>
<tr>
<td>1</td>
<td>全部的readHost 与备用的writeHost都参与select语句的负载均衡（主要针对于双主双从模式）</td>
</tr>
<tr>
<td>2</td>
<td>所有的读写操作都随机在writeHost，readHost上分发</td>
</tr>
<tr>
<td>3</td>
<td>所有的读请求随机分发到writeHost对应的readHost上执行,writeHost不负担读压力</td>
</tr>
</tbody>
</table>
<h4 id="2-问题">2.问题</h4>
<ul>
<li>主节点Master宕机之后,业务系统就只能够读,而不能写入数据了。</li>
</ul>
<h3 id="4-双主双从">4.双主双从</h3>
<h4 id="1-介绍-5">1.介绍</h4>
<ul>
<li>一个主机 Master1 用于处理所有写请求，它的从机 Slave1和另一台主机 Master2 还有它的从机库Slave2负责所有读请求。当Master1主机宕机后，Master2 主机负责写请求，Master1、Master2 互为备机。</li>
</ul>
<h4 id="2-环境准备-3">2.环境准备</h4>
<ul>
<li>共需要5台服务器，1台中间件，2台主库，2台从库</li>
<li>全部关闭防火墙</li>
</ul>
<h4 id="3-搭建-2">3.搭建</h4>
<h5 id="1-修改主库1的配置文件-etc-my-cnf">1.修改主库1的配置文件/etc/my.cnf</h5>
<ul>
<li><strong>server-id=1</strong></li>
</ul>
<p># mysql服务id，保证整个集群环境中唯一，取值范围：1~2^32-1，默认为1</p>
<ul>
<li><strong>binlog-do-db=数据库名</strong></li>
</ul>
<p># 指定同步的数据库,需要写三句来同步三个数据库</p>
<ul>
<li><strong>log-slave-updates</strong></li>
</ul>
<p># 在作为从库时，有写入操作也要更新二进制日志文件</p>
<h5 id="2-重启mysql服务">2.重启mysql服务</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure>
<h5 id="3-修改主库2的配置文件-etc-my-cnf">3.修改主库2的配置文件/etc/my.cnf</h5>
<ul>
<li>与主库1配置相同，只需修改id</li>
</ul>
<h5 id="4-两台主库创建账户并授权">4.两台主库创建账户并授权</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> Root@密码<span class="string">&#x27;;</span></span><br></pre></td></tr></table></figure>
<p># 创建用户，并设置密码，该用户可在任意主机连接该MySQL服务</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> REPLICATION SLAVE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p># 为用户分配主从复制权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> master status;</span><br></pre></td></tr></table></figure>
<p># 通过指令查看两台主库的二进制日志坐标</p>
<h5 id="5-修改从库1配置文件-etc-my-cnf">5.修改从库1配置文件/etc/my.cnf</h5>
<ul>
<li><strong>server-id=2</strong></li>
</ul>
<p># mysql服务id，保证整个集群环境中唯一，取值范围：1~2^32-1</p>
<h5 id="6-重启mysql服务">6.重启mysql服务</h5>
<h5 id="7-修改从库2配置文件-etc-my-cnf">7.修改从库2配置文件/etc/my.cnf</h5>
<p># 修改id</p>
<h5 id="8-从库1配置关联的主库1">8.从库1配置关联的主库1</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CHANGE MASTER <span class="keyword">TO</span> MASTER_HOST<span class="operator">=</span><span class="string">&#x27;对应主库ip&#x27;</span>,MASTER_USER<span class="operator">=</span><span class="string">&#x27;用户名&#x27;</span>,MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;密码&#x27;</span>,MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;二进制日志文件名&#x27;</span>,MASTER_LOG_POS<span class="operator">=</span>日志中开始的位置；</span><br></pre></td></tr></table></figure>
<p># 需要注意slave1对应的是master1，slave2对应的是master2。</p>
<h5 id="9-启动从库主从复制，查看从库状态">9.启动从库主从复制，查看从库状态</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">start</span> slave;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> slave status;</span><br></pre></td></tr></table></figure>
<h5 id="10-从库2配置关联的主库2">10.从库2配置关联的主库2</h5>
<ul>
<li>与从库1配置关联的主库1相同</li>
</ul>
<h5 id="11-主库之间的相互复制">11.主库之间的相互复制</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CHANGE MASTER <span class="keyword">TO</span> MASTER_HOST<span class="operator">=</span><span class="string">&#x27;另一个主库ip&#x27;</span>,MASTER_USER<span class="operator">=</span><span class="string">&#x27;用户名&#x27;</span>,MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;密码&#x27;</span>,MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;二进制日志文件名&#x27;</span>,MASTER_LOG_POS<span class="operator">=</span>日志中开始的位置；</span><br></pre></td></tr></table></figure>
<p># 在两台主库中都要执行指令</p>
<h5 id="12-启动从库主从复制，查看从库状态">12.启动从库主从复制，查看从库状态</h5>
<h3 id="5-双主双从读写分离">5.双主双从读写分离</h3>
<ul>
<li>在schema.xml文件中配置主库writeHost host=“master” url=和从库readHost host=“slave” url=的ip地址</li>
</ul>
<p># 两个主库从库都要配置，从库分别配置在对应主库下</p>
<ul>
<li>修改balance的数值为1</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;dhost7&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;1&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1 dbType=&quot;</span><span class="attr">mysql</span>&quot; <span class="attr">dbDriver</span>=<span class="string">&quot;jdbc&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p># 新增writeType和switchType</p>
<ul>
<li>
<p>writeType</p>
<ul>
<li>0：写操作都转发到第1台writeHost, writeHost1挂了，会切换到writeHost2上；</li>
<li>1：所有的写操作都随机地发送到配置的writeHost上；</li>
</ul>
</li>
<li>
<p>switchType</p>
<ul>
<li>-1：不自动切换</li>
<li>1：自动切换</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2025/02/08/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>MySQL进阶</title>
    <url>/2025/08/27/MySQL%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1>MySQL进阶</h1>
<h2 id="1-储存引擎">1.储存引擎</h2>
<h3 id="1-MySQL体系结构">1.MySQL体系结构</h3>
<ul>
<li>
<p>客户端连接器：PHP,Python，Java的JDBC等</p>
</li>
<li>
<p>MySQL服务端：</p>
</li>
<li>
<p>连接层：</p>
<ul>
<li>连接池，用于接收客户端的连接，完成连接的处理，认证授权（校验用户名密码），校验每个客户端的权限，相关安全方案，检查是否超过最大连接数</li>
</ul>
</li>
<li>
<p>服务层：SQL接口，完成缓存的查询，SQL的分析和优化，部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如过程，函数等</p>
<ul>
<li>SQL接口</li>
<li>解析器</li>
<li>查询优化器</li>
<li>缓存</li>
</ul>
</li>
<li>
<p>引擎层：复杂数据的存储和提取，服务器通过API和存储引擎进行通信。其中含有多个可选择的引擎，不同的存储引擎有不同功能，也可以在此基础上扩展。</p>
<ul>
<li>可插拔存储引擎
<ul>
<li>InnoDB（MySQL5.5后的默认引擎）</li>
<li>NDB</li>
<li>MyISAM</li>
<li>…</li>
</ul>
</li>
</ul>
</li>
<li>
<p>存储层：主要将数据存储在文件系统之上，并完成与存储引擎的交互</p>
<ul>
<li>系统文件</li>
<li>文件和日志</li>
</ul>
</li>
</ul>
<h3 id="2-储存引擎简介">2.储存引擎简介</h3>
<ul>
<li>存储数据，建立索引，查询/更新数据等技术的实现方式。</li>
<li>存储引擎是基于表的，而不是基于库的，所以存储引擎也可以称为表类型</li>
</ul>
<h4 id="1-查询表的存储引擎">1.查询表的存储引擎</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create table</span> 表名；</span><br></pre></td></tr></table></figure>
<ul>
<li>用查询建表语句查询</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> `user1` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `status` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">  `gender` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `id_for_connent` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `name` (`name`),</span><br><span class="line">  KEY `fk_user1_name_dept_id` (`id_for_connent`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `fk_user1_name_dept_id` <span class="keyword">FOREIGN KEY</span> (`id_for_connent`) <span class="keyword">REFERENCES</span> `dept` (`id`) <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE <span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE,</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `user1_chk_1` <span class="keyword">CHECK</span> (((`age` <span class="operator">&gt;</span> <span class="number">0</span>) <span class="keyword">and</span> (`age` <span class="operator">&lt;=</span> <span class="number">120</span>)))</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">4</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci COMMENT<span class="operator">=</span><span class="string">&#x27;用于学习约束的用户表&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>其中查询出的<strong>ENGINE=InnoDB</strong> 就是存储引擎，InnoDB为默认引擎</p>
</li>
<li>
<p><strong>AUTO_INCREMENT=4</strong> 代表id是自增的</p>
</li>
<li>
<p><strong>DEFAULT CHARSET=utf8mb4</strong> 即当前表的默认字符集是utf8mb4</p>
</li>
<li>
<p><strong>COLLATE=utf8mb4_0900_ai_ci</strong> 即排序方式</p>
</li>
</ul>
<h4 id="2-创建表时指定存储引擎">2.创建表时指定存储引擎</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> tables 表名(</span><br><span class="line"></span><br><span class="line">	字段<span class="number">1</span> 字段<span class="number">1</span>的类型（comment 字段<span class="number">1</span>的注释）,      #注意逗号</span><br><span class="line"></span><br><span class="line">	字段<span class="number">2</span> 字段<span class="number">2</span>的类型（comment 字段<span class="number">2</span>的注释）,</span><br><span class="line"></span><br><span class="line">	........</span><br><span class="line"></span><br><span class="line">) engine<span class="operator">=</span>innodb（comment 表注释）；</span><br></pre></td></tr></table></figure>
<h4 id="3-查看当前数据库支持的存储引擎">3.查看当前数据库支持的存储引擎</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> engine；</span><br></pre></td></tr></table></figure>
<ul>
<li>查询后显示</li>
</ul>
<p>engine（引擎名称）       support（是否支持）        comment（描述）       transactions       XA       savepoints</p>
<h3 id="3-储存引擎特点">3.储存引擎特点</h3>
<h4 id="1-InnoDB">1.InnoDB</h4>
<ul>
<li>
<p>InnoDB是一种兼顾高可靠性和高性能的通用存储引擎</p>
</li>
<li>
<p>特点：</p>
<ul>
<li>DML（数据的增删改）操作遵循ACID模型（事务的四大特性），支持<strong>事务</strong></li>
<li><strong>行级锁</strong> ，提高并发访问性能</li>
<li>支持<strong>外键</strong> foreign key约束，保证数据的完整性和正确性</li>
</ul>
</li>
<li>
<p>文件：</p>
<ul>
<li>
<p>xxx.ibd:xxx代表的是表名，innodb引擎的每一张表都会对应这样一个表空间文件，储存该表的表结构（frm，sdi），数据和索引</p>
</li>
<li>
<p>#文件不能直接打开，可以在文件夹中打开cmd，<strong>ibd2sdi xxx.idb</strong> 会返回一长串json</p>
</li>
<li>
<p>参数：innodb_file_per_table</p>
</li>
<li>
<p>#可以用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> varialbes <span class="keyword">like</span>‘innodb_file_per_table’;</span><br></pre></td></tr></table></figure>
<p>查看是否打开，打开则表示每张表对应一个表空间文件</p>
</li>
</ul>
</li>
<li>
<p>逻辑存储结构</p>
<ul>
<li>tablespace：表空间，其中包含多个segment
<ul>
<li>segment：段，其中包含多个extent
<ul>
<li>extent：区（大小固定，每个区1M），其中包含多个page（可以包含64个页）
<ul>
<li>page：页（大小固定，每个页16K，页也是磁盘操作的最小单元），其中包含多个row
<ul>
<li>row：行，其中包含最后一次操作事务的id，指针，字段</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="2-MyISAM">2.MyISAM</h4>
<ul>
<li>
<p>MyISAM是MySQL早期的默认存储引擎</p>
</li>
<li>
<p>特点：</p>
<ul>
<li>不支持事务，不支持外键</li>
<li>支持表锁，不支持行锁</li>
<li>访问速度快</li>
</ul>
</li>
<li>
<p>文件：</p>
<ul>
<li>xxx.MYD：存储数据</li>
<li>xxx.MYI：存储索引</li>
<li>xxx.sdi：存储表结构信息，打开是文本形式的json，json格式化后查看</li>
</ul>
</li>
</ul>
<h4 id="3-Memory">3.Memory</h4>
<ul>
<li>
<p>Memory引擎的表数据是存储在内存中的，由于受到硬件问题，或断电问题的影响，只能将这些表作为临时表或缓存使用</p>
</li>
<li>
<p>特点：</p>
<ul>
<li>内存存放（所以访问速度快）</li>
<li>hash索引（默认）</li>
</ul>
</li>
<li>
<p>xxx.sdi：存储表结构信息</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>特点</th>
<th>InnoDB</th>
<th>MyISAM</th>
<th>Memory</th>
</tr>
</thead>
<tbody>
<tr>
<td>存储限制</td>
<td>64TB</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td>事务安全</td>
<td>支持</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>锁机制</td>
<td>行锁</td>
<td>表锁</td>
<td>表锁</td>
</tr>
<tr>
<td>B+tree索引</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>Hash索引</td>
<td>—</td>
<td>—支持</td>
<td></td>
</tr>
<tr>
<td>全文索引</td>
<td>支持（5.6后）</td>
<td>支持</td>
<td>—</td>
</tr>
<tr>
<td>空间使用</td>
<td>高</td>
<td>低</td>
<td>N/A</td>
</tr>
<tr>
<td>内存使用</td>
<td>高</td>
<td>低</td>
<td>中等</td>
</tr>
<tr>
<td>批量插入速度</td>
<td>低</td>
<td>高</td>
<td>高</td>
</tr>
<tr>
<td>支持外键</td>
<td>支持</td>
<td>—</td>
<td>—</td>
</tr>
</tbody>
</table>
<h3 id="4-储存引擎选择">4.储存引擎选择</h3>
<ul>
<li>应根据应用系统的特点选择合适的存储引擎，对于复杂的应用系统，可以根据实际情况选择多种存储引擎
<ul>
<li>InnoDB：是MySQL的默认存储引擎，支持事务，外键。如果应用对事务的完整性有较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新，删除操作，那么InnoDB存储引擎是比较合适的选择</li>
<li>MyISAM：如果应用是以读写操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性，并发性要求不是很高，那么MyISAM是合适的选择</li>
<li>Memory：将所有数据保存在内存种，访问速度快，通常用于临时表及缓存。Memory的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性</li>
</ul>
</li>
</ul>
<h2 id="2-索引">2.索引</h2>
<h3 id="1-索引概述">1.索引概述</h3>
<ul>
<li>索引（index）：帮助MySQL<strong>高效获取数据</strong> 的<strong>数据结构（有序）</strong> 。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据上实现高级查找算法，这种数据结构就是索引。</li>
</ul>
<p># 无索引时，例如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">40</span>；</span><br></pre></td></tr></table></figure>
<p>会与每一条数据匹配，称为全表扫描，性能极低</p>
<ul>
<li>
<p>优点：</p>
<ul>
<li>提高数据检索的效率，降低数据的IO成本</li>
<li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</li>
</ul>
</li>
<li>
<p>缺点（影响较小）</p>
<ul>
<li>索引列也要占用空间</li>
<li>索引提高了查询效率，但同时也降低更新表的速度，如对表进行insert，update，delete时效率降低</li>
</ul>
</li>
</ul>
<h3 id="2-索引结构">2.索引结构</h3>
<ul>
<li>MySQL的索引是在存储引擎层实现的，不同的存储引擎有不同的索引结构</li>
</ul>
<table>
<thead>
<tr>
<th>索引结构</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>B+Tree索引</td>
<td>最常见的索引类型，大部分引擎都支持B+树索引</td>
</tr>
<tr>
<td>Hash索引</td>
<td>底层数据结构是用哈希表实现的，只有精确匹配索引列查询才有效，不支持范围查询</td>
</tr>
<tr>
<td>R-tree(空间索引)</td>
<td>空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间的数据类型，使用较少</td>
</tr>
<tr>
<td>Full-text(全文索引)</td>
<td>是一种通过建立倒排索引，快速匹配文档的方式。类似于Lucene，Solr，ES</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>索引</th>
<th>InnoDB</th>
<th>MyISAM</th>
<th>Memory</th>
</tr>
</thead>
<tbody>
<tr>
<td>B+Tree索引</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>Hash索引</td>
<td>不支持</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>R-tree索引</td>
<td>不支持</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>Full-text索引</td>
<td>5.6后支持</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody>
</table>
<h4 id="1-二叉树">1.二叉树</h4>
<ul>
<li>
<p>树状图，但是每个节点下最多只有两个分叉</p>
</li>
<li>
<p>缺点：</p>
<ul>
<li>1.极端情况如顺序插入时，会形成一个链表（即斜树，只有左子树或者只有右子树），查询性能大大降低。</li>
<li>2.大数据量情况下，层级较深，检索速度慢</li>
</ul>
</li>
<li>
<p>红黑数只能解决第一个缺点</p>
</li>
</ul>
<h4 id="2-B-Tree（多路平衡查找树）">2.B-Tree（多路平衡查找树）</h4>
<ul>
<li>同样是树状图，但是可以有多个节点，一个节点的子节点个数称为度数（max-degree），每个节点可以存储（度数-1）个key，度数个指针</li>
<li>当插入超过（度数-1）个key时，中间元素则向上裂变，例如数字：23，56，28，49，如果再插入一个数字59，则中间元素49向上裂变，（23，28），（56，59）成为49的两个子节点</li>
</ul>
<h4 id="3-B-Tree">3.B+Tree</h4>
<ul>
<li>与B树类似，但是所有元素都会出现在叶子节点，上面的非叶子节点主要起到索引的作用，叶子节点则存放数据。同时叶子节点形成一个单向链表，每个节点通过指针指向下一个元素</li>
<li>在MySQL中对B+Tree进行了优化，增加了一个指向相邻页子节点的链表指针，形成带有顺序指针的B+Tree，提高区间访问的性能</li>
<li>其中的键值，数据，指针，都是存放在页</li>
</ul>
<p># 假设一行数据大小为1k，那高度为2时可以存储18736字节的数据，高度为3时可以存储21939856字节的数据</p>
<h4 id="4-Hash">4.Hash</h4>
<ul>
<li>
<p>哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中</p>
</li>
<li>
<p>如果两个或多个键值，映射到同一个槽位上，就产生了hash冲突（hash碰撞），可以通过链表解决</p>
</li>
<li>
<p>特点</p>
<ul>
<li>1.Hash索引只能用于对等比较（=，in），不支持范围查询（between，&gt;,&lt;,…）</li>
<li>2.无法利用索引完成排序操作</li>
<li>3.查询效率高，通常（不出现hash碰撞）只需要一次检索就可以，效率通常要高于B+tree索引</li>
</ul>
</li>
<li>
<p>存储引擎支持</p>
<ul>
<li>MySQL中，支持hash索引的是Memory引擎，而InnoDB中具有自适应hash功能，hash索引是存储引擎根据B+Tree索引在指定条件下自动构建的</li>
</ul>
</li>
</ul>
<h4 id="5-思考">5.思考</h4>
<ul>
<li>为什么InnoDB存储引擎用B+Tree索引结构
<ul>
<li>相对于二叉树，层级少，搜素效率高</li>
<li>对于B-tree，无论叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li>
<li>相对Hash索引，B+tree支持范围匹配及排序操作</li>
</ul>
</li>
</ul>
<h3 id="3-索引分类">3.索引分类</h3>
<table>
<thead>
<tr>
<th>分类</th>
<th>含义</th>
<th>特点</th>
<th>关键字</th>
</tr>
</thead>
<tbody>
<tr>
<td>主键索引</td>
<td>针对于表中主键创建的索引</td>
<td>默认自动创建，只能有一个</td>
<td>primary</td>
</tr>
<tr>
<td>唯一索引</td>
<td>避免同一个表中某数据列中的值重复</td>
<td>可以有多个</td>
<td>unique</td>
</tr>
<tr>
<td>常规索引</td>
<td>定位特定数据</td>
<td>可以有多个</td>
<td></td>
</tr>
<tr>
<td>全文索引</td>
<td>查找的是文本中的关键词，而不是比较索引中的值</td>
<td>可以有多个</td>
<td>fulltext</td>
</tr>
</tbody>
</table>
<ul>
<li>在InnoDB中根据索引的存储形式，又分为两种</li>
</ul>
<table>
<thead>
<tr>
<th>分类</th>
<th>含义</th>
<th>特点</th>
</tr>
</thead>
<tbody>
<tr>
<td>聚焦索引</td>
<td>将数据存储与索引放在一块，索引结构的叶子节点保存了行数据</td>
<td>必须有，且只有一个</td>
</tr>
<tr>
<td># 叶子节点下对应的是主键和这一行的行数据</td>
<td></td>
<td></td>
</tr>
<tr>
<td>二级索引</td>
<td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td>
<td>可以存在多个</td>
</tr>
<tr>
<td># 叶子节点下对应的是索引对应字段和字段对应的主键</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>两个索引都是B+tree索引</p>
</li>
<li>
<p>例如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;arm&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>这时候就会先根据name这个字段的二级索引查找对应name下面对应的主键，再根据主键去主键的聚焦索引查找对应主键下面的行数据。这个过程称为<strong>回表查询</strong></p>
</li>
<li>
<p>所以根据主键查询的效率要更高</p>
</li>
<li>
<p>聚焦索引选取规则</p>
<ul>
<li>如果存在主键，主键索引就是聚焦索引</li>
<li>如果不存在主键，将使用第一个唯一索引作为聚焦索引</li>
<li>如果以上都没有则自动生成一个rowid作为隐藏的聚焦索引</li>
</ul>
</li>
</ul>
<h3 id="4-索引语法">4.索引语法</h3>
<p>1.创建索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span><span class="operator">/</span>fulltext index 索引名称 <span class="keyword">on</span> 表名(表中字段名<span class="number">1</span>,.....);</span><br></pre></td></tr></table></figure>
<p># 如果省略unique或者fulltext则创建一个常规索引</p>
<p># 关联一个字段则为单列索引，多个则为联合索引（联合索引）</p>
<p># 索引名称规范一般为<strong>idx_表名_字段名</strong></p>
<p>2.查看索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> 表名\G；</span><br></pre></td></tr></table></figure>
<p># 不加G显示出来的是表格，但是内容过多会导致表格变形，加上G可以使其每行显示一条</p>
<p>3.删除索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> index 索引名称 <span class="keyword">on</span> 表名；</span><br></pre></td></tr></table></figure>
<h3 id="5-SQL性能分析">5.SQL性能分析</h3>
<h4 id="1-SQL执行频率">1.SQL执行频率</h4>
<ul>
<li>MySQL中通过<strong>show session/global status</strong> 可以提供服务器状态信息。</li>
</ul>
<p># session和global分别为当前会话和全局</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> status <span class="keyword">like</span> ’Com_____________<span class="string">&#x27;;</span></span><br></pre></td></tr></table></figure>
<p># Com后面有几个下划线则为模糊匹配几个字符，可以查看当前数据库的insert，update，delete，select的访问频次</p>
<h4 id="2-慢查询日志">2.慢查询日志</h4>
<ul>
<li>
<p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。MySQL的慢查询日志默认不开启，需要在MySQL的配置文件（/etc/my.cnf）中配置</p>
</li>
<li>
<p><strong>slow_query_log=1</strong> 在配置文件中配置开启</p>
</li>
<li>
<p><strong>long_query_time=2</strong> 设置慢查询日志的时间为2秒</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> ‘slow_query_log<span class="string">&#x27;；</span></span><br></pre></td></tr></table></figure>
<p>查询慢查询日志是否打开</p>
<ul>
<li>日志存放在**/var/lib/mysql** 中会有一个以**-slow.log** 结尾的文件</li>
</ul>
<p># 日志中会记录：哪一个用户通过哪一个主机连接,执行用了多少时间，锁了多少行，返回了多少条记录，用的哪一个数据库，执行的时间，执行的语句</p>
<ul>
<li><strong>tail  -f  文件名</strong> 在Linux中这个指令可以查看文件实时输出的内容</li>
</ul>
<h4 id="3-profile详情">3.profile详情</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@have_profiling</span>；</span><br></pre></td></tr></table></figure>
<p># 通过have_profiling参数，能够看到当前MySQL是否支持profile操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@profiling</span>；</span><br></pre></td></tr></table></figure>
<p># 查看返回数字，是否开启</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> profiling<span class="operator">=</span><span class="number">1</span>；</span><br></pre></td></tr></table></figure>
<p># 默认profiling是关闭的，可以选择在session/global级别开启</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> profiles；</span><br></pre></td></tr></table></figure>
<p>#查看每一条SQL的耗时基本情况</p>
<p># 会显示query_id，duration，query</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> profile <span class="keyword">for</span> query 指定query_id；</span><br></pre></td></tr></table></figure>
<p># 查看指定query_id的SQL语句各阶段的耗时情况</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> profile cpu <span class="keyword">for</span> query 指定query_id；</span><br></pre></td></tr></table></figure>
<p># 查看指定query_id的SQL语句cpu的使用情况</p>
<h4 id="4-explain执行计划">4.explain执行计划</h4>
<ul>
<li>explain或者desc命令获取MySQL如何执行select语句的信息，包括select语句执行过程中表如何连接和连接的顺序</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件；</span><br></pre></td></tr></table></figure>
<p># 直接在select语句前加关键字explain/desc</p>
<p># 会显示id，select_type（查询类型）,table（使用的表），partitions（分区），type（连接的类型），possible_keys（可能用到的索引），key（实际用到的索引），key_len（索引长度），rows（扫描记录数），ref，filtered，extra</p>
<ul>
<li>
<p>explain执行计划各字段含义</p>
<ul>
<li>
<p>id</p>
<ul>
<li>
<p>select查询的序列号，表示查询中执行select子句或者是操作表的顺序（id相同，执行顺序从上到下；id不同，则值越大的先执行）</p>
<p># 多表查询会出现多条记录，会有多个id</p>
</li>
</ul>
</li>
<li>
<p>select_type</p>
<ul>
<li>表示select的类型，常见有simple（简单表，即不使用表连接或者子查询），primary（主查询，即外层的查询），union（union中的第二个或者后面的查询语句），subquery（select/where之后包含了子查询）等</li>
</ul>
</li>
<li>
<p>type</p>
<ul>
<li>表示连接（访问）类型，性能由好到坏为，null（基本不会出现，除非不访问表），system（访问系统表），const（根据主键和唯一索引访问），eq_ref（联表查询中根据主键和唯一索引访问）,ref（根据非唯一性的索引访问）,range,index（遍历整个索引）,all（全表扫描）</li>
</ul>
</li>
<li>
<p>possible_keys</p>
<ul>
<li>表可能会用到的索引，会有一个或多个</li>
</ul>
</li>
<li>
<p>key</p>
<ul>
<li>实际使用的索引，没有使用索引则为null</li>
</ul>
</li>
<li>
<p>key_len</p>
<ul>
<li>表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好</li>
</ul>
</li>
<li>
<p>rows</p>
<ul>
<li>MySQL认为必须要执行查询的行数，在innodb引擎的表中，是估计值</li>
</ul>
</li>
<li>
<p>filtered</p>
<ul>
<li>表示返回结果的行数占需要读取行数的百分比，值越大越好</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="6-索引使用">6.索引使用</h3>
<h4 id="1-验证索引效率">1.验证索引效率</h4>
<ul>
<li>在未建立索引之前，执行SQL语句查看SQL耗时</li>
<li>针对字段创建索引后再执行相同的SQL语句，再次查看SQL耗时</li>
</ul>
<h4 id="2-使用原则">2.使用原则</h4>
<h5 id="1-最左前缀法则">1.最左前缀法则</h5>
<ul>
<li>
<p>最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列，如果跳过某一列，<strong>索引将部分失效，则此列后面的字段失效</strong></p>
</li>
<li>
<p>如果索引了多列（即联合索引），要遵守最左前缀法则</p>
</li>
</ul>
<p># 例如建立联合索引按顺序关联name，age，status三个字段，在使用联合查询的时候，</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> ......;</span><br></pre></td></tr></table></figure>
<p>​    要遵守最左前缀法则，则where后面必须存在name=（位置不限），否则不会根据索引查询，</p>
<p>​    在查询时用and连接字段，如果跳过了age字段，则name根据索引查询，status则不会</p>
<h5 id="2-范围查询">2.范围查询</h5>
<ul>
<li>联合索引中，出现范围查询（&gt;,&lt;)，<strong>范围查询右侧的列索引失效</strong></li>
</ul>
<p># 同样是上面的例子，如果查询的时候where后面age&gt;30，则其右侧即status失效（age仍然根据索引查询）</p>
<p># 在允许的情况下用&gt;=和&lt;=可以规避这个问题</p>
<h5 id="3-索引列运算">3.索引列运算</h5>
<ul>
<li>不要在索引列上进行运算操作，<strong>索引将失效</strong></li>
</ul>
<p># 例如建立了关于phone这个字段的索引，</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> phone<span class="operator">=</span>‘号码’；</span><br></pre></td></tr></table></figure>
<p>这样查询是可以根据索引查询的</p>
<p>如果使用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> substring（phone，<span class="number">10</span>，<span class="number">2</span>）<span class="operator">=</span>‘<span class="number">12</span>’；</span><br></pre></td></tr></table></figure>
<p>即用了substring函数进行了运算</p>
<p>则进行的是全表扫描，不会根据索引查询</p>
<p># 最左前缀法则中中间字段进行了运算会导致此字段和其后的字段索引失效</p>
<h5 id="4-字符串不加引号">4.字符串不加引号</h5>
<ul>
<li>字符串类型字段使用时，不叫引号，<strong>索引将失效</strong> ，根本原因是对其进行了隐式类型转换，字符串转为数字，而索引存储的是原字符串</li>
</ul>
<p># possibilities_keys为字段相关的索引，但是实际索引key为null</p>
<p># 在最左前缀法则中，如果中间字段没有加引号，<strong>则此字段以及后面的索引全部失效</strong></p>
<h5 id="5-模糊查询">5.模糊查询</h5>
<ul>
<li>如果仅仅是尾部查询模糊匹配（abc%），索引不会失效。但是只要头部模糊匹配（%abc），索引就失效</li>
</ul>
<p># 同样在最左前缀法则中尾部模糊查询会导致当前索引可以使用，其后索引失效。</p>
<p># 只要有头部模糊就会导致，此字段索引及其后索引失效</p>
<h5 id="6-or连接的条件">6.or连接的条件</h5>
<ul>
<li>用or分割开的条件，任一条件中列没有索引，那么前后索引都不会被用到</li>
</ul>
<p># 只要有条件中的字段是联合索引里的中间字段且没有单独索引则失效，如果只是最左索引则可以使用</p>
<p># 会有可能索引，但实际索引key为null</p>
<p># 如果要查询字段是联合索引里的中间字段则需要创建单独索引</p>
<h5 id="7-数据分布影响">7.数据分布影响</h5>
<ul>
<li>如果MySQL评估使用索引比全表更慢，则不使用索引</li>
</ul>
<p># 主要取决于数据的分布，如果条件筛选出来的是小部分数据则会使用索引，反之不使用</p>
<h5 id="8-SQL提示">8.SQL提示</h5>
<ul>
<li>在SQL语句中加入一些提示来达到优化操作的目的</li>
</ul>
<h6 id="1-use-index：建议MySQL使用某个索引，实际使用的索引根据MySQL的判断">1.use index：建议MySQL使用某个索引，实际使用的索引根据MySQL的判断</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 use index（索引名）<span class="keyword">where</span> ......；</span><br></pre></td></tr></table></figure>
<p># 可以用explain查看最终使用了哪个索引</p>
<h6 id="2-ignore-index：不使用某个索引">2.ignore index：不使用某个索引</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 ignore index（索引名）<span class="keyword">where</span> ........;</span><br></pre></td></tr></table></figure>
<h6 id="3-force-index：强制使用某个索引">3.force index：强制使用某个索引</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 force index（索引名）<span class="keyword">where</span> .........；</span><br></pre></td></tr></table></figure>
<h5 id="9-覆盖索引">9.覆盖索引</h5>
<ul>
<li>尽量使用覆盖索引（查询使用了索引，并且需要返回的列在该索引中已经全部能够找到），减少select*出现</li>
</ul>
<p># 例如建立了关联了phone，age，name的联合索引，select id，phone，age，name后面条件包含三个字段</p>
<p>​	根据二级索引，主键id也包含在内，四个字段都在使用的索引中，这时候用explain查询，extra信息会显示</p>
<p>​	using where；using index：查找使用了索引，但是需要的数据都在索引列中能找到，使用不需要回表查询</p>
<p>​	如果再查询status，这个字段不包含在使用到的索引中，则extra信息会显示</p>
<p>​	using index condition：查找使用了索引，但是需要回表查询数据</p>
<p>​	如果要查询则再建立phone，age，name，status的联合索引，以提高效率，单独再建一个status的单列索引仍然会回表查询</p>
<h5 id="10-前缀索引">10.前缀索引</h5>
<ul>
<li>
<p>当字段类型为字符串（varchar，text等）使，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘io，影响查询效率。此时可以只将字符串的一部分前缀建立索引，这样可以对的节约索引空间，从而提高索引效率</p>
</li>
<li>
<p>语法：</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> index 索引名称 <span class="keyword">on</span> 表名（字段名（n））；</span><br></pre></td></tr></table></figure>
<p># n表示要提取这个字段的前面n个字符来构建索引</p>
<ul>
<li>前缀长度</li>
<li>可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的</li>
<li>计算公式：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> count（<span class="keyword">distinct</span> 字段名）<span class="operator">/</span>count（\<span class="operator">*</span>） <span class="keyword">from</span> 表名；</span><br></pre></td></tr></table></figure>
<p># distinct用于去除重复记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> count（<span class="keyword">distinct</span> substring（字段名，起始位置，截取长度））<span class="operator">/</span>count（\<span class="operator">*</span>） <span class="keyword">from</span> 表名；</span><br></pre></td></tr></table></figure>
<p># substring用于截取，起始位置从1开始</p>
<ul>
<li>前缀索引查询流程</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> email<span class="operator">=</span>‘完整的邮箱’；</span><br></pre></td></tr></table></figure>
<p># 先根据完整邮箱的前n位到创建的邮箱的前n位的二级索引中查找得到对应主键，再到聚合索引中找到对应主键的行数据，再将行数据中的email与要查询的完整邮箱比对，完全一致则返回数据。如果出现前n位相同，则将几个主键都拿到聚合索引中查询，最终一致的再返回出来</p>
<h5 id="11-单列索引与联合索引">11.单列索引与联合索引</h5>
<ul>
<li>如果存在多个查询条件，考虑针对于查询字段建立索引，建议建立联合索引，而非单列索引</li>
</ul>
<p># 在使用时，即使创建了联合索引，MySQL可能仍会使用单列索引，会回表查询，可以使用SQL提示</p>
<ul>
<li>联合索引情况：</li>
<li>仍然是B+tree，每个节点存储的键值是几个索引的组合情况</li>
</ul>
<p># 例如将phone，name，age按顺序关联成联合索引，则每个键值的形式都是phone+name+age，根据phone来排序，phone一致则再根据name来排序，以此类推。同时phone就作为最左列</p>
<h3 id="7-索引设计原则">7.索引设计原则</h3>
<p>1.针对于数据量较大（数据量超过100万左右），且查询比较频繁的表建立索引。</p>
<p>2.针对于常作为查询条件(where)、排序(order by)、分组(group by)操作的字段建立索引。</p>
<p>3.尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高。</p>
<p>4.如果是字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引。</p>
<p>5.尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率。</p>
<p>6.要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率。</p>
<p>7.如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询。</p>
<h2 id="3-SQL优化">3.SQL优化</h2>
<h3 id="1-插入数据">1.插入数据</h3>
<h4 id="1-insert优化">1.insert优化</h4>
<h5 id="1-批量插入">1.批量插入</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert into</span> 表名 <span class="keyword">values</span>（），（），（），.....；</span><br></pre></td></tr></table></figure>
<p># 因为每一次insert插入都会与数据库进行建立连接和网络传输，所以将多个insert合并为一个</p>
<p># 插入数据量在500-1000较为合适</p>
<h5 id="2-手动提交事务">2.手动提交事务</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction；</span><br><span class="line"></span><br><span class="line">insert......;</span><br><span class="line"></span><br><span class="line">insert......;</span><br><span class="line"></span><br><span class="line">insert......;</span><br><span class="line"></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="3-主键顺序插入">3.主键顺序插入</h5>
<ul>
<li>主键乱序插入</li>
<li>主键顺序插入</li>
</ul>
<p># 顺序插入的性能高于乱序插入，与MySQL的数据组织结构有关</p>
<h4 id="2-大批量插入数据">2.大批量插入数据</h4>
<ul>
<li>
<p>如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令进行插入</p>
</li>
<li>
<p>客户端连接服务端时，加上参数  --local-infile  用于加载本地文件</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql --local-infile -u root -p</span><br></pre></td></tr></table></figure>
<ul>
<li>设置全局参数local_infile为1，开启从本地加载文件导入数据的开关</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> local_infile<span class="operator">=</span><span class="number">1</span>；</span><br></pre></td></tr></table></figure>
<p># 可以再用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@local_infile</span>；</span><br></pre></td></tr></table></figure>
<p>查看值为多少，是否开启</p>
<ul>
<li>执行load指令将准备好的数据，加载到表结构中</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">load data <span class="keyword">local</span> infile ‘<span class="operator">/</span>root<span class="operator">/</span>文件名’ <span class="keyword">into</span> ‘表名’ fields terminated <span class="keyword">by</span>  ‘，’ lines terminated <span class="keyword">by</span> ‘\n<span class="string">&#x27;;</span></span><br></pre></td></tr></table></figure>
<p># ‘，’表示指定用，分割每个字段，‘\n’表示指定用\n分割每一行数据</p>
<p># 需要先将文件上传到服务器中</p>
<p># 同样要按照主键顺序插入</p>
<h3 id="2-主键优化">2.主键优化</h3>
<h4 id="1-数据组织方式">1.数据组织方式</h4>
<ul>
<li>
<p>在innodb存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表（iot）</p>
</li>
<li>
<p>页分裂</p>
</li>
<li>
<p>页可以为空，也可以填充一半，或者全部填充，每个页至少包含2行数据（如果某一行数据过大，会行溢出），根据主键排列</p>
</li>
<li>
<p>主键顺序插入：当第一个页填充满了，数据会在第二个页继续填充，同时会在一二页中维护一个双向指针</p>
</li>
<li>
<p>主键乱序插入：例如第一个页中有值为1 5 9 23 47，第二个页中有值为55 67 89 101 107，且这两页已经填充满，此时插入一个值为50的行数据，那么会先生成一个新的数据页，再找到第一个页的50%的位置，即1 5 9和23 47，则先将23 47移动到生成的第三个页，再将50插入到第三个页，那么原本的链表指针是一二之间的，则重新设置一三间的双向指针和三二之间的双向指针，此现象被称为页分裂</p>
</li>
<li>
<p>页合并</p>
</li>
<li>
<p>当删除一行数据时，并没有真正的删除，只是数据被标记为删除并且它的空间允许被其他数据声明使用</p>
</li>
<li>
<p>当页中删除的数据达到merge_threshold（合并页的阈值，默认为页的50%，可以自己设置，在创建表或者创建索引时指定），innodb会开始寻找最近的页查看是否可以将两个页合并以优化空间使用</p>
</li>
</ul>
<h4 id="2-主键设计原则">2.主键设计原则</h4>
<ul>
<li>
<p>满足业务需求的情况下，尽可能降低主键的长度，过长会占用空间，耗费大量磁盘io</p>
</li>
<li>
<p>插入数据时，尽量选择顺序插入，选择auto_increment自增主键</p>
</li>
<li>
<p>尽量不要使用uuid（每次生成的是无序的，导致乱序插入，可能页分裂，uuid v7是有序的）做主键或者其他自然主键，如身份证号（长度较长）</p>
</li>
<li>
<p>业务操作时，避免对主键的修改</p>
</li>
</ul>
<h3 id="3-order-by优化">3.order by优化</h3>
<ul>
<li>
<p>using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区sort buffer中完成排序操作，所以不是通过索引直接返回排序结果的排序都叫FileSort排序</p>
</li>
<li>
<p>using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为using index，不需要额外排序，操作效率高</p>
</li>
<li>
<p>索引创建出来默认是升序排序的，在信息collation中显示A（asc），所以如果在查询时order by后面的字段都是倒序，就会在explain的extra中提示backward index scan（反向扫描索引）</p>
</li>
<li>
<p>如果既有升序又有降序那么在extra中就会既有using index又有using filesort</p>
</li>
</ul>
<p># <strong>可以在创建索引的时候在字段名后加asc/desc来指定升序或降序</strong></p>
<ul>
<li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li>
<li>尽量使用覆盖索引</li>
<li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则</li>
<li>如果不可避免的出现filesort，大数据量排序时，可以适当增大排序缓冲区大小sort_buffer_size(默认256k）</li>
</ul>
<p># 可以用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> ‘sort_buffer_size’；</span><br></pre></td></tr></table></figure>
<p>来查看排序缓冲区的大小</p>
<p># 如果排序缓冲区满了，会在磁盘文件中排序，性能就会较低</p>
<h3 id="4-group-by优化">4.group by优化</h3>
<ul>
<li>通过索引来提升效率</li>
<li>分组操作时，索引的使用也是满足最左前缀法则的</li>
</ul>
<p># 在group by后面使用字段也可以走联合索引</p>
<h3 id="5-limit优化">5.limit优化</h3>
<ul>
<li>正常limit查询时，如从200000000条开始一页10行数据，这时会将前200000010都排序，但是最终只返回10条记录</li>
<li>可以通过覆盖索引和子查询来解决</li>
</ul>
<h3 id="6-count优化">6.count优化</h3>
<ul>
<li>InnoDB中查询count（*）会很耗时，执行时需要把每一行数据从引擎里读出来，然后累加</li>
<li>erMyISAM引擎把一个表的总行数存在了磁盘上，因此执行count（*）的时候会直接返回这个数，效率高</li>
</ul>
<p># 前提是查询时后面没有where条件</p>
<ul>
<li>
<p>count的几种用法</p>
<ul>
<li>
<p>count（）是一个聚合函数，对于返回的结果集，一行一行地判断，如果count函数的参数不是null，累计值就加1，否则不加，最后返回累计值</p>
</li>
<li>
<p>用法：</p>
<ul>
<li>count（*）：InnoDB引擎不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行累加</li>
<li>count（主键）：InnoDB引擎会遍历整张表，把每一行的主键id值都取出来，返回给服务层，服务层获取主键后直接按行进行累加（主键不可能是null）</li>
<li>count（字段）：
<ul>
<li>没有not null约束：InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null则计数</li>
<li>有not null约束：InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回服务层直接累加</li>
</ul>
</li>
<li>count（1）：InnoDB引擎会遍历整张表，但不取值，服务层对于返回的每一行，放一个数字1进去，直接按行累加</li>
</ul>
<p># 官方文档中说，count（*）和count（1）的优化是一样的</p>
<p># 效率：count（字段）&lt;count（主键）&lt;count（1）=count（*）</p>
</li>
</ul>
</li>
</ul>
<h3 id="7-update优化">7.update优化</h3>
<ul>
<li>InnoDB的行锁是针对索引加的锁，不是针对记录加的，并且该索引不能失效，否则会从行锁升级为表锁</li>
</ul>
<p># 在一个窗口中开启事务，where条件后跟的是有索引的且不能是前面提到过的各种索引失效的字段，则符合条件的行数据会被锁定（在另一个会话中可以对其他行数据进行update），否则则会将整张表锁住，在另一个会话中开启事务对表中任意一行数据update都无法成功</p>
<h2 id="4-视图">4.视图</h2>
<h3 id="1-介绍">1.介绍</h3>
<ul>
<li>视图（view）是一种虚拟存在的表。视图中的数据并不在数据库中实际存在，行和列数据来自定义视图查询中使用的表（基表/基础表），并且在使用视图时动态生成的</li>
<li>视图只保存查询的SQL逻辑，不保存查询结果，所以在创建视图的时候，主要在于创建SQL查询语句</li>
</ul>
<h3 id="2-基本语法">2.基本语法</h3>
<h4 id="1-创建">1.创建</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> 视图名称（列名列表） <span class="keyword">as</span> <span class="keyword">select</span>语句 wtih <span class="keyword">cascaded</span><span class="operator">/</span>loacl <span class="keyword">check</span> option；</span><br></pre></td></tr></table></figure>
<p># 如不需要替换视图则or replace可以省略</p>
<p># 不需要检查增删改是否满足条件时wtih cascaded/loacl check option可以省略</p>
<p># 例如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> stu_i_n <span class="keyword">as</span> <span class="keyword">select</span> id，name <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">&lt;=</span><span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<h4 id="2-查询">2.查询</h4>
<ul>
<li>查看创建视图的语句</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">view</span> 视图名称；</span><br></pre></td></tr></table></figure>
<ul>
<li>查看视图数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 视图名称 .........;</span><br></pre></td></tr></table></figure>
<p># 后面可以添加条件</p>
<h4 id="3-修改">3.修改</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> 视图名称（列名列表） <span class="keyword">as</span> <span class="keyword">select</span>语句 wtih <span class="keyword">cascaded</span><span class="operator">/</span>loacl <span class="keyword">check</span> option；</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">view</span> 视图名称（列名列表） <span class="keyword">as</span> <span class="keyword">select</span>语句 wtih <span class="keyword">cascaded</span><span class="operator">/</span>loacl <span class="keyword">check</span> option；</span><br></pre></td></tr></table></figure>
<h4 id="4-删除">4.删除</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> if <span class="keyword">exists</span> 视图名称 <span class="number">1</span>，视图名称<span class="number">2</span>， .......；</span><br></pre></td></tr></table></figure>
<h3 id="3-检查选项">3.检查选项</h3>
<ul>
<li>
<p>当使用with check option子句创建视图时，MySQL会通过视图检查正在更改的每个行，例如插入，更新，删除，以使其符合视图的条件。MySQL允许基于另一个视图创建视图，它还会检查<strong>所依赖视图</strong> 中的规则以保持一致性。为了确定检查的范围，MySQL提供了两个选项：cascaded和local，默认值为cascaded（级联）</p>
</li>
<li>
<p><strong>cascaded</strong> ：检查视图以及其所依赖的视图的条件</p>
</li>
<li>
<p><strong>local</strong> ：检查视图条件，再查看其所依赖的视图是否有with check option来检查条件，有则检查，没有则只需满足当前视图条件</p>
</li>
</ul>
<h3 id="4-更新">4.更新</h3>
<ul>
<li>要使视图可更新，视图中的行与基础表中的行之间必须存在一对一的关系。如果视图包含以下任何一项，则视图不可更新
<ul>
<li>聚合函数或窗口函数（sum，min，max，count）</li>
<li>distinct</li>
<li>group by</li>
<li>having</li>
<li>union或union all</li>
</ul>
</li>
</ul>
<h3 id="5-作用">5.作用</h3>
<ul>
<li>简单
<ul>
<li>视图不仅可以简化用户对数据的理解，也可以简化操作。经常使用的查询可以被定义为视图（类似于封装成函数），从而使得用户不必为以后的操作每次指定全部的条件</li>
</ul>
</li>
<li>安全
<ul>
<li>数据库可以授权，但不能授权到数据库的特定行和列上。通过视图用户只能查询修改授权的数据</li>
</ul>
</li>
<li>数据独立
<ul>
<li>视图可以帮助用户屏蔽真实表结构变化带来的影响，当基表的字段名改变时，可以通过起别名的方式使视图的字段名和基表原始字段相同</li>
</ul>
</li>
</ul>
<h2 id="5-储存过程">5.储存过程</h2>
<h3 id="1-介绍-2">1.介绍</h3>
<ul>
<li>
<p>存储过程是事先经过编译并存储在数据库中的一段SQL语句集合，调用存储过程可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器间的传输，提高数据处理的效率</p>
</li>
<li>
<p>存储过程思想上很简单，就是数据库SQL语言层面的代码封装与重用</p>
</li>
<li>
<p>特点：</p>
<ul>
<li>封装，重用</li>
<li>可以接收参数，也可以返回数据</li>
<li>减少网络交互，提升效率</li>
</ul>
</li>
</ul>
<h3 id="2-基本语法-2">2.基本语法</h3>
<h4 id="1-创建-2">1.创建</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程名称（参数列表）</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">SQL</span>语句</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span>；</span><br></pre></td></tr></table></figure>
<p># 在<strong>命令行</strong> 中创建存储过程时，SQL语句中会有**；** ，导致判定为SQL语句完成</p>
<p># <strong>需要用关键字delimiter指定SQL语句的结束符</strong></p>
<ul>
<li>
<p>即<strong>delimiter</strong> 指定符号</p>
</li>
<li>
<p>在end后将；改为指定符号</p>
</li>
<li>
<p>同样也可以改回；</p>
</li>
</ul>
<h4 id="2-调用">2.调用</h4>
<ul>
<li><strong>call 名称（参数）；</strong></li>
</ul>
<h4 id="3-查看">3.查看</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.routines <span class="keyword">where</span> routine_schema <span class="operator">=</span> <span class="string">&#x27;xxxx&#x27;</span>；</span><br></pre></td></tr></table></figure>
<p># 在information_schema这个数据库中的routines这张表中，routine_schema限制数据库名称</p>
<p># 查询指定数据库的存储过程及状态信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程名称；</span><br></pre></td></tr></table></figure>
<ul>
<li># 查询某个存储过程的定义</li>
</ul>
<h4 id="4-删除-2">4.删除</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> if <span class="keyword">exists</span> 存储过程名称；</span><br></pre></td></tr></table></figure>
<h3 id="3-变量">3.变量</h3>
<h4 id="1-系统变量">1.系统变量</h4>
<ul>
<li>是MySQL服务器提供，不是用户自定义的，属于服务器层面，分为全局变量（global），会话变量(session）</li>
</ul>
<p># 没有指定session或global则默认为session</p>
<h5 id="1-查看系统变量">1.查看系统变量</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> session<span class="operator">/</span><span class="keyword">global</span> variables；</span><br></pre></td></tr></table></figure>
<p># 查看所有系统变量</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> session<span class="operator">/</span><span class="keyword">global</span> variables <span class="keyword">like</span> ‘.........’；</span><br></pre></td></tr></table></figure>
<p># 通过like模糊匹配查找变量</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@session</span><span class="operator">/</span>global.系统变量名；</span><br></pre></td></tr></table></figure>
<p># 查看指定变量的值</p>
<h5 id="2-设置系统变量">2.设置系统变量</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> session<span class="operator">/</span><span class="keyword">global</span> 系统变量名<span class="operator">=</span>值；</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> @<span class="variable">@session</span><span class="operator">/</span><span class="keyword">global</span> 系统变量名<span class="operator">=</span>值；</span><br></pre></td></tr></table></figure>
<p># 重启后设置的全局参数会恢复默认值，可以在/etc/my.cnf中配置</p>
<h4 id="2-用户自定义变量">2.用户自定义变量</h4>
<ul>
<li>是用户根据需要自己定义的变量，<strong>用户变量不用提前声明</strong> ，在用的时候直接用**@变量名** 使用就可以，其作用域为当前连接</li>
</ul>
<h5 id="1-赋值">1.赋值</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> @变量名<span class="number">1</span><span class="operator">=</span>值<span class="number">1</span>，......；</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> @变量名<span class="number">1</span> ：<span class="operator">=</span>值<span class="number">1</span>，......；</span><br></pre></td></tr></table></figure>
<p># 建议使用**：=**</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @变量名<span class="number">1</span> ：<span class="operator">=</span>值<span class="number">1</span>，......；</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">into</span> @变量名 <span class="keyword">from</span> 表名；</span><br></pre></td></tr></table></figure>
<p># 将查询结果赋给变量</p>
<h5 id="2-使用">2.使用</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @变量名<span class="number">1</span>，......；</span><br></pre></td></tr></table></figure>
<p># 直接使用一个未赋值的变量也不会报错，只会返回null</p>
<h4 id="3-局部变量">3.局部变量</h4>
<ul>
<li>是根据需要定义的在局部生效的变量，<strong>访问前需要declare声明</strong> ，可用作存储过程内的局部变量和输入参数，<strong>局部变量的范围是在其内声明的begin…end块</strong></li>
</ul>
<h5 id="1-声明">1.声明</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> 变量名 变量类型 <span class="keyword">default</span> ....；</span><br></pre></td></tr></table></figure>
<h5 id="2-赋值">2.赋值</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> 变量名<span class="operator">=</span>值；</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> 变量名 ：<span class="operator">=</span>值；</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">into</span> 变量名 <span class="keyword">from</span> 表名 ......；</span><br></pre></td></tr></table></figure>
<h3 id="4-if">4.if</h3>
<ul>
<li>语法</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if 条件<span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">	.......</span><br><span class="line">elseif 条件<span class="number">2</span> <span class="keyword">then</span></span><br><span class="line">	........</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	........</span><br><span class="line"><span class="keyword">end</span> if；</span><br></pre></td></tr></table></figure>
<p># 例如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p1()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">declare</span> score <span class="type">int</span> <span class="keyword">default</span> <span class="number">58</span> #这里将分数的默认值设为<span class="number">58</span>，没有参数</span><br><span class="line">	<span class="keyword">declare</span> <span class="keyword">result</span> <span class="type">varchar</span>(<span class="number">10</span>);</span><br><span class="line">	if score <span class="operator">&gt;=</span> <span class="number">85</span> <span class="keyword">then</span></span><br><span class="line">		<span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span><span class="string">&#x27;优秀&#x27;</span>;</span><br><span class="line">	elseif score <span class="operator">&gt;=</span> <span class="number">60</span> <span class="keyword">then</span></span><br><span class="line">		<span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span><span class="string">&#x27;及格&#x27;</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span><span class="string">&#x27;不及格&#x27;</span></span><br><span class="line">	<span class="keyword">end</span> if;</span><br><span class="line">	<span class="keyword">select</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>
<h3 id="5-参数">5.参数</h3>
<table>
<thead>
<tr>
<th>类型</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>in</td>
<td>该类参数作为输入，也就是需要调用时传入值</td>
<td># 默认为in</td>
</tr>
<tr>
<td>out</td>
<td>该类参数作为输出，也就是该参数可以作为返回值</td>
<td></td>
</tr>
<tr>
<td>inout</td>
<td>既可以作为输入参数，也可以作为输出参数</td>
<td># 可以用于作为百分制转化的参数</td>
</tr>
</tbody>
</table>
<ul>
<li>语法</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程名称（<span class="keyword">in</span><span class="operator">/</span><span class="keyword">out</span><span class="operator">/</span><span class="keyword">inout</span> 参数名 参数类型）</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">SQL</span>语句</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span>；</span><br></pre></td></tr></table></figure>
<p># 例如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p1(<span class="keyword">in</span> score <span class="type">int</span>，<span class="keyword">out</span> <span class="keyword">result</span> <span class="type">varchar</span>(<span class="number">10</span>)) #这里将分数的类型设置为<span class="keyword">in</span>传入，同时设置<span class="keyword">result</span>为<span class="keyword">out</span>返回</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	if score <span class="operator">&gt;=</span> <span class="number">85</span> <span class="keyword">then</span></span><br><span class="line">		<span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span><span class="string">&#x27;优秀&#x27;</span>;</span><br><span class="line">	elseif score <span class="operator">&gt;=</span> <span class="number">60</span> <span class="keyword">then</span></span><br><span class="line">		<span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span><span class="string">&#x27;及格&#x27;</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span><span class="string">&#x27;不及格&#x27;</span></span><br><span class="line">	<span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>
<p># call的时候就要传入一个参数，同时还要自定义一个变量来接收返回的结果</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">call</span> p1(<span class="number">68</span>,<span class="variable">@result1</span>);</span><br></pre></td></tr></table></figure>
<p># 这里执行完不会直接显示result，要查询@result1才能显示</p>
<h3 id="6-case">6.case</h3>
<ul>
<li>语法一</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> 表达式</span><br><span class="line">	<span class="keyword">when</span> 值<span class="number">1</span> <span class="keyword">then</span> sql1语句</span><br><span class="line">	<span class="keyword">when</span> 值<span class="number">2</span> <span class="keyword">then</span> sql2语句</span><br><span class="line">	......</span><br><span class="line">	<span class="keyword">else</span> sql3语句</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">case</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>语法二</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span></span><br><span class="line">	<span class="keyword">when</span> 条件表达式<span class="number">1</span> <span class="keyword">then</span> sql1语句</span><br><span class="line">	<span class="keyword">when</span> 条件表达式<span class="number">2</span> <span class="keyword">then</span> sql2语句</span><br><span class="line">	.......</span><br><span class="line">	<span class="keyword">else</span> sql3语句</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">case</span>;</span><br></pre></td></tr></table></figure>
<p># 例如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p6(<span class="keyword">in</span> <span class="keyword">month</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">declare</span> <span class="keyword">result</span> <span class="type">varchar</span>(<span class="number">10</span>）；</span><br><span class="line">	<span class="keyword">case</span></span><br><span class="line">		<span class="keyword">when</span> <span class="keyword">month</span> <span class="operator">&gt;=</span> <span class="number">1</span> <span class="keyword">and</span> <span class="keyword">month</span> <span class="operator">&lt;=</span> <span class="number">3</span> <span class="keyword">then</span></span><br><span class="line">			<span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span><span class="string">&#x27;第一季度&#x27;</span>；</span><br><span class="line">		<span class="keyword">when</span> <span class="keyword">month</span> <span class="operator">&gt;=</span> <span class="number">4</span> <span class="keyword">and</span> <span class="keyword">month</span> <span class="operator">&lt;=</span><span class="number">6</span> <span class="keyword">then</span></span><br><span class="line">			<span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span><span class="string">&#x27;第二季度&#x27;</span>；</span><br><span class="line">		<span class="keyword">when</span> <span class="keyword">month</span> <span class="operator">&gt;=</span> <span class="number">7</span> <span class="keyword">and</span> <span class="keyword">month</span> <span class="operator">&lt;=</span><span class="number">9</span> <span class="keyword">then</span></span><br><span class="line">			<span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span><span class="string">&#x27;第三季度&#x27;</span>；</span><br><span class="line">		<span class="keyword">when</span> <span class="keyword">month</span> <span class="operator">&gt;=</span> <span class="number">10</span> <span class="keyword">and</span> <span class="keyword">month</span> <span class="operator">&lt;=</span> <span class="number">12</span> <span class="keyword">then</span></span><br><span class="line">			<span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span><span class="string">&#x27;第四季度&#x27;</span>；</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span><span class="string">&#x27;非法参数&#x27;</span>；</span><br><span class="line">	<span class="keyword">end</span> <span class="keyword">case</span>；</span><br><span class="line">	<span class="keyword">select</span> concat(<span class="string">&#x27;您输入的月份为：&#x27;</span>,<span class="keyword">month</span>，<span class="string">&#x27;，所属的季度为：&#x27;</span>，<span class="keyword">result</span>）；</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>
<h3 id="7-循环">7.循环</h3>
<h4 id="1-while">1.while</h4>
<ul>
<li>
<p>while循环是有条件的循环控制语句。满足条件后，再执行循环体中的SQL语句</p>
</li>
<li>
<p>语法</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">while 条件 do</span><br><span class="line">	<span class="keyword">sql</span>语句</span><br><span class="line"><span class="keyword">end</span> while;</span><br></pre></td></tr></table></figure>
<p># 先判定条件，如果为true，则执行语句，否则不执行</p>
<p># 例如从1到n的累加</p>
<h4 id="2-repeat">2.repeat</h4>
<ul>
<li>
<p>repeat是有条件的循环控制语句，当满足条件时退出循环</p>
</li>
<li>
<p>语法</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">repeat</span><br><span class="line">	<span class="keyword">sql</span>语句</span><br><span class="line">	until 条件</span><br><span class="line"><span class="keyword">end</span> repeat;</span><br></pre></td></tr></table></figure>
<p># 先执行一次语句，然后判定是否满足条件，满足则退出，不满足则继续下一次循环</p>
<p># 同样也可以做累加的操作</p>
<h4 id="3-loop">3.loop</h4>
<ul>
<li>
<p>loop实现简单的循环，如果不在SQL语句中增加退出循环的条件，可以用其来实现简单的死循环</p>
</li>
<li>
<p>loop配合以下两个语句使用</p>
</li>
<li>
<p><strong>leave</strong> ：配合循环使用，退出循环</p>
</li>
<li>
<p><strong>iterate</strong> ：必须用在循环中，作用时跳过当前循环剩下的语句，直接进入下一次循环</p>
</li>
<li>
<p>语法</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">标识名:loop</span><br><span class="line">	<span class="keyword">sql</span>语句</span><br><span class="line"><span class="keyword">end</span> loop 标识名;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">leave 标识名;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">iterate 标识名;</span><br></pre></td></tr></table></figure>
<p># 同样可以做累加</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p9(<span class="keyword">in</span> n <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">declare</span> total <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	sum:loop</span><br><span class="line">		if n<span class="operator">&lt;=</span><span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">			Leave sum;</span><br><span class="line">		<span class="keyword">end</span> if;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">set</span> total:<span class="operator">=</span> total<span class="operator">+</span>n;</span><br><span class="line">		<span class="keyword">set</span> n:<span class="operator">=</span>n<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">end</span> loop sum;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>
<p># 配合iterate可以做到累加偶数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p9(<span class="keyword">in</span> n <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">declare</span> total <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	sum:loop</span><br><span class="line">		if n<span class="operator">&lt;=</span><span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">			Leave sum;</span><br><span class="line">		<span class="keyword">end</span> if;</span><br><span class="line">		</span><br><span class="line">		if n<span class="operator">%</span><span class="number">2</span> <span class="operator">=</span> <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">			<span class="keyword">set</span> n :<span class="operator">=</span> n<span class="number">-1</span>;</span><br><span class="line">			iterate sum;</span><br><span class="line">		<span class="keyword">end</span> if;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">set</span> total:<span class="operator">=</span> total<span class="operator">+</span>n;</span><br><span class="line">		<span class="keyword">set</span> n:<span class="operator">=</span>n<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">end</span> loop sum;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>
<h3 id="8-游标（光标）">8.游标（光标）</h3>
<ul>
<li>
<p>游标（cursor）是用来存储查询结果集的数据类型，在存储过程和函数中可以使用游标对结果集进行循环处理。游标的使用包括游标的声明，open，fetch，close</p>
</li>
<li>
<p>语法</p>
</li>
<li>
<p>声明游标</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> 游标名称 <span class="keyword">cursor</span> <span class="keyword">for</span> 查询语句;</span><br></pre></td></tr></table></figure>
<p># 游标的声明要在普通变量声明的后面</p>
<ul>
<li>打开游标</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> 游标名称;</span><br></pre></td></tr></table></figure>
<ul>
<li>获取游标记录</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fetch</span> 游标名称 <span class="keyword">into</span> 变量<span class="number">1</span>，变量<span class="number">2</span>，......;</span><br></pre></td></tr></table></figure>
<ul>
<li>关闭游标</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">close</span> 游标名称;</span><br></pre></td></tr></table></figure>
<h3 id="9-条件处理程序">9.条件处理程序</h3>
<ul>
<li>
<p>条件处理程序（handler）可以用来定义在流程控制结构执行过程中遇到问题时相应的处理步骤</p>
</li>
<li>
<p>语法</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> handler_action handler <span class="keyword">for</span> condition_value,condition_value,.... <span class="keyword">sql</span>语句;</span><br></pre></td></tr></table></figure>
<p># handler_action:</p>
<p>​	continue：继续执行当前程序</p>
<p>​	exit：终止执行当前程序</p>
<p># condition_value</p>
<p>​	sqlstate：状态码，如0200</p>
<p>​	sqlwarning：所有以01开头的sqlstate代码的简称</p>
<p>​	not found：所有以02开头的sqlstate代码的简称</p>
<p>​	sqlexception：所有没有被sqlwarning和not found捕获的sqlstate代码的简称</p>
<p># 例如要查询所有年龄小于uage的用户的名称和专业</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p11(<span class="keyword">in</span> uage <span class="type">int</span>）</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">declare</span> uname <span class="type">varchar</span>(<span class="number">100</span>）；</span><br><span class="line">	<span class="keyword">declare</span> upro <span class="type">varchar</span>(<span class="number">100</span>）；</span><br><span class="line">	<span class="keyword">declare</span> u_cursor <span class="keyword">cursor</span> <span class="keyword">for</span> <span class="keyword">select</span> name,profession <span class="keyword">from</span> tb_user <span class="keyword">where</span> age <span class="operator">&lt;=</span> uage;</span><br><span class="line">	#游标在普通声明后声明</span><br><span class="line">    <span class="keyword">declare</span> exit handler <span class="keyword">for</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;02000&#x27;</span> <span class="keyword">close</span> u_cursor；</span><br><span class="line">	#条件处理程序，用于在循环体里结束循环</span><br><span class="line"></span><br><span class="line">    <span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tb_user_pro;</span><br><span class="line">	<span class="keyword">create table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> tb_user_pro(</span><br><span class="line">		id <span class="type">int</span> <span class="keyword">primary key</span> auto_increment，</span><br><span class="line">		name <span class="type">varchar</span>(<span class="number">100</span>），</span><br><span class="line">		profession <span class="type">varchar</span>(<span class="number">100</span>）</span><br><span class="line">	）；</span><br><span class="line">	#创建空的表来接收查询出来的数据</span><br><span class="line">                         </span><br><span class="line">    <span class="keyword">open</span> u_cursor；</span><br><span class="line">	while <span class="literal">true</span> do</span><br><span class="line">		<span class="keyword">fetch</span> ucursor <span class="keyword">into</span> uname,upro;</span><br><span class="line">		<span class="keyword">insert into</span> tb_user_pro <span class="keyword">values</span> (<span class="keyword">null</span>, uname, upro)；</span><br><span class="line">	<span class="keyword">end</span> while；</span><br><span class="line">    <span class="keyword">close</span> u_cursor;</span><br><span class="line">	#将游标中的数据循环读出，当读完所有数据时仍会循环读取，就会报错<span class="number">02000</span>，上面的条件处理程序就会使其停止执行</span><br><span class="line">                           </span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>
<h2 id="6-存储函数">6.存储函数</h2>
<ul>
<li>
<p>存储函数是有返回值的存储过程，存储函数的参数只能是in类型的</p>
</li>
<li>
<p>语法</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> 存储函数名称（参数列表）</span><br><span class="line"><span class="keyword">returns</span> 数据类型 characteristic</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">sql</span>语句</span><br><span class="line">	return.......;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>
<p># characteristic：</p>
<p>​	deterministic：相同的输入参数总是产生相同的结果</p>
<p>​	no sql：不包含sql语句</p>
<p>​	reads sql data：包含读取数据的语句，但不包含写入数据的语句</p>
<p># 二进制制在版本8是默认开启的，所以会强制指定一个characteristic</p>
<p># 因为有return…;所以可以直接查询这个存储函数来获取结果</p>
<p># 使用较少，存储过程可以替代存储函数</p>
<h2 id="7-触发器">7.触发器</h2>
<h3 id="1-介绍-3">1.介绍</h3>
<ul>
<li>触发器是与表有关的数据库对象，值在insert/update/delete之前或之后，触发并执行触发器中定义的SQL语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性，日志记录，数据校验等操作</li>
<li>使用别名old和new来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。现在触发器还只支持行级触发，不支持语句级触发</li>
</ul>
<table>
<thead>
<tr>
<th>触发器类型</th>
<th>new和old</th>
</tr>
</thead>
<tbody>
<tr>
<td>insert型触发器</td>
<td>new表示将要或者已经新增的数据</td>
</tr>
<tr>
<td>update型触发器</td>
<td>old表示修改之前的数据，new表示将要或者已经修改后的数据</td>
</tr>
<tr>
<td>delete型触发器</td>
<td>old表示将要或者已经修改的数据</td>
</tr>
</tbody>
</table>
<h3 id="2-语法">2.语法</h3>
<ul>
<li>创建</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> 触发器名称</span><br><span class="line">before<span class="operator">/</span>after <span class="keyword">insert</span><span class="operator">/</span><span class="keyword">update</span><span class="operator">/</span><span class="keyword">delete</span></span><br><span class="line"><span class="keyword">on</span> 表名 <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span> #行级触发器</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	具体逻辑;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>查看</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> triggers;</span><br></pre></td></tr></table></figure>
<ul>
<li>删除</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> 数据库名称.触发器名称</span><br></pre></td></tr></table></figure>
<p># 如果没有指定数据库名称则默认为当前的数据库</p>
<p>#例如一个用户表在增删改时要将增删改的内容记录到一个日志中</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create table</span> user_logs(</span><br><span class="line">id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">not null</span> auto_increment,</span><br><span class="line">operation <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not null</span> comment <span class="string">&#x27;操作类型，insert/update/delete&#x27;</span>,</span><br><span class="line">operate_time datetime <span class="keyword">not null</span> comment <span class="string">&#x27;操作时间&#x27;</span>,</span><br><span class="line">operate_id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">not null</span> comment <span class="string">&#x27;操作的ID&#x27;</span>,</span><br><span class="line">operate_params <span class="type">varchar</span>(<span class="number">500</span>) comment <span class="string">&#x27;操作参数&#x27;</span>,</span><br><span class="line"><span class="keyword">primary key</span>(`id`）</span><br><span class="line">engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>
<p># 先创建一个日志用于记录</p>
<p># 创建插入数据触发器</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tb_user_insert <span class="keyword">trigger</span></span><br><span class="line">	after <span class="keyword">insert</span> <span class="keyword">on</span> tb_user <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line">	#插入数据触发必然是after</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">insert into</span> user_logs(id, operation, operate_time, operate_id, operate_params) <span class="keyword">VALUES</span></span><br><span class="line">	(<span class="keyword">null</span>, <span class="string">&#x27;insert&#x27;</span>, now(), new.id, concat(<span class="string">&#x27;插入的数据内容为：id=&#x27;</span>,new.id,<span class="string">&#x27;,name=&#x27;</span>,new.name,<span class="string">&#x27;,phone=&#x27;</span>,NEW.phpne,<span class="string">&#x27;,email=&#x27;</span>,NEW.email,<span class="string">&#x27;,professiom=&#x27;</span>,NEW.profession))</span><br><span class="line">	#id是自增的</span><br><span class="line">	#<span class="keyword">insert</span>表示数据操作的类型</span><br><span class="line">	#now()获取当前数据操作时的实际</span><br><span class="line">	#new.id获取操作数据的id</span><br><span class="line">	#concat用于拼接后面这些新的数据</span><br><span class="line"><span class="keyword">end</span>；</span><br></pre></td></tr></table></figure>
<p># 更新和删除也类似，更新时要同时记录更新前和更新后的数据，就再用old.字段名来获取，删除则只记录删除操作前的数据，只需要old.字段名</p>
<h2 id="8-锁">8.锁</h2>
<h3 id="1-介绍-4">1.介绍</h3>
<ul>
<li>锁是计算机协调多个进程或者线程并发访问某一资源的机制。在数据库中，除传统的计算资源（cpu，ram，i/o）的争用以外，数据也是一种供许多用户享用的资源。任何保证数据并发访问的一致性，有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素</li>
</ul>
<h3 id="2-全局锁">2.全局锁</h3>
<ul>
<li>全局锁就是对整个数据库实例加锁，加锁后整个实例就处于<strong>只读状态</strong> ，后续的dml语句，ddl语句和已经更新操作的事务提交语句都会被阻塞</li>
<li>典型的使用场景是做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据的完整性</li>
</ul>
<h4 id="1-语法">1.语法</h4>
<ul>
<li>加全局锁</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">flush tables <span class="keyword">with</span> read lock;</span><br></pre></td></tr></table></figure>
<ul>
<li>备份时可以使用MySQL的工具mysqldump（不要在MySQL中执行，这是MySQL的工具）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p密码 表名&gt;要转移到的表的表名.sql</span><br></pre></td></tr></table></figure>
<ul>
<li>解锁</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">unlock tables;</span><br></pre></td></tr></table></figure>
<h4 id="2-特点">2.特点</h4>
<ul>
<li>如果在主库上备份，那么在备份期间都不能执行更新，业务停摆</li>
<li>如果在从库上备份，那么在备份期间从库不能执行主库同步过来的二进制日志（binlog），会导致主从延迟</li>
</ul>
<p># 在InnoDB引擎中，可以在备份时加上参数 --single-transaction参数来完成不加锁的一致性数据备份</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump --single-transaction -uroot -p密码 表名&gt;要转移到的表的表名.sql</span><br></pre></td></tr></table></figure>
<h3 id="3-表级锁">3.表级锁</h3>
<ul>
<li>表级锁，每次操作锁住整张表。锁定粒度大，发生锁冲突的概率高，并发度最低。应用在MyISAM，InnoDB，BDB等存储引擎中</li>
</ul>
<h4 id="1-表锁">1.表锁</h4>
<ul>
<li>
<p>可以分为两类：</p>
<ul>
<li>1.表共享读锁（read lock，读锁）:所有客户端都只能读取数据，加了表锁的客户端写入会报错，其他客户端会被阻塞</li>
<li>2.表独占写锁（write lock，写锁）：加了表锁的客户端可以读写，其他客户端读写会被阻塞</li>
</ul>
</li>
<li>
<p>语法：</p>
</li>
<li>
<p>加锁</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">lock tables 表名..... read<span class="operator">/</span>write;</span><br></pre></td></tr></table></figure>
<p># 可以锁定多张表</p>
<ul>
<li>释放锁</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">unlock tables;</span><br></pre></td></tr></table></figure>
<p># 或者直接将客户端关闭</p>
<h4 id="2-元数据锁（meta-data-lock，mdl）">2.元数据锁（meta data lock，mdl）</h4>
<ul>
<li>MDL加锁过程是系统自动控制，无需显式使用，在访问一张表的时候会自动加上。MDL锁主要作用是维护元数据的数据一致性，在表上有活动事务的时候，不可以对元数据进行写入操作，为了避免DML和DDL冲突，保证读写的正确性</li>
<li>MySQL5.5中引入的MDL，当对一张表进行增删改查的时候，加MDL读锁（共享）；当对表结构进行变更操作的时候，加MDL写锁（排他）</li>
</ul>
<table>
<thead>
<tr>
<th>对应SQL</th>
<th>锁类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>lock tables xxx read/write</td>
<td>shared_read_only/shared_no_read_write</td>
<td></td>
</tr>
<tr>
<td>select，select…lock in share mode</td>
<td>shared_read（共享）</td>
<td>与shared_read，shared_write兼容，与exclusive互斥</td>
</tr>
<tr>
<td>insert，update，delete，select…for update</td>
<td>shared_write（共享）</td>
<td>与shared_read，shared_write兼容，与exclusive互斥</td>
</tr>
<tr>
<td>alter table…</td>
<td>exclusive（排他）</td>
<td>与其他的MDL都互斥</td>
</tr>
</tbody>
</table>
<ul>
<li>查看元数据锁</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> object_type,object_schema,object_name,lock_type,lock_duration <span class="keyword">from</span> performance_schema.metadata_locks;</span><br></pre></td></tr></table></figure>
<p># metadata_locks这张表中记录了当前数据库中是元数据锁</p>
<h4 id="3-意向锁">3.意向锁</h4>
<ul>
<li>
<p>为了避免DML在执行时，加的行锁与表锁的冲突，在InnoDB中引入了意向锁，使得表锁不用检查每行数据是否加锁，使用意向锁来减少表锁的检查</p>
</li>
<li>
<p>分为两种：</p>
<ul>
<li>意向共享锁（IS）：由语句select … lock in share mode添加
<ul>
<li>与表锁共享锁（read）兼容，与表锁排他锁（write）互斥，会被阻塞</li>
</ul>
</li>
<li>意向排他锁（IX）：由insert，upadte，delete，select … for update 添加
<ul>
<li>与表锁共享锁（read）及排他锁（write）都互斥。意向锁之间不会互斥</li>
</ul>
</li>
</ul>
</li>
<li>
<p>查看意向锁及行锁的加锁情况</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> object_schema,object_name,index_name,lock_type,lock_mode,lock_data <span class="keyword">from</span> performance_schema.data_locks;</span><br></pre></td></tr></table></figure>
<h3 id="4-行级锁">4.行级锁</h3>
<h4 id="1-介绍-5">1.介绍</h4>
<ul>
<li>行级锁，每次操作锁住对应的行数据。锁定粒度最小，发生锁冲突的概率最低，并发度最高。应用在InnoDB存储引擎中</li>
<li>InnoDB的数据是基于索引组织的，行锁是通过对索引上的索引项加锁来实现的，不是对记录加锁。</li>
<li>主要分为三类：
<ul>
<li>行锁（record lock，记录锁）：锁定单个行数据的锁，防止其他事务对此行进行update和delete。在rc（read commit），rr（repeatable read）隔离级别下都支持</li>
<li>间隙锁（gap lock）：锁定索引记录间隙（不含该记录），确保索引记录间隙不变，防止其他事务在这个间隙进行insert，产生幻读。在rr隔离级别下都支持</li>
<li>临建锁（next-key lock）：行锁和间隙锁组合，同时锁住数据，并锁住数据前面的间隙gap。在rr隔离级别下支持</li>
</ul>
</li>
</ul>
<h4 id="2-行锁">2.行锁</h4>
<ul>
<li>InnoDB实现了以下两种类型的行锁
<ul>
<li>共享锁（s）：允许一个事务去读一行，即共享锁之间兼容，阻止其他事务获得相同数据集的排他锁</li>
<li>排他锁（x）：允许获取排他锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他锁</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">请求锁类型</th>
<th style="text-align:center">s（共享锁）</th>
<th style="text-align:center">x（排他锁）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">当前锁类型：s（共享锁）</td>
<td style="text-align:center">兼容</td>
<td style="text-align:center">冲突</td>
</tr>
<tr>
<td style="text-align:left">x（排他锁）</td>
<td style="text-align:center">冲突</td>
<td style="text-align:center">冲突</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>SQL</th>
<th>行锁类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>insert</td>
<td>排他锁</td>
<td>自动加锁</td>
</tr>
<tr>
<td>update</td>
<td>排他锁</td>
<td>自动加锁</td>
</tr>
<tr>
<td>delete</td>
<td>排他锁</td>
<td>自动加锁</td>
</tr>
<tr>
<td>select</td>
<td>不加任何锁</td>
<td></td>
</tr>
<tr>
<td>select…lock in share mode</td>
<td>共享锁</td>
<td>需要手动在select后加lock in share mode</td>
</tr>
<tr>
<td>select…for update</td>
<td>排他锁</td>
<td>需要手动在select后加for update</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>在默认情况下，InnoDB在repeatable read事务隔离级别运行，InnoDB使用next-key锁进行搜素和索引扫描，以防止幻读</p>
</li>
<li>
<p>1.针对唯一索引进行检索时，对已存在的记录进行等值匹配时，将会自动优化为行锁</p>
</li>
<li>
<p>2.InnoDB的行锁是针对于索引加的锁，不通过索引条件检索数据，那么InnoDB将对表中的所有记录加锁，此时就会升级为表锁</p>
</li>
<li>
<p>查看意向锁及行锁的加锁情况</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> object_schema,object_name,index_name,lock_type,lock_mode,lock_data <span class="keyword">from</span> performance_schema.data_locks;</span><br></pre></td></tr></table></figure>
<h4 id="3-间隙锁-临建锁">3.间隙锁/临建锁</h4>
<ul>
<li>默认情况下，InnoDB在repeatable read事务隔离级别运行，InnoDB使用next-key锁进行搜素和索引扫描，以防止幻读</li>
<li>1.索引上的等值查询（唯一索引），给不存在的记录加锁时，优化为间隙锁</li>
<li>2.索引上的等值查询（普通索引），向右遍历时最后一个值不满足查询需求时，next-key lock退化为间隙锁</li>
<li>3.索引上的范围查询（唯一索引），会访问到不满足条件的第一个值为止</li>
</ul>
<p># 间隙锁唯一目的是防止其他事务插入间隙。间隙锁可以共存，一个事务采用的间隙锁不会阻止另一个事务在同一间隙采用间隙锁</p>
<h2 id="9-InnoDB引擎">9.InnoDB引擎</h2>
<h3 id="1-逻辑存储结构">1.逻辑存储结构</h3>
<ul>
<li>tablespace：表空间（ibd文件）一个mysql实例可以对应多个表空间，用于存储记录，索引等数据
<ul>
<li>segment：段，分为数据段（leaf node segment），索引段（non-leaf node segment），回滚段（rollback segment），InnoDB是索引组织表，数据段就是B+tree的叶子节点，索引是B+tree的非叶子节点。段用来管理多个区
<ul>
<li>extent：区，表空间的单元结构，每个页的大小为1M。默认情况下，InnoDB存储引擎页大小为16K，即一个区中一共有64个连续的页
<ul>
<li>page：页，是InnoDB存储引擎磁盘管理的最小单元，每个页的大小默认为16KB。为了保证页的连续性，InnoDB存储引擎每次从磁盘申请4-5个区
<ul>
<li>row：行，InnoDB存储引擎数据是按行进行存放的
<ul>
<li>Trx_id：每次对某条记录进行改动时，都会把对应的事务id赋值给Trx_id隐藏列</li>
<li>Roll_pointer：每次对某条记录进行改动时，都会把旧的版本写入到undo日志中，然后这个隐藏列就相当于一个指针，可以通过它来找到该记录修改前的信息</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-架构">2.架构</h3>
<ul>
<li>MySQL5.5之后，默认使用InnoDB存储引擎，它擅长事务处理，具有奔溃恢复特性，在日常开发中使用广泛</li>
</ul>
<h4 id="1-内存架构">1.内存架构</h4>
<h5 id="1-Buffer-Pool">1.Buffer Pool</h5>
<ul>
<li>
<p>缓冲池是主内存中的一个区域，里面可以缓存磁盘上经常操作的真实数据，在执行增删改查操作时，先操作缓冲池中的数据（若缓冲池没有数据，则从磁盘加载并缓存），然后再以一定频率刷新到磁盘，从而减少磁盘IO，加快处理速度</p>
</li>
<li>
<p>缓冲池以Page页为单位，底层采用链表数据结构管理Page。根据状态将Page分为三种类型：</p>
<ul>
<li>free page：空闲page，未被使用</li>
<li>clean page：被使用page，数据没有被修改过</li>
<li>dirty page：脏页，被使用page，数据被修改过，页中数据与磁盘数据产生了不一致，还未刷新到磁盘</li>
</ul>
</li>
</ul>
<h5 id="2-Change-Buffer">2.Change Buffer</h5>
<ul>
<li>
<p>更改缓冲区（针对于非唯一二级索引页），在执行DML语句时，如果这些数据Page没有在Buffer Pool中，不会直接操作磁盘，而会将数据变更存在更改缓冲区Change Buffer中，在未来数据被读取时，再将数据合并恢复到Buffer Pool中，再将合并后的数据刷新到磁盘中</p>
</li>
<li>
<p>与聚集索引不同，二级索引通常是非唯一的，并且以相对随机的顺序插入二级索引。同样，删除和更<br>
新可能会影响索引树中不相邻的二级索引页，如果每一次都操作磁盘，会造成大量的磁盘IO。有了<br>
ChangeBuffer之后，我们可以在缓冲池中进行合并处理，减少磁盘IO。</p>
</li>
</ul>
<h5 id="3-Adaptive-Hash-Index">3.Adaptive Hash Index</h5>
<ul>
<li>自适应hash索引，用于优化对Buffer Pool数据的查询。InnoDB存储引擎会监控对表上各索引页的查询，如果观察到hash索引可以提升速度，则建立hash索引，称之为自适应hash索引</li>
<li>自适应哈希索引，无需人工干预，是系统根据情况自动完成。</li>
<li>参数：adaptive_hash_index，可以查询是否开启</li>
</ul>
<h5 id="4-Log-Buffer">4.Log Buffer</h5>
<ul>
<li>日志缓冲区，用来保存要写入到磁盘中的log日志数据（redo log、undo log），默认大小为 16MB，日志缓冲区的日志会定期刷新到磁盘中。如果需要更新、插入或删除许多行的事务，增加日志缓冲区的大小可以节省磁盘IO</li>
<li>参数：
<ul>
<li>缓冲区大小：innodb_log_buffer_size</li>
<li>日志刷新到磁盘时机：innodb_flush_log_at_trx_commit
<ul>
<li>1：日志在每次事务提交时写入并刷新磁盘</li>
<li>0：每秒将日志写入并刷新磁盘一次</li>
<li>2：日志在每次事务提交后写入，并每秒刷新到磁盘一次</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="2-磁盘结构">2.磁盘结构</h4>
<h5 id="1-System-Tablespace">1.System Tablespace</h5>
<ul>
<li>系统表空间是更改缓冲区的存储区域。如果表是在系统表空间而不是每个表文件或通用表空间中创建的，它也可能包含表和索引数据。(在MySQL5.x版本中还包含InnoDB数据字典、undolog等）</li>
<li>参数：innodb_data_file_path</li>
</ul>
<h5 id="2-File-Per-Table-Tablespaces">2.File-Per-Table Tablespaces</h5>
<ul>
<li>每个表的文件表空间包含单个InnoDB表的数据和索引，并存储在文件系统上的单个数据文件中。</li>
<li>参数：innodb_file_per_table</li>
</ul>
<p># 默认开启</p>
<h5 id="3-General-Tablespaces">3.General Tablespaces</h5>
<ul>
<li>
<p>通用表空间，需要通过CREATE TABLESPACE 语法创建通用表空间，在创建表时，可以指定该表空间。</p>
</li>
<li>
<p>语法：</p>
</li>
<li>
<p>创建通用表空间</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> tablespace xxxx <span class="keyword">add</span> datafile <span class="string">&#x27;表空间关联的表空间文件&#x27;</span> engine<span class="operator">=</span><span class="string">&#x27;引擎名称&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>指定表空间</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create table</span> xxx... tablespace 表空间名称;</span><br></pre></td></tr></table></figure>
<h5 id="4-Undo-Tablespaces">4.Undo Tablespaces</h5>
<ul>
<li>撤销表空间，MySQL实例在初始化时会自动创建两个默认的undo表空间(初始大小16M)，用于存储undo log日志。</li>
</ul>
<h5 id="5-Temporary-Tablespaces">5.Temporary Tablespaces</h5>
<ul>
<li>InnoDB 使用会话临时表空间和全局临时表空间。存储用户创建的临时表等数据。</li>
</ul>
<h5 id="6-Doublewrite-Buffer-Files">6.Doublewrite Buffer Files</h5>
<ul>
<li>
<p>双写缓冲区，innoDB引擎将数据页从Buffer Pool刷新到磁盘前，先将数据页写入双写缓冲区文件中，便于系统异常时恢复数据。</p>
</li>
<li>
<p>dblwr后缀文件</p>
</li>
</ul>
<h5 id="7-Redo-Log">7.Redo Log</h5>
<ul>
<li>
<p>重做日志，是用来实现事务的持久性。该日志文件由两部分组成：</p>
<ul>
<li>重做日志缓冲(redo log buffer），在内存中</li>
<li>重做日志文件（redo log）在磁盘中。</li>
</ul>
</li>
<li>
<p>当事务提交之后会把所有修改信息都会存到该日志中，用于在刷新脏页到磁盘时，发生错误时，进行数据恢复使用。</p>
</li>
<li>
<p>以循环方式写入重做日志，涉及两个文件ib_logfile0和ib_logfile1</p>
</li>
</ul>
<h4 id="3-后台线程">3.后台线程</h4>
<h5 id="1-Master-Thread">1.Master Thread</h5>
<ul>
<li>核心后台线程，负责调度其他线程，还负责将缓冲池中的数据异步刷新到磁盘中，保持数据的一致性，还包括脏页的刷新、合并插入缓存、undo页的回收。</li>
</ul>
<h5 id="2-IO-Thread"><a href="http://2.IO">2.IO</a> Thread</h5>
<ul>
<li>在InnoDB存储引擎中大量使用了AIO来处理IO请求，这样可以极大地提高数据库的性能，而IO Thread主要负素这些IO请求的回调。</li>
</ul>
<table>
<thead>
<tr>
<th>线程类型</th>
<th>默认个数</th>
<th>职责</th>
</tr>
</thead>
<tbody>
<tr>
<td>Read thread</td>
<td>4</td>
<td>负责读操作</td>
</tr>
<tr>
<td>Write thread</td>
<td>4</td>
<td>负责写操作</td>
</tr>
<tr>
<td>Log thread</td>
<td>1</td>
<td>负责将日志缓冲区刷新到磁盘</td>
</tr>
<tr>
<td>Insert buffer thread</td>
<td>1</td>
<td>负责将写缓冲区内容刷新到磁盘</td>
</tr>
</tbody>
</table>
<h5 id="3-Purge-Thread">3.Purge Thread</h5>
<ul>
<li>主要用于回收事务已经提交了的undo log，在事务提交之后，undo log可能不用了，就用它来回收</li>
</ul>
<h5 id="4-Page-Cleaner-Thread">4.Page Cleaner Thread</h5>
<ul>
<li>协助Master Thread刷新脏页到磁盘的线程，它可以减轻Master Thread的工作压力，减少阻塞</li>
</ul>
<h4 id="4-总结">4.总结</h4>
<ul>
<li>业务操作时直接操作缓冲区中的数据，缓冲区中没有数据时，将磁盘中的数据加载回来再存储到缓冲区中，缓冲区中的数据再以一定的频率，通过后台线程刷新到磁盘中，在磁盘中进行永久化保留</li>
</ul>
<h3 id="3-事务原理">3.事务原理</h3>
<h4 id="1-概述">1.概述</h4>
<ul>
<li>
<p>事务有四个特性：</p>
<ul>
<li>原子性</li>
<li>一致性</li>
<li>隔离性</li>
<li>持久性</li>
</ul>
</li>
<li>
<p>其中原子性，一致性，持久性由redo log和undo log这两份日志来保证</p>
</li>
<li>
<p>隔离性则由锁机制和MVCC多版本并发控制来实现</p>
</li>
</ul>
<h4 id="2-redo-log">2.redo log</h4>
<ul>
<li>
<p>重做日志，记录的是事务提交时数据页的物理修改，是用来实现事务的持久性。</p>
</li>
<li>
<p>该日志文件由两部分组成：重做日志缓冲（redo log buffer）以及重做日志文件（redo log file），前者是在内存中，后者在磁盘中。当事务提交之后会把所有修改信息都存到该日志文件中，用于在刷新脏页到磁盘，发生错误时，进行数据恢复使用。</p>
</li>
<li>
<p>这种先写日志再将脏页中的数据刷新到磁盘的机制称为WAL(Write-Ahead-Logging)</p>
</li>
<li>
<p>保证了事务的持久性</p>
</li>
</ul>
<h4 id="3-undo-log">3.undo log</h4>
<ul>
<li>回滚日志，用于记录数据被修改前的信息，作用包含两个：提供回滚和 MVCC(多版本并发控制)。</li>
<li>undo log和redo log记录物理日志不一样，它是逻辑日志。可以认为当delete一条记录时，undo log中会记录一条对应的insert记录，反之亦然，当update一条记录时，它记录一条对应相反的update记录（updata之前的数据）。当执行rollback时，就可以从undo log中的逻辑记录读取到相应的内容并进行回滚。</li>
<li>保证了事务的原子性</li>
<li>Undo log销毁：undo log在事务执行时产生，事务提交时，并不会立即删除undo log，因为这些日志可能还用于MVCC。</li>
<li>Undo log存储：undo log采用段的方式进行管理和记录，存放在前面介绍的 rollback segment 回滚段中，内部包含1024个undo log segment。</li>
</ul>
<h3 id="4-MVCC">4.MVCC</h3>
<h4 id="1-基本概念">1.基本概念</h4>
<h5 id="1-当前读">1.当前读</h5>
<ul>
<li>读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。对于日常操作，如select…lock in share mode（共享锁），select …for update，update，insert，delete（排他锁）都是一种当前读</li>
</ul>
<h5 id="2-快照读">2.快照读</h5>
<ul>
<li>简单的select（不加锁）就是快照读，快照读，读取的是记录数据的可见版本，有可能是历史数据，不加锁，是非阻塞读。</li>
<li>Read Committed：每次select，都生成一个快照读。</li>
<li>Repeatable Read：开启事务后第一个select语句才是快照读的地方。</li>
<li>Serializable：快照读会退化为当前读。</li>
</ul>
<h5 id="3-MVCC">3.MVCC</h5>
<ul>
<li>全称Multi-Version Concurrency Control，多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突，快照读为MySQL实现</li>
<li>MVCC提供了一个非阻塞读功能。MVCC的具体实现，还需要依赖于数据库记录中的三个隐式字段、undo log日志、readView。</li>
</ul>
<h4 id="2-实现原理">2.实现原理</h4>
<h5 id="1-隐藏字段">1.隐藏字段</h5>
<table>
<thead>
<tr>
<th>隐藏字段</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>DB_TRX_ID</td>
<td>最近修改事务ID，记录插入这条记录或最后一次修改该记录的事务ID</td>
</tr>
<tr>
<td>DB_ROLL_PTR</td>
<td>回滚指针，指向这条记录的上一个版本，用于配合undo log，指向上一个版本</td>
</tr>
<tr>
<td>DB_ROW_ID</td>
<td>隐藏主键，如果表结构没有指定主键，将会生成该隐藏字段</td>
</tr>
</tbody>
</table>
<h5 id="2-undo-log">2.undo log</h5>
<ul>
<li>
<p>回滚日志，在insert、 update、delete的时候产生的便于数据回滚的日志。</p>
<ul>
<li>当insert的时候，产生的undo log日志只在回滚时需要，在事务提交后，可被立即删除。</li>
<li>而update、delete的时候，产生的undo log不仅在回滚时需要，在快照读时也需要，不会立即被删除。</li>
</ul>
</li>
<li>
<p>undo log版本链</p>
</li>
<li>
<p>不同事务或相同事务对同一条记录进行修改，会导致该记录的undo log生成一条记录版本链表，链表的头部是最新的旧记录，链表尾部是最早的旧记录</p>
</li>
<li>
<p>DB_ROLL_PTR指向上一个修改的记录</p>
</li>
</ul>
<h5 id="3-readview">3.readview</h5>
<ul>
<li>readview（读视图）是快照读SQL执行时MVCC提取数据的依据，记录并维护系统当前活跃的事务（未提交）id</li>
<li>readview中包含四个核心字段：</li>
</ul>
<table>
<thead>
<tr>
<th>字段</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>m_ids</td>
<td>当前活跃的事务id集合</td>
</tr>
<tr>
<td>min_trx_id</td>
<td>最小活跃事务id</td>
</tr>
<tr>
<td>max_trx_id</td>
<td>预分配事务id，当前最大事务id+1（因为事务id是自增的）</td>
</tr>
<tr>
<td>creator_trx_id</td>
<td>readview创建者的事务id</td>
</tr>
</tbody>
</table>
<ul>
<li>版本链数据访问规则
<ul>
<li>trx_id==creator_trx_id？可以访问该版本
<ul>
<li>说明数据是当前这个事务更改的</li>
</ul>
</li>
<li>trx_id&lt;min_trx_id？可以访问该版本
<ul>
<li>说明数据已经提交了</li>
</ul>
</li>
<li>trx_id&gt;max_trx_id？不可以访问该版本
<ul>
<li>说明该事务是再readview生成后才开启</li>
</ul>
</li>
<li>min_trx_id&lt;=trx_id&lt;=max_trx_id？如果trx_id<strong>不在</strong> m_ids中是可以访问该版本的
<ul>
<li>说明数据已经提交</li>
</ul>
</li>
</ul>
</li>
</ul>
<p># trx_id：代表undo log中每一条数据的当前事务id</p>
<p># 从最新的undo log记录，逐条数据进行比对，直到查找到符合规则的记录返回</p>
<ul>
<li>不同的隔离级别，生成readview的时机不同
<ul>
<li>rc：在事务每一次执行快照读时生成readview</li>
<li>rr：仅在事务中第一次执行快照读时生成readview，后续复用该readview</li>
</ul>
</li>
</ul>
<h2 id="10-MySQL管理">10.MySQL管理</h2>
<h3 id="1-系统数据库">1.系统数据库</h3>
<ul>
<li>在MySQL数据库安装完后，自带了四个数据库</li>
</ul>
<table>
<thead>
<tr>
<th>数据库</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>mysql</td>
<td>存储MySQL服务器正常运行所需要的各种信息（时区，主从，用户，权限）</td>
</tr>
<tr>
<td>information_schema</td>
<td>提供了访问数据库元数据的各种表和视图，包含数据库，表，字段类型及访问权限等</td>
</tr>
<tr>
<td>performance_schema</td>
<td>为MySQL服务器运行时状态提供了一个底层监控功能，主要用于收集数据库服务器性能参数</td>
</tr>
<tr>
<td>sys</td>
<td>包含了一系列方便DBA和开发人员利用performance_schema性能数据库进行性能调优和诊断的视图</td>
</tr>
</tbody>
</table>
<h3 id="2-常用工具">2.常用工具</h3>
<h4 id="1-mysql">1.mysql</h4>
<ul>
<li>
<p>mysql的客户端工具</p>
</li>
<li>
<p>语法：</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql 选项 数据库</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>选项：</p>
<ul>
<li>
<p>-u，指定用户名</p>
</li>
<li>
<p>-p，指定密码</p>
</li>
<li>
<p>-h，指定服务器IP或域名</p>
</li>
<li>
<p>-P，指定连接端口</p>
</li>
<li>
<p>-e，执行SQL语句并退出</p>
<ul>
<li>
<p>-e这个选项可以在MySQL客户端执行SQL语句，而不用连接到MySQL数据库再执行，对于一些批处理脚本，这种方式较为方便</p>
</li>
<li>
<p>例如：</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p密码 数据库名 -e&#x27;sql语句&#x27;</span><br></pre></td></tr></table></figure>
<p>​</p>
<h4 id="2-mysqladmin">2.mysqladmin</h4>
<ul>
<li>
<p>mysqladmin是一个执行管理操作的客户端程序，可以用它来检查服务器的配置和当前状态，创建并删除数据库等</p>
</li>
<li>
<p>例如：</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqladmin -uroot -p密码 drop 数据库名</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqladmin -uroot -p密码 version</span><br></pre></td></tr></table></figure>
<ul>
<li>可以通过帮助文档查看选项：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqladmin --help</span><br></pre></td></tr></table></figure>
<h4 id="3-mysqlbinlog">3.mysqlbinlog</h4>
<ul>
<li>
<p>由于服务器生成的二进制日志文件以二进制格式保存，所以如果想要检查这些文本的文本格式，就会使用到mysqlbinlog日志管理工具</p>
</li>
<li>
<p>语法</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqlbinlog 选项 binlog文件名1 binlog文件名2 ...</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>选项：</p>
<ul>
<li>-d，指定数据库名称，只列出指定的数据库相关操作</li>
<li>-o，忽略掉日志中的前n行命令</li>
<li>-r，将输出的文本格式日志输出到指定文件中</li>
<li>-s，显示简单格式，省略掉一些信息</li>
<li>–start-datetime=起始日期 --stop-datetime=截止日期，指定日期间隔内的所有日志</li>
<li>–start-positon=日志起始位置 --stop-position=日志截止位置，指定位置间隔内的所有日志</li>
</ul>
</li>
</ul>
<h4 id="4-mysqlshow">4.mysqlshow</h4>
<ul>
<li>
<p>mysqlshow客户端对象查找工具，用来快速查找存在哪些数据库，数据库中的表，表中的列或者索引</p>
</li>
<li>
<p>语法：</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqlshow 选项 数据库名称 表名称 字段名称</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>选项：</p>
<ul>
<li>–count，显示数据库及表的统计信息（数据库，表均可不指定）</li>
<li>-i，显示指定数据库或者指定表的状态信息</li>
</ul>
</li>
<li>
<p>例如：</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqlshow -uroot -p密码 --count</span><br></pre></td></tr></table></figure>
<p># 查询每个数据库的表的数量及表中记录的数量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqlshow -uroot -p密码 数据库名 --count</span><br></pre></td></tr></table></figure>
<p># 查询指定数据库中每个表中的字段数及行数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqlshow -uroot -p密码 数据库名 表名 --count</span><br></pre></td></tr></table></figure>
<p># 查询指定数据库中指定表的详细情况</p>
<h4 id="5-mysqldump">5.mysqldump</h4>
<ul>
<li>
<p>mysqldump客户端工具用来备份数据库或在不同数据库之间进行数据迁移。备份内容包含创建表，及插入表的SQL语句</p>
</li>
<li>
<p>语法：</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump 选项 数据库名 表名</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump 选项 --database 数据库名1 数据库名2 ...</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump 选项 -B 数据库名1 数据库名2 ...</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump 选项 --all-databases</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump 选项 -A</span><br></pre></td></tr></table></figure>
<p># 后面加**&gt; 文件名.sql** 来指定保存到哪个文件</p>
<ul>
<li>
<p>选项：</p>
<ul>
<li>
<p>连接选项：</p>
<ul>
<li>
<p>-u，指定用户名</p>
</li>
<li>
<p>-p，指定密码</p>
</li>
<li>
<p>-h，指定服务器IP或域名</p>
</li>
<li>
<p>-P，指定连接端口</p>
</li>
</ul>
</li>
<li>
<p>输出选项：</p>
<ul>
<li>–add-drop-database，在每个数据库创建语句前加上drop database语句</li>
<li>–add-drop-table，在每个表创建语句前加上drop table语句，默认开启；不开启（–skip-add-drop-table）</li>
<li>-n，不包含数据库的创建语句</li>
<li>-t，不包含数据表的创建语句</li>
<li>-d，不包含数据</li>
<li>-T，自动生成两个文件：
<ul>
<li>.sql后缀文件，创建表结构的语句</li>
<li>.txt后缀文件，数据文件</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="6-mysqlimport-source">6.mysqlimport/source</h4>
<ul>
<li>
<p>mysqlimport是客户端数据导入工具，用来导入mysqldump加-T参数后导出的文本文件</p>
</li>
<li>
<p>语法：</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqlimport 选项 数据库名 文件位置</span><br></pre></td></tr></table></figure>
<ul>
<li>例如：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqlimport -uroot -p密码 数据库名 文件目录/文件名.txt</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>如果需要导入sql文件，可以使用mysql中的source指令</p>
</li>
<li>
<p>语法：</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /root/文件名.sql</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>进阶</tag>
      </tags>
  </entry>
  <entry>
    <title>小六壬起课器</title>
    <url>/2025/02/24/%E5%B0%8F%E5%85%AD%E5%A3%AC%E8%B5%B7%E8%AF%BE%E5%99%A8/</url>
    <content><![CDATA[<h1><a href="http://xn--65q44jg8bzxec56fv3b.py">小六壬起课器.py</a></h1>
<h2 id="（仅起到起课作用）">（仅起到起课作用）</h2>
<p>​	小六壬，古代中国占卜法，古代主要用于军事韬略，尤以别名诸葛亮马前课著名。</p>
<p>​	在所有术数中时间都是首位，所以第一则是获取当前用户时间。在运行时可能会遇到用户输入各种类型的数据，所以使用try来运行可能出错的代码，并且在报错后循环让用户重新输入。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>: <span class="comment">#无限循环</span></span><br><span class="line">   <span class="keyword">try</span>: <span class="comment">#尝试运行可能出错的代码</span></span><br><span class="line">      time=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;以24时制输入当地当前时:&quot;</span>)) <span class="comment">#获取时间  </span></span><br><span class="line">   <span class="keyword">except</span> (ValueError, TypeError): <span class="comment">#数值错误和数值类型错误时的处理</span></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;错误,输入数字有误,例:当前13:11,则输入13&quot;</span>)</span><br><span class="line">      <span class="keyword">continue</span> <span class="comment">#跳过下面的循环，防止因为上面错误导致time没有获取数值而使下面的判断报错</span></span><br><span class="line">   <span class="keyword">if</span> time <span class="keyword">in</span> list10: <span class="comment">#判断输入数字是否为0~23</span></span><br><span class="line">      <span class="keyword">break</span> <span class="comment">#正常则执行下面的代码</span></span><br><span class="line">   <span class="keyword">else</span>: <span class="comment">#不符合则提示并循环</span></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;错误,输入数字有误,例:当前13:11,则输入13&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>​	小六壬中常见起课方式有日期起课以及随机数起课，在这里仅做了随机数起课。（后续可能增加以日期起课的选择）仍然使用try语句来处理可能遇到的输入数据类型错误，再将得到三个随机数储存。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;输入心中立即想到的任意大小的正整数&quot;</span>)</span><br><span class="line">numbers1 = [<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>]  <span class="comment"># 用列表存储 x, y, z</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>): <span class="comment"># 循环三次以获取三个数字</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>: <span class="comment">#无限循环</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            numbers1[i] = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">f&quot;请输入第 <span class="subst">&#123;i + <span class="number">1</span>&#125;</span> 个数字: &quot;</span>)) <span class="comment">#使用f语句</span></span><br><span class="line">            <span class="keyword">if</span> numbers1[i] &lt;= <span class="number">0</span>:  <span class="comment"># 检查输入的数字是否为正整数</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;输入数字有误，请输入正负整数&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span>  <span class="comment"># 如果输入有效，则退出当前的 while 循环</span></span><br><span class="line">        <span class="keyword">except</span> (ValueError,TypeError):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;输入数字有误，请输入正负整数&quot;</span>)</span><br><span class="line">x, y, z = numbers1 <span class="comment"># 将输入的数字赋值给 x, y, z</span></span><br></pre></td></tr></table></figure>
<p>​	创建一个列表储存十二个时辰，由于一个时辰对应两个小时，所以列表中时辰储存两次，再将时间对应列表中的时辰，以便后续输出，以及字典的调用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1=[<span class="string">&#x27;子&#x27;</span>,<span class="string">&#x27;丑&#x27;</span>,<span class="string">&#x27;丑&#x27;</span>,<span class="string">&#x27;寅&#x27;</span>,<span class="string">&#x27;寅&#x27;</span>,<span class="string">&#x27;卯&#x27;</span>,<span class="string">&#x27;卯&#x27;</span>,<span class="string">&#x27;辰&#x27;</span>,<span class="string">&#x27;辰&#x27;</span>,<span class="string">&#x27;巳&#x27;</span>,<span class="string">&#x27;巳&#x27;</span>,<span class="string">&#x27;午&#x27;</span>,<span class="string">&#x27;午&#x27;</span>,<span class="string">&#x27;未&#x27;</span>,<span class="string">&#x27;未&#x27;</span>,<span class="string">&#x27;申&#x27;</span>,<span class="string">&#x27;申&#x27;</span>,<span class="string">&#x27;酉&#x27;</span>,<span class="string">&#x27;酉&#x27;</span>,<span class="string">&#x27;戌&#x27;</span>,<span class="string">&#x27;戌&#x27;</span>,<span class="string">&#x27;亥&#x27;</span>,<span class="string">&#x27;亥&#x27;</span>,<span class="string">&#x27;子&#x27;</span>] <span class="comment">#创建时辰列表</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">time1 = list1[time] <span class="comment">#将时间对应时辰</span></span><br></pre></td></tr></table></figure>
<p>​	再调用字典将时辰对应12小时制的数字。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">time2 = dict1.get(time1,<span class="string">&#x27;无效值&#x27;</span>) <span class="comment">#调用字典将时辰与数字对应，time1上不用加&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>​	相较于第一版，增加了活六神的功能,仅做展示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">time3 = time2%<span class="number">6</span> <span class="comment">#对time2取余数，可知龙头宫位</span></span><br><span class="line">whole = <span class="number">6</span>-time3 <span class="comment">#得出青龙后还有几个元素作为整体</span></span><br><span class="line">element=list11[:whole+<span class="number">1</span>] <span class="comment">#将青龙以及后面的元素作为整体</span></span><br><span class="line"><span class="keyword">if</span> time3 == <span class="number">1</span>:</span><br><span class="line">   list12=list11</span><br><span class="line"><span class="keyword">elif</span> time3 == <span class="number">0</span>:</span><br><span class="line">   list12=[<span class="string">&#x27;朱雀&#x27;</span>,<span class="string">&#x27;勾陈&#x27;</span>,<span class="string">&#x27;白虎&#x27;</span>,<span class="string">&#x27;玄武&#x27;</span>,<span class="string">&#x27;腾蛇&#x27;</span>,<span class="string">&#x27;青龙&#x27;</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   list12=[x <span class="keyword">for</span> x <span class="keyword">in</span> list11 <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> element]+element <span class="comment">#先遍历列表8不属于整体的元素再加上整体中的元素生成新列表10</span></span><br><span class="line">x5,y5,z5 = list5[x1],list5[y1],list5[z1] <span class="comment">#分别给三才赋值六神</span></span><br><span class="line">x6,y6,z6 = list12[x1],list12[y1],list12[z1] <span class="comment">#分别给三才赋值活六神</span></span><br><span class="line">number1,number2,number3 = dict2.get(x3),dict2.get(y3),dict2.get(z3) <span class="comment">#调用字典将五行与列表数字对应</span></span><br><span class="line">list13,list14,list15=<span class="built_in">globals</span>()[<span class="string">f&#x27;list<span class="subst">&#123;number1&#125;</span>&#x27;</span>],<span class="built_in">globals</span>()[<span class="string">f&#x27;list<span class="subst">&#123;number2&#125;</span>&#x27;</span>],<span class="built_in">globals</span>()[<span class="string">f&#x27;list<span class="subst">&#123;number3&#125;</span>&#x27;</span>] <span class="comment">#使用globals()作用于全局区别于locals()只能在一个函数局部内返回变量，生成三才对应的十二长生列表</span></span><br></pre></td></tr></table></figure>
<p>​	由于python自带的以及库中的居中对齐功能无法正常使用，为了美观增加了根据字数增加空格的函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_xyz</span>(<span class="params">x,y,z</span>): <span class="comment">#封装成函数</span></span><br><span class="line">   x_len,y_len,z_len = <span class="built_in">len</span>(x),<span class="built_in">len</span>(y),<span class="built_in">len</span>(z)</span><br><span class="line">   <span class="keyword">if</span> x_len == <span class="number">1</span> <span class="keyword">and</span> y_len == <span class="number">1</span> <span class="keyword">and</span> z_len == <span class="number">1</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>, x, <span class="string">&#x27; &#x27;</span>, y, <span class="string">&#x27; &#x27;</span>, z)</span><br><span class="line">   <span class="keyword">elif</span> x_len == <span class="number">2</span> <span class="keyword">and</span> y_len == <span class="number">1</span> <span class="keyword">and</span> z_len == <span class="number">1</span>:</span><br><span class="line">      <span class="built_in">print</span>(x, <span class="string">&#x27;&#x27;</span>, y, <span class="string">&#x27; &#x27;</span>, z)</span><br><span class="line">   <span class="keyword">elif</span> x_len == <span class="number">2</span> <span class="keyword">and</span> y_len == <span class="number">2</span> <span class="keyword">and</span> z_len == <span class="number">1</span>:</span><br><span class="line">      <span class="built_in">print</span>(x, y, <span class="string">&#x27;&#x27;</span>, z)</span><br><span class="line">   <span class="keyword">elif</span> x_len == <span class="number">2</span> <span class="keyword">and</span> y_len == <span class="number">1</span> <span class="keyword">and</span> z_len == <span class="number">2</span>:</span><br><span class="line">      <span class="built_in">print</span>(x, <span class="string">&#x27;&#x27;</span>, y, <span class="string">&#x27;&#x27;</span>, z)</span><br><span class="line">   <span class="keyword">elif</span> x_len == <span class="number">1</span> <span class="keyword">and</span> y_len == <span class="number">2</span> <span class="keyword">and</span> z_len == <span class="number">1</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>, x, <span class="string">&#x27;&#x27;</span>, y, <span class="string">&#x27;&#x27;</span>, z)</span><br><span class="line">   <span class="keyword">elif</span> x_len == <span class="number">1</span> <span class="keyword">and</span> y_len == <span class="number">2</span> <span class="keyword">and</span> z_len == <span class="number">2</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>, x, <span class="string">&#x27;&#x27;</span>, y, z)</span><br><span class="line">   <span class="keyword">elif</span> x_len == <span class="number">1</span> <span class="keyword">and</span> y_len == <span class="number">1</span> <span class="keyword">and</span> z_len == <span class="number">2</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>, x, <span class="string">&#x27; &#x27;</span>, y, <span class="string">&#x27;&#x27;</span>, z)</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">      <span class="built_in">print</span>(x, y, z)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>​	以下是完整代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1=[<span class="string">&#x27;子&#x27;</span>,<span class="string">&#x27;丑&#x27;</span>,<span class="string">&#x27;丑&#x27;</span>,<span class="string">&#x27;寅&#x27;</span>,<span class="string">&#x27;寅&#x27;</span>,<span class="string">&#x27;卯&#x27;</span>,<span class="string">&#x27;卯&#x27;</span>,<span class="string">&#x27;辰&#x27;</span>,<span class="string">&#x27;辰&#x27;</span>,<span class="string">&#x27;巳&#x27;</span>,<span class="string">&#x27;巳&#x27;</span>,<span class="string">&#x27;午&#x27;</span>,<span class="string">&#x27;午&#x27;</span>,<span class="string">&#x27;未&#x27;</span>,<span class="string">&#x27;未&#x27;</span>,<span class="string">&#x27;申&#x27;</span>,<span class="string">&#x27;申&#x27;</span>,<span class="string">&#x27;酉&#x27;</span>,<span class="string">&#x27;酉&#x27;</span>,<span class="string">&#x27;戌&#x27;</span>,<span class="string">&#x27;戌&#x27;</span>,<span class="string">&#x27;亥&#x27;</span>,<span class="string">&#x27;亥&#x27;</span>,<span class="string">&#x27;子&#x27;</span>] <span class="comment">#创建时辰列表</span></span><br><span class="line">list2=[<span class="string">&#x27;大安&#x27;</span>,<span class="string">&#x27;留连&#x27;</span>,<span class="string">&#x27;速喜&#x27;</span>,<span class="string">&#x27;赤口&#x27;</span>,<span class="string">&#x27;小吉&#x27;</span>,<span class="string">&#x27;空亡&#x27;</span>] <span class="comment">#创建六宫列表</span></span><br><span class="line">list3=[<span class="string">&#x27;木&#x27;</span>,<span class="string">&#x27;土&#x27;</span>,<span class="string">&#x27;火&#x27;</span>,<span class="string">&#x27;金&#x27;</span>,<span class="string">&#x27;水&#x27;</span>,<span class="string">&#x27;土&#x27;</span>] <span class="comment">#创建五行列表</span></span><br><span class="line">list4=[<span class="string">&#x27;东&#x27;</span>,<span class="string">&#x27;四方&#x27;</span>,<span class="string">&#x27;南&#x27;</span>,<span class="string">&#x27;西&#x27;</span>,<span class="string">&#x27;北&#x27;</span>,<span class="string">&#x27;中央&#x27;</span>] <span class="comment">#创建方位列表</span></span><br><span class="line">list5=[<span class="string">&#x27;青龙&#x27;</span>,<span class="string">&#x27;腾蛇&#x27;</span>,<span class="string">&#x27;朱雀&#x27;</span>,<span class="string">&#x27;白虎&#x27;</span>,<span class="string">&#x27;玄武&#x27;</span>,<span class="string">&#x27;勾陈&#x27;</span>] <span class="comment">#创建六神列表</span></span><br><span class="line">list6=[<span class="string">&#x27;沐浴&#x27;</span>,<span class="string">&#x27;冠带&#x27;</span>,<span class="string">&#x27;临官&#x27;</span>,<span class="string">&#x27;帝旺&#x27;</span>,<span class="string">&#x27;衰&#x27;</span>,<span class="string">&#x27;死&#x27;</span>,<span class="string">&#x27;病&#x27;</span>,<span class="string">&#x27;墓&#x27;</span>,<span class="string">&#x27;绝&#x27;</span>,<span class="string">&#x27;胎&#x27;</span>,<span class="string">&#x27;养&#x27;</span>,<span class="string">&#x27;长生&#x27;</span>] <span class="comment">#创建木对应的十二长生列表</span></span><br><span class="line">list7=[<span class="string">&#x27;胎&#x27;</span>,<span class="string">&#x27;养&#x27;</span>,<span class="string">&#x27;长生&#x27;</span>,<span class="string">&#x27;沐浴&#x27;</span>,<span class="string">&#x27;冠带&#x27;</span>,<span class="string">&#x27;临官&#x27;</span>,<span class="string">&#x27;帝旺&#x27;</span>,<span class="string">&#x27;衰&#x27;</span>,<span class="string">&#x27;死&#x27;</span>,<span class="string">&#x27;病&#x27;</span>,<span class="string">&#x27;墓&#x27;</span>,<span class="string">&#x27;绝&#x27;</span>] <span class="comment">#创建火对应的十二长生列表</span></span><br><span class="line">list8=[<span class="string">&#x27;死&#x27;</span>,<span class="string">&#x27;病&#x27;</span>,<span class="string">&#x27;墓&#x27;</span>,<span class="string">&#x27;绝&#x27;</span>,<span class="string">&#x27;胎&#x27;</span>,<span class="string">&#x27;养&#x27;</span>,<span class="string">&#x27;长生&#x27;</span>,<span class="string">&#x27;沐浴&#x27;</span>,<span class="string">&#x27;冠带&#x27;</span>,<span class="string">&#x27;临官&#x27;</span>,<span class="string">&#x27;帝旺&#x27;</span>,<span class="string">&#x27;衰&#x27;</span>] <span class="comment">#创建金对应的十二长生列表</span></span><br><span class="line">list9=[<span class="string">&#x27;帝旺&#x27;</span>,<span class="string">&#x27;衰&#x27;</span>,<span class="string">&#x27;死&#x27;</span>,<span class="string">&#x27;病&#x27;</span>,<span class="string">&#x27;墓&#x27;</span>,<span class="string">&#x27;绝&#x27;</span>,<span class="string">&#x27;胎&#x27;</span>,<span class="string">&#x27;养&#x27;</span>,<span class="string">&#x27;长生&#x27;</span>,<span class="string">&#x27;沐浴&#x27;</span>,<span class="string">&#x27;冠带&#x27;</span>,<span class="string">&#x27;临官&#x27;</span>] <span class="comment">#创建水，土对应的十二长生列表</span></span><br><span class="line">list10=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>] <span class="comment">#创建时间列表</span></span><br><span class="line">list11=[<span class="string">&#x27;青龙&#x27;</span>,<span class="string">&#x27;朱雀&#x27;</span>,<span class="string">&#x27;勾陈&#x27;</span>,<span class="string">&#x27;白虎&#x27;</span>,<span class="string">&#x27;玄武&#x27;</span>,<span class="string">&#x27;腾蛇&#x27;</span>] <span class="comment">#创建活六神顺序列表</span></span><br><span class="line">dict1=&#123;<span class="string">&#x27;子&#x27;</span>: <span class="number">1</span>,<span class="string">&#x27;丑&#x27;</span>: <span class="number">2</span>,<span class="string">&#x27;寅&#x27;</span>: <span class="number">3</span>,<span class="string">&#x27;卯&#x27;</span>: <span class="number">4</span>,<span class="string">&#x27;辰&#x27;</span>: <span class="number">5</span>,<span class="string">&#x27;巳&#x27;</span>: <span class="number">6</span>,<span class="string">&#x27;午&#x27;</span>: <span class="number">7</span>,<span class="string">&#x27;未&#x27;</span>: <span class="number">8</span>,<span class="string">&#x27;申&#x27;</span>: <span class="number">9</span>,<span class="string">&#x27;酉&#x27;</span>: <span class="number">10</span>,<span class="string">&#x27;戌&#x27;</span>: <span class="number">11</span>,<span class="string">&#x27;亥&#x27;</span>: <span class="number">12</span>&#125; <span class="comment">#创建时辰字典</span></span><br><span class="line">dict2=&#123;<span class="string">&#x27;木&#x27;</span>:<span class="number">6</span>,<span class="string">&#x27;火&#x27;</span>:<span class="number">7</span>,<span class="string">&#x27;金&#x27;</span>:<span class="number">8</span>,<span class="string">&#x27;水&#x27;</span>:<span class="number">9</span>,<span class="string">&#x27;土&#x27;</span>:<span class="number">9</span>&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>: <span class="comment">#无限循环</span></span><br><span class="line">   <span class="keyword">try</span>: <span class="comment">#尝试运行可能出错的代码</span></span><br><span class="line">      time=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;以24时制输入当地当前时:&quot;</span>)) <span class="comment">#获取时间  </span></span><br><span class="line">   <span class="keyword">except</span> (ValueError, TypeError): <span class="comment">#数值错误和数值类型错误时的处理</span></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;错误,输入数字有误,例:当前13:11,则输入13&quot;</span>)</span><br><span class="line">      <span class="keyword">continue</span> <span class="comment">#跳过下面的循环，防止因为上面错误导致time没有获取数值而使下面的判断报错</span></span><br><span class="line">   <span class="keyword">if</span> time <span class="keyword">in</span> list10: <span class="comment">#判断输入数字是否为0~23</span></span><br><span class="line">      <span class="keyword">break</span> <span class="comment">#正常则执行下面的代码</span></span><br><span class="line">   <span class="keyword">else</span>: <span class="comment">#不符合则提示并循环</span></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;错误,输入数字有误,例:当前13:11,则输入13&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;输入心中立即想到的任意大小的正整数&quot;</span>)</span><br><span class="line">numbers1 = [<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>]  <span class="comment"># 用列表存储 x, y, z</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>): <span class="comment"># 循环三次以获取三个数字</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>: <span class="comment">#无限循环</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            numbers1[i] = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">f&quot;请输入第 <span class="subst">&#123;i + <span class="number">1</span>&#125;</span> 个数字: &quot;</span>)) <span class="comment">#使用f语句</span></span><br><span class="line">            <span class="keyword">if</span> numbers1[i] &lt;= <span class="number">0</span>:  <span class="comment"># 检查输入的数字是否为正整数</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;输入数字有误，请输入正负整数&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span>  <span class="comment"># 如果输入有效，则退出当前的 while 循环</span></span><br><span class="line">        <span class="keyword">except</span> (ValueError,TypeError):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;输入数字有误，请输入正负整数&quot;</span>)</span><br><span class="line">x, y, z = numbers1 <span class="comment"># 将输入的数字赋值给 x, y, z</span></span><br><span class="line">time1 = list1[time] <span class="comment">#将时间对应时辰</span></span><br><span class="line">time2 = dict1.get(time1,<span class="string">&#x27;无效值&#x27;</span>) <span class="comment">#调用字典将时辰与数字对应，time1上不用加&#x27;&#x27;</span></span><br><span class="line">time3 = time2%<span class="number">6</span> <span class="comment">#对time2取余数，可知龙头宫位</span></span><br><span class="line">whole = <span class="number">6</span>-time3 <span class="comment">#得出青龙后还有几个元素作为整体</span></span><br><span class="line">element=list11[:whole+<span class="number">1</span>] <span class="comment">#将青龙以及后面的元素作为整体</span></span><br><span class="line">x1,y1,z1= (x-<span class="number">1</span>)%<span class="number">6</span>,(x+y-<span class="number">2</span>)%<span class="number">6</span>,(x+y+z-<span class="number">3</span>)%<span class="number">6</span> <span class="comment">#分别取余数</span></span><br><span class="line">x2,y2,z2 = list2[x1],list2[y1],list2[z1] <span class="comment">#分别给三才赋值六宫</span></span><br><span class="line">x3,y3,z3 = list3[x1],list3[y1],list3[z1] <span class="comment">#分别给三才赋值五行</span></span><br><span class="line">x4,y4,z4 = list4[x1],list4[y1],list4[z1] <span class="comment">#分别给三才赋值方位</span></span><br><span class="line"><span class="keyword">if</span> time3 == <span class="number">1</span>:</span><br><span class="line">   list12=list11</span><br><span class="line"><span class="keyword">elif</span> time3 == <span class="number">0</span>:</span><br><span class="line">   list12=[<span class="string">&#x27;朱雀&#x27;</span>,<span class="string">&#x27;勾陈&#x27;</span>,<span class="string">&#x27;白虎&#x27;</span>,<span class="string">&#x27;玄武&#x27;</span>,<span class="string">&#x27;腾蛇&#x27;</span>,<span class="string">&#x27;青龙&#x27;</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   list12=[x <span class="keyword">for</span> x <span class="keyword">in</span> list11 <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> element]+element <span class="comment">#先遍历列表8不属于整体的元素再加上整体中的元素生成新列表10</span></span><br><span class="line">x5,y5,z5 = list5[x1],list5[y1],list5[z1] <span class="comment">#分别给三才赋值六神</span></span><br><span class="line">x6,y6,z6 = list12[x1],list12[y1],list12[z1] <span class="comment">#分别给三才赋值活六神</span></span><br><span class="line">number1,number2,number3 = dict2.get(x3),dict2.get(y3),dict2.get(z3) <span class="comment">#调用字典将五行与列表数字对应</span></span><br><span class="line">list13,list14,list15=<span class="built_in">globals</span>()[<span class="string">f&#x27;list<span class="subst">&#123;number1&#125;</span>&#x27;</span>],<span class="built_in">globals</span>()[<span class="string">f&#x27;list<span class="subst">&#123;number2&#125;</span>&#x27;</span>],<span class="built_in">globals</span>()[<span class="string">f&#x27;list<span class="subst">&#123;number3&#125;</span>&#x27;</span>] <span class="comment">#使用globals()作用于全局区别于locals()只能在一个函数局部内返回变量，生成三才对应的十二长生列表</span></span><br><span class="line">x7,y7,z7 =list13[time2-<span class="number">1</span>],list14[time2-<span class="number">1</span>],list15[time2-<span class="number">1</span>]</span><br><span class="line">time_len = <span class="built_in">len</span>(<span class="built_in">str</span>(time))</span><br><span class="line"><span class="keyword">if</span> time_len == <span class="number">1</span>:</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&#x27;时间&#x27;</span>,<span class="string">&#x27;&#x27;</span>,time,<span class="string">&#x27;  &#x27;</span>,time1)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&#x27;时间&#x27;</span>,<span class="string">&#x27;&#x27;</span>,time,<span class="string">&#x27; &#x27;</span>,time1)</span><br><span class="line"><span class="built_in">print</span>(x2,y2,z2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>,x3,<span class="string">&#x27; &#x27;</span>,y3,<span class="string">&#x27; &#x27;</span>,z3)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_xyz</span>(<span class="params">x,y,z</span>): <span class="comment">#封装成函数</span></span><br><span class="line">   x_len,y_len,z_len = <span class="built_in">len</span>(x),<span class="built_in">len</span>(y),<span class="built_in">len</span>(z)</span><br><span class="line">   <span class="keyword">if</span> x_len == <span class="number">1</span> <span class="keyword">and</span> y_len == <span class="number">1</span> <span class="keyword">and</span> z_len == <span class="number">1</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>, x, <span class="string">&#x27; &#x27;</span>, y, <span class="string">&#x27; &#x27;</span>, z)</span><br><span class="line">   <span class="keyword">elif</span> x_len == <span class="number">2</span> <span class="keyword">and</span> y_len == <span class="number">1</span> <span class="keyword">and</span> z_len == <span class="number">1</span>:</span><br><span class="line">      <span class="built_in">print</span>(x, <span class="string">&#x27;&#x27;</span>, y, <span class="string">&#x27; &#x27;</span>, z)</span><br><span class="line">   <span class="keyword">elif</span> x_len == <span class="number">2</span> <span class="keyword">and</span> y_len == <span class="number">2</span> <span class="keyword">and</span> z_len == <span class="number">1</span>:</span><br><span class="line">      <span class="built_in">print</span>(x, y, <span class="string">&#x27;&#x27;</span>, z)</span><br><span class="line">   <span class="keyword">elif</span> x_len == <span class="number">2</span> <span class="keyword">and</span> y_len == <span class="number">1</span> <span class="keyword">and</span> z_len == <span class="number">2</span>:</span><br><span class="line">      <span class="built_in">print</span>(x, <span class="string">&#x27;&#x27;</span>, y, <span class="string">&#x27;&#x27;</span>, z)</span><br><span class="line">   <span class="keyword">elif</span> x_len == <span class="number">1</span> <span class="keyword">and</span> y_len == <span class="number">2</span> <span class="keyword">and</span> z_len == <span class="number">1</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>, x, <span class="string">&#x27;&#x27;</span>, y, <span class="string">&#x27;&#x27;</span>, z)</span><br><span class="line">   <span class="keyword">elif</span> x_len == <span class="number">1</span> <span class="keyword">and</span> y_len == <span class="number">2</span> <span class="keyword">and</span> z_len == <span class="number">2</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>, x, <span class="string">&#x27;&#x27;</span>, y, z)</span><br><span class="line">   <span class="keyword">elif</span> x_len == <span class="number">1</span> <span class="keyword">and</span> y_len == <span class="number">1</span> <span class="keyword">and</span> z_len == <span class="number">2</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>, x, <span class="string">&#x27; &#x27;</span>, y, <span class="string">&#x27;&#x27;</span>, z)</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">      <span class="built_in">print</span>(x, y, z)</span><br><span class="line">print_xyz(x4,y4,z4) <span class="comment">#调用函数</span></span><br><span class="line"><span class="built_in">print</span>(x5,y5,z5)</span><br><span class="line"><span class="built_in">print</span>(x6,y6,z6)</span><br><span class="line">print_xyz(x7,y7,z7) <span class="comment">#调用函数</span></span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;按下Enter退出&quot;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>术数</category>
      </categories>
      <tags>
        <tag>小六壬</tag>
        <tag>起课器</tag>
      </tags>
  </entry>
  <entry>
    <title>在butterfly主题添加一个副标题，并能够输出自定义的随机语录</title>
    <url>/2025/08/30/%E5%9C%A8butterfly%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E5%89%AF%E6%A0%87%E9%A2%98%EF%BC%8C%E5%B9%B6%E8%83%BD%E5%A4%9F%E8%BE%93%E5%87%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E9%9A%8F%E6%9C%BA%E8%AF%AD%E5%BD%95/</url>
    <content><![CDATA[<h1>在butterfly主题添加一个副标题，并能够输出自定义的随机语录</h1>
<p>目前已经有许多在主题中接入一言来实现输出随机语录，但是对于自定义语录库的教程，暂未看到能够明了的讲清楚如何实现这一功能的</p>
<p>通过参考<a href="https://fanyiming.life/?p=128">Butterfly主题首页副标题自定义随机句子 – Eamon’s Blog</a>和deepseek完成了此功能</p>
<h2 id="注意在所有操作前都要确保备份"># 注意在所有操作前都要确保备份</h2>
<h2 id="1-创建语录库">1.创建语录库</h2>
<p>在博客的根目录下的source下(注意不是主题下的source)创建subtitle.json，在里面放句子</p>
<p>格式如下：</p>
<p>[“争知我，倚阑杆处，正恁凝愁！”,</p>
<p>“衣懒换，酒难赊。可怜此夕看梅花。”,</p>
<p>“为伊判作梦中人，索向画图清夜唤真真。”</p>
<p>]</p>
<h2 id="2-修改pug文件">2.修改pug文件</h2>
<p>在主题的文件夹下找到layout\includes\thrid-party\subtitle.pug</p>
<p>划到最下面会有一个case source开头的代码下面有多个when开头的分支和default开头的分支</p>
<p>将default及以下的代码替换为如下的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">default</span><br><span class="line">  script.</span><br><span class="line">    // 获取默认内容作为后备</span><br><span class="line">    var defaultQuote = !&#123;JSON.stringify(subContent[0] || &#x27;&#x27;)&#125;;</span><br><span class="line">    // 页面加载完成后执行</span><br><span class="line">    document.addEventListener(&#x27;DOMContentLoaded&#x27;, function() &#123;</span><br><span class="line">      // 尝试从 subtitle.json 获取内容</span><br><span class="line">      fetch(&#x27;/subtitle.json&#x27;)</span><br><span class="line">        .then(response =&gt; &#123;</span><br><span class="line">          if (!response.ok) &#123;</span><br><span class="line">            throw new Error(&#x27;网络响应不正常&#x27;);</span><br><span class="line">          &#125;</span><br><span class="line">          return response.json();</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(quotes =&gt; &#123;</span><br><span class="line">          // 确保 quotes 是数组且有内容</span><br><span class="line">          if (Array.isArray(quotes) &amp;&amp; quotes.length &gt; 0) &#123;</span><br><span class="line">            // 随机选择一条语录</span><br><span class="line">            var randomIndex = Math.floor(Math.random() * quotes.length);</span><br><span class="line">            displayQuote(quotes[randomIndex]);</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            // 如果 quotes 无效，使用默认内容</span><br><span class="line">            displayQuote(defaultQuote);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(error =&gt; &#123;</span><br><span class="line">          console.error(&#x27;加载自定义语录失败:&#x27;, error);</span><br><span class="line">          // 出错时使用默认内容</span><br><span class="line">          displayQuote(defaultQuote);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 显示语录的函数</span><br><span class="line">    function displayQuote(quote) &#123;</span><br><span class="line">      var subtitleElement = document.getElementById(&quot;subtitle&quot;);</span><br><span class="line">      if (subtitleElement) &#123;</span><br><span class="line">        subtitleElement.innerHTML = quote;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p># 注意，deepseek提示这段代码需要与上面的when语句对齐，至于没有对齐是否能完成此功能，未进行测试</p>
<h2 id="3-配置博客的配置文件">3.配置博客的配置文件</h2>
<p>在博客的根目录下打开_config.yml文件，查找</p>
<p>subtitle:<br>
enable: true</p>
<p>确保enable后的是true开启</p>
<h2 id="4-关于打字机效果">4.关于打字机效果</h2>
<p>在enable下面会有effect，后面也为true则为开启</p>
<p>但是实际实现中共没有能做到这个效果，在浏览器控制台中会有报错</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>副标题</tag>
        <tag>语录</tag>
      </tags>
  </entry>
  <entry>
    <title>CQB理论</title>
    <url>/2025/10/03/CQB%E7%90%86%E8%AE%BA/</url>
    <content><![CDATA[<h2 id="CQB理论">CQB理论</h2>
<h2 id="1-认识CQB">1.认识CQB</h2>
<h3 id="1-概述">1.概述</h3>
<ul>
<li>英文中<strong>close quarter battle</strong>的简写</li>
<li>即<strong>室内近距离</strong> 作战</li>
</ul>
<h3 id="2-特点">2.特点</h3>
<ul>
<li>由于和敌人是保持一个极近的距离，所以双方开火都能以很<strong>快</strong> ，很<strong>密集</strong> 的火力快速覆盖敌人
<ul>
<li>近距离</li>
<li>激烈性</li>
<li>短时性</li>
</ul>
</li>
<li>是特种作战</li>
<li>具有高度独立性</li>
</ul>
<p># 这里是CQB的特点，而不是CQB战术的特点</p>
<h3 id="3-驱动CQB的底层逻辑">3.驱动CQB的底层逻辑</h3>
<h4 id="1-具有十分明确的目的性">1.具有十分明确的目的性</h4>
<ul>
<li>
<p>其目的包括：</p>
<ul>
<li>
<p>解救人质</p>
</li>
<li>
<p>获取某些重要的情报</p>
</li>
<li>
<p>保证公共财产的安全</p>
</li>
</ul>
</li>
<li>
<p>这就解释了为什么CQB如此危险但仍然存在，没有被大规模的火力压制取代</p>
</li>
<li>
<p>所以CQB的本质上是一种<strong>限制性</strong> 战斗</p>
</li>
</ul>
<h4 id="2-严谨性">2.严谨性</h4>
<ul>
<li>在实际战斗中会面对各种各样的情况，对于各种威胁
<ul>
<li>要从实际的角度出发</li>
<li>站在客观的角度上分析问题和解决问题</li>
<li>因地制宜地去选择装备和战术</li>
<li>警惕教条主义和经验主义</li>
</ul>
</li>
</ul>
<h2 id="2-CQB战术">2.CQB战术</h2>
<ul>
<li>
<p>战术即战斗方法</p>
</li>
<li>
<p>CQB战术即是室内近距离战斗方法</p>
</li>
<li>
<p>CQB战术共有两个分类，即CQB战术的两大核心</p>
<ul>
<li><strong>迅猛</strong></li>
<li><strong>静默</strong></li>
</ul>
</li>
</ul>
<h3 id="1-特点">1.特点</h3>
<h4 id="1-隐蔽性">1.隐蔽性</h4>
<ul>
<li>例如：在敌人未知我方要进攻时
<ul>
<li>迅猛：
<ul>
<li>易引起敌方警觉</li>
</ul>
</li>
<li>静默：
<ul>
<li>不易被发现</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="2-机动性（灵活性）">2.机动性（灵活性）</h4>
<ul>
<li>例如：在敌方已知我方要进攻时
<ul>
<li>静默：
<ul>
<li>移动缓慢，易被敌方集火</li>
</ul>
</li>
<li>迅猛：
<ul>
<li>可以使用火力压制，进行快速突入</li>
</ul>
</li>
</ul>
</li>
<li>但是这种情况的问题在于，敌人掌握我方行动。我方失去行动突然性。
<ul>
<li>突然性为<strong>硬性指标</strong></li>
<li>优秀的CQB战术是海浪式的进攻
<ul>
<li>在一波进攻结束后</li>
<li>队伍进入隐蔽状态，即重新获得突然性</li>
<li>再进行下一波的进攻</li>
</ul>
</li>
</ul>
</li>
<li>缺少了信息不对称的优势，属于巨大失误</li>
</ul>
<h4 id="3-时效性">3.时效性</h4>
<ul>
<li>例如：炸弹爆炸场景
<ul>
<li>迅猛：
<ul>
<li>易被敌方发现，导致炸弹提取爆炸</li>
</ul>
</li>
<li>静默：
<ul>
<li>不易被敌方发现，但行动缓慢，可能导致无法在爆炸前完成拆除任务</li>
</ul>
</li>
<li>两者相结合：
<ul>
<li>以静默靠近敌人，再以迅猛清除所有敌人</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="3-CQB流程">3.CQB流程</h2>
<h3 id="1-前期">1.前期</h3>
<ul>
<li>
<p>即获得任务并且已知任务目标</p>
</li>
<li>
<p>对任务有初步的了解</p>
</li>
<li>
<p>根据对目标的了解</p>
<ul>
<li>针对目标进行搜索信息
<ul>
<li>搜集到的信息在进一步的检索后，可能会获得潜在信息</li>
</ul>
</li>
</ul>
</li>
<li>
<p>例如：匪徒正在抢劫一个银行</p>
<ul>
<li>首先银行是一个公共场所</li>
<li>匪徒不可能对其长期占有，对其进行过非法改装的可能性较小</li>
<li>即银行建筑图可以被信任</li>
</ul>
</li>
</ul>
<h4 id="基础信息总汇">基础信息总汇</h4>
<ul>
<li>信息四要素</li>
</ul>
<h5 id="1-时间">1.时间</h5>
<ul>
<li>光照角度</li>
<li>照明情况</li>
<li>人流情况（早晚高峰）</li>
</ul>
<h5 id="2-地点">2.地点</h5>
<ul>
<li>改造情况</li>
<li>地图要求</li>
<li>战前规划</li>
</ul>
<h5 id="3-人物">3.人物</h5>
<ul>
<li>训练经验</li>
<li>武装情况</li>
</ul>
<h5 id="4-动机">4.动机</h5>
<ul>
<li>敌人的犯罪目标</li>
</ul>
<p># 可以有针对性的制定相应的交火规则以及开火规则限制</p>
<h3 id="2-中期">2.中期</h3>
<h4 id="1-瞄准">1.瞄准</h4>
<ul>
<li>在行动中严禁瞄准敌人头部（除非敌人挟持人质）</li>
<li>只能瞄准胸口
<ul>
<li>问题：
<ul>
<li>射击精度不够，无法一击毙命</li>
<li>瞄准头部会导致手臂下的部分视野缺失</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="2-死亡漏斗">2.死亡漏斗</h4>
<ul>
<li>
<p>在门前后150度左右的扇形区域</p>
</li>
<li>
<p>进攻方在漏斗里面会暴露自己的身体位置和信息的</p>
</li>
<li>
<p>因此会有三点要求</p>
<ul>
<li>在进门之前尽量减少身体在漏斗区域的暴露</li>
<li>进门的时候<strong>不可以在门口逗留</strong></li>
<li>不要随便越过漏斗，如果要越过漏斗，必须枪指着漏斗越过</li>
</ul>
<p># 在非必要情况下，一般不会经常越过漏斗</p>
</li>
</ul>
<h4 id="3-强弱原则">3.强弱原则</h4>
<h5 id="1-强弱手">1.强弱手</h5>
<ul>
<li>
<p>队员对于自己的控制</p>
</li>
<li>
<p>利手则为强手</p>
</li>
</ul>
<h5 id="2-强弱手位">2.强弱手位</h5>
<ul>
<li>
<p>整个队伍对于进攻的状态</p>
</li>
<li>
<p>利于进攻的位置即为强手位</p>
</li>
<li>
<p><strong>判断强弱手位原则</strong> ：</p>
<ul>
<li>
<p>第一原则：</p>
<ul>
<li>
<p>视野原则：</p>
<ul>
<li>具有<strong>更大视野</strong> 的为强手位</li>
</ul>
<p># 这个原则可以解决大部分的强弱手位判断，有极强的适用性</p>
</li>
</ul>
</li>
<li>
<p>第二原则：</p>
<ul>
<li>视角原则：
<ul>
<li>进攻动作让枪械在更小的范围内更精确的锁定敌人</li>
</ul>
</li>
</ul>
</li>
<li>
<p>第三原则：</p>
<ul>
<li>
<p>外开原则：</p>
<ul>
<li>即门是向外开的，那么开门的人就是弱手位</li>
</ul>
<p># 但如果门可以打开至完全和墙贴合，那么可以视为没有门</p>
</li>
</ul>
</li>
</ul>
<p># 这些原则都是建立在没有使用任何战术道具的前提上，如果涉及到就要重新分配位置</p>
</li>
<li>
<p><strong>单开门双纵队交叉进门区分强弱手位及具体站位</strong></p>
</li>
<li>
<p>强手位先进门，弱手位后进门</p>
<ul>
<li>
<p>单开门：</p>
<ul>
<li>
<p>门轴处为<strong>强手位</strong></p>
<ul>
<li>在门外列队时，最外侧的脚不可以超过门轴，保证大部分身体有掩体</li>
<li>离墙半个身位的距离
<ul>
<li>防止敌人穿射</li>
<li>防止单片弹射</li>
</ul>
</li>
<li>斜45度架设门内区域</li>
<li>完成和门有关的一切动作</li>
<li>在开小门后
<ul>
<li>先观察门后是否安全</li>
<li>查看是否有绊线，选择强手位或弱手位拆除
<ul>
<li>弱手位拆绊线，可以保证身体大部分处于掩体，但需要强手位提示绊线位置</li>
<li>强手位拆绊线则需要，让队友架设强手位的前方</li>
</ul>
</li>
</ul>
</li>
<li>等待弱手位信号，再大开门</li>
<li>放弃45度架设位，回退至安全角</li>
<li>再从安全角慢切至90度</li>
<li>确认安全后，再回到45度架设，进行决策</li>
<li>准备进攻前先抬头示意队友并等待队友抬头回应同意</li>
<li>按照强手先出的顺序收枪移动进门</li>
</ul>
<p># 一定要先收枪再进门</p>
<ul>
<li>直线进门</li>
</ul>
</li>
<li>
<p>门把手位为<strong>弱手位</strong></p>
<ul>
<li>只负责架设，和拆除绊线</li>
<li>完成开小门和拆除绊线后
<ul>
<li>弱手位抬头给出信号，示意强手位打开门
<ul>
<li>即弱手位来协同开门时间</li>
</ul>
</li>
</ul>
</li>
<li>放弃45度架设位，回退至安全角</li>
<li>再从安全角慢切至90度</li>
<li>确认安全后，再回到45度架设，进行决策</li>
<li>准备进攻前先抬头示意队友并等待队友抬头回应同意</li>
<li>按照弱手后出的顺序收枪移动进门</li>
</ul>
<p># 一定要先收枪再进门</p>
<ul>
<li>直线进门</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p># 在开门后，如果弱手位获取到了任何不安全的信息，那么弱手位就变成强手位</p>
<p><strong>单开门单纵队交替进入</strong></p>
<ul>
<li>
<p>适用于两侧队员都在门的一侧就位</p>
</li>
<li>
<p>或门的两侧任意一侧没有位置站</p>
</li>
<li>
<p>在第一个的尖兵：</p>
<ul>
<li>先开小门确认门后安全</li>
<li>检察绊线</li>
<li>大开门</li>
<li>观察45度后立马再观察90</li>
<li>全都安全后收枪</li>
<li>然后往左侧或右侧钩进门，向观察过的位置的另一侧（即危险区域）</li>
</ul>
</li>
<li>
<p>二号位：</p>
<ul>
<li>在尖兵钩进门之后，立马跟进</li>
<li>观察门后以及尖兵后</li>
</ul>
</li>
</ul>
<p><strong>双开门双纵队双勾进入</strong></p>
<ul>
<li>适用于能够容纳两个人同时进入的门的区域</li>
<li>这种情况就不区分强弱手位</li>
<li>门大开后左侧队员钩左，右侧队员钩右</li>
<li>两侧先45度架设门内</li>
<li>由左侧队员控门
<ul>
<li>先开自己一侧的门</li>
<li>观察是否有敌人</li>
<li>再将门切换到对侧
<ul>
<li>由右侧观察是否有敌人</li>
</ul>
</li>
<li>等待队员抬头示意</li>
<li>大开门</li>
<li>由45度顺着门大开的方向转到90度观察</li>
<li>做决策进门</li>
</ul>
</li>
<li>右侧队员等待左侧队员开门
<ul>
<li>门切换至右侧时观察门后情况</li>
<li>抬头示意</li>
<li>等待门大开后由45度顺着门大开的方向转到90度观察</li>
<li>做决策进门</li>
</ul>
</li>
</ul>
<h4 id="4-责任区间">4.责任区间</h4>
<ul>
<li>
<p>为了以最快的速度全面控制和警戒</p>
</li>
<li>
<p>责任区间不能重叠</p>
</li>
<li>
<p>如果在移动后可能会导致越过队友枪线</p>
</li>
<li>
<p>则需要更改责任区间</p>
</li>
</ul>
]]></content>
      <categories>
        <category>CQB</category>
      </categories>
      <tags>
        <tag>CQB</tag>
      </tags>
  </entry>
</search>
